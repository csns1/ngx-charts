{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-charts/lib/common/tooltip/injection.service.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/position/placement.type.ts","ng://@swimlane/ngx-charts/lib/utils/throttle.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/position/position.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/injection-registery.service.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.ts","ng://@swimlane/ngx-charts/lib/common/charts/chart.component.ts","ng://@swimlane/ngx-charts/lib/utils/visibility-observer.ts","ng://@swimlane/ngx-charts/lib/common/base-chart.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/axis-label.component.ts","ng://@swimlane/ngx-charts/lib/common/trim-label.helper.ts","ng://@swimlane/ngx-charts/lib/common/axes/ticks.helper.ts","ng://@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/x-axis.component.ts","ng://@swimlane/ngx-charts/lib/common/shape.helper.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/style.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/alignment.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/show.type.ts","ng://@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/y-axis.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/axes.module.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.ts","ng://@swimlane/ngx-charts/lib/common/label.helper.ts","ng://@swimlane/ngx-charts/lib/utils/id.ts","ng://@swimlane/ngx-charts/lib/common/circle-series.component.ts","ng://@swimlane/ngx-charts/lib/common/circle.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-panel.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-panel-series.component.ts","ng://@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.ts","ng://@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.ts","ng://@swimlane/ngx-charts/lib/common/area.component.ts","ng://@swimlane/ngx-charts/lib/common/count/count.helper.ts","ng://@swimlane/ngx-charts/lib/common/count/count.directive.ts","ng://@swimlane/ngx-charts/lib/events.ts","ng://@swimlane/ngx-charts/lib/common/tooltip-area.component.ts","ng://@swimlane/ngx-charts/lib/common/timeline/timeline.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/legend.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/legend-entry.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/scale-legend.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.ts","ng://@swimlane/ngx-charts/lib/common/chart-common.module.ts","ng://@swimlane/ngx-charts/lib/common/view-dimensions.helper.ts","ng://@swimlane/ngx-charts/lib/utils/color-sets.ts","ng://@swimlane/ngx-charts/lib/common/color.helper.ts","ng://@swimlane/ngx-charts/lib/common/domain.helper.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.ts","ng://@swimlane/ngx-charts/lib/utils/sort.ts","ng://@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-series.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart.module.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-label.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.utils.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map.module.ts","ng://@swimlane/ngx-charts/lib/line-chart/line.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-chart.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-series.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-chart.module.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.ts","ng://@swimlane/ngx-charts/lib/utils/types.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-label.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-layout.helper.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.ts","ng://@swimlane/ngx-charts/lib/number-card/card.component.ts","ng://@swimlane/ngx-charts/lib/utils/color-utils.ts","ng://@swimlane/ngx-charts/lib/number-card/card-series.component.ts","ng://@swimlane/ngx-charts/lib/number-card/number-card.component.ts","ng://@swimlane/ngx-charts/lib/number-card/number-card.module.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map.module.ts","ng://@swimlane/ngx-charts/lib/gauge/linear-gauge.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge-arc.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge-axis.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge.module.ts","ng://@swimlane/ngx-charts/lib/ngx-charts.module.ts","ng://@swimlane/ngx-charts/lib/polyfills.ts","ng://@swimlane/ngx-charts/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","InjectionService_1","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","Injectable","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","descriptor","configurable","enumerable","get","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","Component","selector","template","encapsulation","ViewEncapsulation","None","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","Output","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","Directive","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","StyleTypes","AlignmentTypes","ShowTypes","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","AxesModule","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","formatLabel","escapeLabel","replace","match","&","'","`","\"","<",">","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelComponent","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","round","finished","val","decimalChecker","abs","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","event_1","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","D0Types","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","BarChartModule","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","LineChartModule","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","navigator","userAgent","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","PolarChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","NumberCardModule","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","TreeMapModule","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","GaugeModule","NgxChartsModule","SVGElement","HTMLDivElement","fieldType","groupByType","timeFormat","formatter"],"mappings":"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GAAY,CACrB,CACEtb,KAAM,QACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,UACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,OACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,OACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACE/E,KAAM,QACNub,YAAY,EACZhH,MAAO,aACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,MACNub,YAAY,EACZhH,MAAO,aACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,OACNub,YAAY,EACZhH,MAAO,aACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,QACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,QACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,SACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,UACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,QACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,SACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,QACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACE/E,KAAM,cACNub,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,2BChPJ,SAAAyW,EAAY3c,EAAQlG,EAAMoM,EAAQ0W,GACV,iBAAX5c,IACTA,EAASyc,GAAUtM,MAAK,SAAA0M,GACtB,OAAOA,EAAG1b,OAASnB,MAGvBrP,KAAKmsB,YAAc9c,EAAOkG,OAC1BvV,KAAKyN,UAAYtE,EACjBnJ,KAAKuV,OAASA,EACdvV,KAAKisB,aAAeA,EAEpBjsB,KAAKgU,MAAQhU,KAAKosB,oBAAoB/c,EAAQlG,EAAMnJ,KAAKuV,QA4I7D,OAzIEyW,EAAA9rB,UAAAksB,oBAAA,SAAoB/c,EAAQlG,EAAMoM,GAMhC,IAAI8W,EACJ,GANsB,iBAAXhd,IACTA,EAASyc,GAAUtM,MAAK,SAAA0M,GACtB,OAAOA,EAAG1b,OAASnB,MAIV,aAATlG,EACFkjB,EAAaC,EAAAA,gBACV3N,MAAMtP,EAAOkG,QACbA,OAAOA,QACL,GAAa,YAATpM,EACTkjB,EAAaE,EAAAA,eACV5N,MAAMtP,EAAOkG,QACbA,OAAOA,QACL,GAAa,WAATpM,EAAmB,CAE5B,IAAMgjB,EAAW7pB,EAAO+M,EAAOkG,QACJ,IAAvB4W,EAAYxrB,SACdwrB,EAAY/pB,KAAK+pB,EAAY,IAC7BnsB,KAAKmsB,YAAcA,GAGrB,IAAMK,EAAS7N,EAAAA,MAAM,EAAG,EAAG,EAAMwN,EAAYxrB,QAC7C0rB,EAAa3E,EAAAA,cACVnS,OAAOiX,GACP7N,MAAMwN,GAGX,OAAOE,GAGTL,EAAA9rB,UAAA2e,SAAA,SAAS9c,GACP,GAAIA,MAAAA,EACF,MAAM,IAAIqB,MAAM,yBAElB,GAAuB,WAAnBpD,KAAKyN,UAAwB,CAC/B,IAAMgf,EAAa/E,EAAAA,cAChBnS,OAAOvV,KAAKuV,QACZoJ,MAAM,CAAC,EAAG,IAEb,OAAO3e,KAAKgU,MAAMyY,EAAW1qB,IAE7B,GAAiC,mBAAtB/B,KAAKisB,aACd,OAAOjsB,KAAKisB,aAAalqB,GAG3B,IAAM2qB,EAAiB3qB,EAAM4S,WACzBgY,OAAK,EAOT,OANI3sB,KAAKisB,cAAgBjsB,KAAKisB,aAAatrB,OAAS,IAClDgsB,EAAQ3sB,KAAKisB,aAAazM,MAAK,SAAAoN,GAC7B,OAAOA,EAAQpc,KAAKqc,gBAAkBH,EAAeG,kBAIrDF,EACKA,EAAM5qB,MAEN/B,KAAKgU,MAAMjS,IAKxBiqB,EAAA9rB,UAAA4sB,uBAAA,SAAuB/qB,EAAO4hB,gBACd3f,IAAV2f,IACFA,EAAQ3jB,KAAKuV,OAAO,IAGtB,IAAMkX,EAAa/E,EAAAA,cAChBnS,OAAOvV,KAAKuV,QACZoJ,MAAM,CAAC,EAAG,IAEPoO,EAAkBC,EAAAA,YACrBzX,OAAOvV,KAAKmsB,aACZxN,MAAM,CAAC,EAAG,IAEPsO,EAAWjtB,KAAK6e,SAAS9c,GAGzBmgB,EAAWuK,EAAW9I,GACtBuJ,EAAaltB,KAAK6e,SAAS8E,GAE3BxB,EAASsK,EAAW1qB,GACtBvB,EAAI,EACJ2sB,EAAajL,EACXhB,EAAQ,GASd,IAPAA,EAAM9e,KAAK,CACTmc,MAAO2O,EACP/a,OAAQ+P,EACRkL,eAAgBlL,EAChBhU,QAAS,IAGJif,EAAahL,GAAU3hB,EAAIR,KAAKmsB,YAAYxrB,QAAQ,CACzD,IAAM4d,EAAQve,KAAKmsB,YAAY3rB,GACzB2R,EAAS4a,EAAgBxO,GAC/B,GAAIpM,GAAU+P,EACZ1hB,QADF,CAKA,GAAI2R,EAAO+S,QAAQ,KAAO/C,EAAS4K,EAAgBvY,aAAa0Q,QAAQ,GACtE,MAGFhE,EAAM9e,KAAK,CACTmc,MAAKA,EACLpM,OAAMA,EACNjE,QAAS,IAEXif,EAAahb,EACb3R,KAWF,GARI0gB,EAAMA,EAAMvgB,OAAS,GAAGwR,OAAS,KACnC+O,EAAM9e,KAAK,CACTmc,MAAO0O,EACP9a,OAAQgQ,EACRjU,QAAS,IAITiU,IAAWD,EACbhB,EAAM,GAAG/O,OAAS,EAClB+O,EAAM,GAAG/O,OAAS,SAGlB,GAAuC,MAAnC+O,EAAMA,EAAMvgB,OAAS,GAAGwR,WAC1B,IAAgB,IAAAkb,EAAA5rB,EAAAyf,GAAKoM,EAAAD,EAAAvrB,QAAAwrB,EAAAtrB,KAAAsrB,EAAAD,EAAAvrB,OAAE,CAAlB,IAAMvB,EAAC+sB,EAAAvrB,MACVxB,EAAE4R,QAAW5R,EAAE4R,OAAS+P,IAAaC,EAASD,GAAa,sGAKjE,OAAOhB,GAEX8K,KC7JA,SAAgBuB,GAAuBzd,eAC/B0d,EAAW,IAAIC,QACrB,IAAqB,IAAAC,EAAAjsB,EAAAqO,GAAO6d,EAAAD,EAAA5rB,QAAA6rB,EAAA3rB,KAAA2rB,EAAAD,EAAA5rB,OAAE,CAAzB,IAAMkE,EAAM2nB,EAAA5rB,UACf,IAAgB,IAAAmP,GAAAC,OAAA,EAAA1P,EAAAuE,EAAO0K,SAAMU,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA1B,IAAMxC,EAAC8R,EAAArP,MACVyrB,EAASI,IAAItuB,EAAEkR,2MAGnB,OAAO7Q,MAAMkuB,KAAKL,GAOpB,SAAgBM,GAAazG,EAAe0G,GAC1C,SAD0C,IAAAA,IAAAA,GAAA,GACtCA,IACe1G,EAAO2G,OAAM,SAAAjsB,GAAS,OAAAA,aAAiBsE,QAEtD,MAAO,OAKX,OADmBghB,EAAO2G,OAAM,SAAAjsB,GAAS,MAAiB,iBAAVA,KAEvC,SAGF,6BC4HT,SAAAksB,IAAA,IAAAzkB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAIzBjiB,EAAA2kB,UAAiB,OAQjB3kB,EAAA2J,eAAyB,EACzB3J,EAAA4kB,MAAaC,EAAAA,YACb7kB,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAmlB,cAAwB,EACxBnlB,EAAAgQ,iBAA2B,EAM1BhQ,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAkB9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAKrB1hB,EAAAolB,eAAyB,GAKzBplB,EAAAqlB,gBAA0B,KAsR5B,OAzVwC/uB,EAAAmuB,EAAA7hB,GAqEtC6hB,EAAA/tB,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGnBzrB,KAAKmvB,WACPnvB,KAAKgQ,KAAKzI,QAAUvH,KAAK4uB,eAAiB5uB,KAAK6R,OAAO,GAAK7R,KAAK6uB,iBAGlE7uB,KAAK8mB,QAAU9mB,KAAK+mB,aAChB/mB,KAAKovB,iBACPpvB,KAAK8mB,QAAU9mB,KAAKovB,gBAGtBpvB,KAAKqvB,QAAUrvB,KAAKsvB,aACpBtvB,KAAKuvB,aAAevvB,KAAKwvB,kBAEzBxvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,OACrD1H,KAAKye,OAASze,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAKgQ,KAAKzI,QAErDvH,KAAK0vB,iBAEL1vB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,KAAK5rB,KAAK6R,OAAO,GAAE,IAElE7R,KAAK6vB,WAAa,OAAS5S,KAAKtI,WAChC3U,KAAK8vB,SAAW,QAAQ9vB,KAAK6vB,WAAU,KAGzC5B,EAAA/tB,UAAAwvB,eAAA,WACM1vB,KAAKmvB,WACPnvB,KAAK+vB,cAAgB/vB,KAAKgQ,KAAKtI,MAC/B1H,KAAKgwB,gBAAkBhwB,KAAK+mB,aAC5B/mB,KAAKiwB,eAAiBjwB,KAAKgnB,UAAUhnB,KAAKgwB,gBAAiBhwB,KAAK+vB,eAChE/vB,KAAKkwB,eAAiBlwB,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAK4uB,gBACxD5uB,KAAKmwB,kBAAoB,aAAanwB,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,MAI/Eoc,EAAA/tB,UAAA6mB,WAAA,WACE,IAAIM,EAASkG,GAAuBvtB,KAAK8P,SAEzC9P,KAAKyN,UAAYqgB,GAAazG,GAC9B,IAMItS,EACAzC,EAPAiD,EAAS,GAgCb,MA9BuB,WAAnBvV,KAAKyN,YACP4Z,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,OAKX,SAAnBnlB,KAAKyN,WAA2C,WAAnBzN,KAAKyN,YACpCsH,EAAM/U,KAAKowB,UAAYpwB,KAAKowB,UAAY/iB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAEpD/U,EAAMtS,KAAKqwB,UAAYrwB,KAAKqwB,UAAYhjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,KAG/B,SAAnBrnB,KAAKyN,WACP8H,EAAS,CAAC,IAAIlP,KAAK0O,GAAM,IAAI1O,KAAKiM,IAClCtS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAC/B,IAAMixB,EAAQD,EAAEE,UACVC,EAAQnxB,EAAEkxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnBxwB,KAAKyN,WACd8H,EAAS,CAACR,EAAKzC,GAEftS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAAM,OAAAgxB,EAAIhxB,OAE3CgW,EAAS8R,EACTrnB,KAAK0lB,KAAO2B,GAGP9R,GAGT0Y,EAAA/tB,UAAAovB,WAAA,uBACQ/Z,EAAS,OAEf,IAAsB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAnW,OAAA,EAAA1P,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEyC,QACrBwT,EAAOnT,KAAK9C,EAAEyC,4MAKpB,IAAMslB,EAAM/kB,EAAOiT,GAYnB,OAXKvV,KAAK2wB,WACRtJ,EAAOjlB,KAAK,GAES,SAAnBpC,KAAKmuB,WACP9G,EAAOjlB,KAAKpC,KAAKmuB,WAOZ,CAJKnuB,KAAK4wB,UAAY5wB,KAAK4wB,UAAYvjB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAE9CrnB,KAAK6wB,UAAY7wB,KAAK6wB,UAAYxjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,MAK5D4G,EAAA/tB,UAAAsvB,gBAAA,WACE,OAAOxvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjCyd,EAAA/tB,UAAA8mB,UAAA,SAAUzR,EAAQ7N,GAChB,IAAIsM,EAYJ,MAVuB,SAAnBhU,KAAKyN,UACPuG,EAAQyT,EAAAA,YACoB,WAAnBznB,KAAKyN,UACduG,EAAQ0T,EAAAA,cACoB,YAAnB1nB,KAAKyN,YACduG,EAAQ2T,EAAAA,aAAazR,QAAQ,KAG/BlC,EAAM2K,MAAM,CAAC,EAAGjX,IAAQ6N,OAAOA,GAExBvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cia,EAAA/tB,UAAAuvB,UAAA,SAAUla,EAAQhO,GAChB,IAAMyM,EAAQ0T,EAAAA,cACX/I,MAAM,CAACpX,EAAQ,IACfgO,OAAOA,GACV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cia,EAAA/tB,UAAA4tB,aAAA,SAAazG,WACP0J,GAAO,EACPC,GAAM,MACV,IAAoB,IAAAC,EAAAxvB,EAAA4lB,GAAM6J,EAAAD,EAAAnvB,QAAAovB,EAAAlvB,KAAAkvB,EAAAD,EAAAnvB,OAAE,CAAvB,IAAMC,EAAKmvB,EAAAnvB,MACT/B,KAAKmxB,OAAOpvB,KACfgvB,GAAO,GAEY,iBAAVhvB,IACTivB,GAAM,qGAIV,OAAID,EACK,OAGLC,EACK,SAGF,WAGT/C,EAAA/tB,UAAAixB,OAAA,SAAOpvB,GACL,OAAIA,aAAiBsE,MAOvB4nB,EAAA/tB,UAAAkxB,aAAA,SAAa7b,GACXvV,KAAKovB,eAAiB7Z,EACtBvV,KAAK8mB,QAAU9mB,KAAKovB,eACpBpvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,QAGvDumB,EAAA/tB,UAAAmxB,sBAAA,SAAsBrgB,GACpBhR,KAAKsxB,gBAAkBtgB,EAAKjP,MAC5B/B,KAAKuxB,iBAIPtD,EAAA/tB,UAAAsxB,YAAA,WACExxB,KAAKsxB,gBAAkB,KACvBtxB,KAAKuxB,iBAGPtD,EAAA/tB,UAAAkf,QAAA,SAAQvO,EAAMH,GACRA,IACFG,EAAKH,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBod,EAAA/tB,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdyd,EAAA/tB,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKuvB,aAELvvB,KAAKqvB,QAGhBrvB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EgC,EAAA/tB,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAUjB,MARuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKuvB,aACnBkC,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKqvB,QACnBoC,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAErByd,GAGTxD,EAAA/tB,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPmhB,EAAA/tB,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPmhB,EAAA/tB,UAAA0xB,WAAA,SAAW5gB,GACGhR,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,UAEvC,IAIX/B,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlD0O,EAAA/tB,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,SAGlD/B,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpD0O,EAAA/tB,UAAAqxB,cAAA,mBACEvxB,KAAKuf,cAAajd,EAAOtC,KAAKuf,mBAC9B,IAAoB,IAAA9I,EAAAhV,EAAAzB,KAAKuf,eAAarO,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAnC,IAAMwd,EAAKpO,EAAAnP,MACd/B,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOud,EAAOuS,QAAS,uGAEhD7xB,KAAKuf,cAAgB,IAtVdze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DACyBjxB,EAAA,CAAtCixB,EAAAA,aAAa,sEA2NdjxB,EAAA,CADC0J,EAAAA,aAAa,+CAjQHyjB,EAAkBntB,EAAA,CAzI9B2J,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAU,05IAmIViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBmjB,IAA2B/e,kBCExC,SAAA8iB,IAAA,IAAAxoB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QASzBjiB,EAAA2J,eAAyB,EACzB3J,EAAA4kB,MAAaC,EAAAA,YACb7kB,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAmlB,cAAwB,EACxBnlB,EAAAgQ,iBAA2B,EAE1BhQ,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAiB9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IAGtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAKrB1hB,EAAAolB,eAAyB,GAKzBplB,EAAAqlB,gBAA0B,KAiR5B,OA7UkD/uB,EAAAkyB,EAAA5lB,GA8DhD4lB,EAAA9xB,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGnBzrB,KAAKmvB,WACPnvB,KAAKgQ,KAAKzI,QAAUvH,KAAK4uB,eAAiB5uB,KAAK6R,OAAO,GAAK7R,KAAK6uB,iBAGlE7uB,KAAK8mB,QAAU9mB,KAAK+mB,aAChB/mB,KAAKovB,iBACPpvB,KAAK8mB,QAAU9mB,KAAKovB,gBAGtBpvB,KAAKqvB,QAAUrvB,KAAKsvB,aACpBtvB,KAAKuvB,aAAevvB,KAAKwvB,kBAEzBxvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,OACrD1H,KAAKye,OAASze,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAKgQ,KAAKzI,QAErD,mBAAS/G,eACDsiB,EAAM8F,EAAKlD,KAAKllB,GAClBykB,EAAK,EAELoF,EAAQ,MACZ,IAAoB,IAAAnZ,GAAA+gB,OAAA,EAAAxwB,EAAAmnB,EAAK9Y,UAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,EAC1BxC,GADGylB,EAAK3T,EAAArP,OACE2O,OAAO8O,MAAK,SAAAxO,GAC1B,IAAIuf,EAAIvf,EAAKR,KACTjR,EAAIujB,EAKR,MAJuB,SAAnBtZ,EAAKiE,YACP8iB,EAAIA,EAAE2B,UACN3yB,EAAIA,EAAE2yB,WAED3B,IAAMhxB,QAGb8qB,GAAS/qB,EAAEyC,6GAIf,IAAoB,IAAAulB,GAAAnW,OAAA,EAAA1P,EAAAmnB,EAAK9Y,UAAOyX,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA7B,IAAMijB,EACLzlB,GAAAA,GADKylB,EAAKwC,EAAAxlB,OACA2O,OAAO8O,MAAK,SAAAxO,GACxB,IAAIuf,EAAIvf,EAAKR,KACTjR,EAAIujB,EAKR,MAJuB,SAAnBtZ,EAAKiE,YACP8iB,EAAIA,EAAE2B,UACN3yB,EAAIA,EAAE2yB,WAED3B,IAAMhxB,OAIbD,EAAE2lB,GAAKA,EACP3lB,EAAEof,GAAKuG,EAAK3lB,EAAEyC,MACdkjB,GAAM3lB,EAAEyC,QAERzC,EAAI,CACFkR,KAAMsS,EACN/gB,MAAO,EACPkjB,GAAEA,EACFvG,GAAIuG,GAENF,EAAMrU,OAAOtO,KAAK9C,IAGhB+qB,EAAQ,GACV/qB,EAAE2lB,GAAa,IAAP3lB,EAAE2lB,GAAYoF,EACtB/qB,EAAEof,GAAa,IAAPpf,EAAEof,GAAY2L,IAEtB/qB,EAAE2lB,GAAK,EACP3lB,EAAEof,GAAK,8GAlDJle,EAAI,EAAGA,EAAIR,KAAK0lB,KAAK/kB,OAAQH,MAA7BA,GAuDTR,KAAK0vB,iBAEL1vB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,IAEnE7R,KAAK6vB,WAAa,OAAS5S,KAAKtI,WAChC3U,KAAK8vB,SAAW,QAAQ9vB,KAAK6vB,WAAU,KAGzCmC,EAAA9xB,UAAAwvB,eAAA,WACM1vB,KAAKmvB,WACPnvB,KAAK+vB,cAAgB/vB,KAAKgQ,KAAKtI,MAC/B1H,KAAKgwB,gBAAkBhwB,KAAK+mB,aAC5B/mB,KAAKiwB,eAAiBjwB,KAAKgnB,UAAUhnB,KAAKgwB,gBAAiBhwB,KAAK+vB,eAChE/vB,KAAKkwB,eAAiBlwB,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAK4uB,gBACxD5uB,KAAKmwB,kBAAoB,aAAanwB,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,MAI/EmgB,EAAA9xB,UAAA6mB,WAAA,WACE,IAAIM,EAASkG,GAAuBvtB,KAAK8P,SAEzC9P,KAAKyN,UAAYqgB,GAAazG,GAC9B,IAAI9R,EAAS,GAEb,GAAuB,SAAnBvV,KAAKyN,UAAsB,CAC7B,IAAMsH,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAClB/U,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,IACxB9R,EAAS,CAAC,IAAIlP,KAAK0O,GAAM,IAAI1O,KAAKiM,IAClCtS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAC/B,IAAMixB,EAAQD,EAAEE,UACVC,EAAQnxB,EAAEkxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,UAEJ,GAAuB,WAAnBxwB,KAAKyN,UAAwB,CACtC4Z,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,MAGhC5P,EAAS,CAFHR,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAClB/U,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,KAGxBrnB,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAAM,OAAAgxB,EAAIhxB,UAE3CgW,EAAS8R,EACTrnB,KAAK0lB,KAAO2B,EAGd,OAAO9R,GAGTyc,EAAA9xB,UAAAovB,WAAA,WACE,MAAO,CAAC,EAAG,MAGb0C,EAAA9xB,UAAAsvB,gBAAA,WACE,OAAOxvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjCwhB,EAAA9xB,UAAA8mB,UAAA,SAAUzR,EAAQ7N,GAChB,IAAIsM,EAYJ,MAVuB,SAAnBhU,KAAKyN,UACPuG,EAAQyT,EAAAA,YACoB,WAAnBznB,KAAKyN,UACduG,EAAQ0T,EAAAA,cACoB,YAAnB1nB,KAAKyN,YACduG,EAAQ2T,EAAAA,aAAazR,QAAQ,KAG/BlC,EAAM2K,MAAM,CAAC,EAAGjX,IAAQ6N,OAAOA,GAExBvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cge,EAAA9xB,UAAAuvB,UAAA,SAAUla,EAAQhO,GAChB,IAAMyM,EAAQ0T,EAAAA,cACX/I,MAAM,CAACpX,EAAQ,IACfgO,OAAOA,GACV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cge,EAAA9xB,UAAAkxB,aAAA,SAAa7b,GACXvV,KAAKovB,eAAiB7Z,EACtBvV,KAAK8mB,QAAU9mB,KAAKovB,eACpBpvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,QAGvDsqB,EAAA9xB,UAAAmxB,sBAAA,SAAsBrgB,GACpBhR,KAAKsxB,gBAAkBtgB,EAAKjP,MAC5B/B,KAAKuxB,iBAIPS,EAAA9xB,UAAAsxB,YAAA,WACExxB,KAAKsxB,gBAAkB,KACvBtxB,KAAKuxB,iBAGPS,EAAA9xB,UAAAkf,QAAA,SAAQvO,EAAMH,GACRA,IACFG,EAAKH,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBmhB,EAAA9xB,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdwhB,EAAA9xB,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKuvB,aAELvvB,KAAKqvB,QAGhBrvB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3E+F,EAAA9xB,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAUjB,MARuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKuvB,aACnBkC,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKqvB,QACnBoC,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAErByd,GAGTO,EAAA9xB,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPklB,EAAA9xB,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPklB,EAAA9xB,UAAA0xB,WAAA,SAAW5gB,GACGhR,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,UAEvC,IAIX/B,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlDyS,EAAA9xB,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,SAGlD/B,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpDyS,EAAA9xB,UAAAqxB,cAAA,mBACEvxB,KAAKuf,cAAajd,EAAOtC,KAAKuf,mBAC9B,IAAoB,IAAA9I,EAAAhV,EAAAzB,KAAKuf,eAAarO,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAnC,IAAMwd,EAAKpO,EAAAnP,MACd/B,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOud,EAAOuS,QAAS,uGAEhD7xB,KAAKuf,cAAgB,IA1Udze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DACyBjxB,EAAA,CAAtCixB,EAAAA,aAAa,sEAsNdjxB,EAAA,CADC0J,EAAAA,aAAa,+CArPHwnB,EAA4BlxB,EAAA,CA3IxC2J,EAAAA,UAAU,CACTC,SAAU,mCACVC,SAAU,q9IAqIViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBknB,IAAqC9iB,kBCDlD,SAAAijB,IAAA,IAAA3oB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QASzBjiB,EAAA2J,eAAyB,EACzB3J,EAAA4kB,MAAaC,EAAAA,YACb7kB,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAmlB,cAAwB,EACxBnlB,EAAAgQ,iBAA2B,EAM1BhQ,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAiB9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAKrB1hB,EAAAolB,eAAyB,GAKzBplB,EAAAqlB,gBAA0B,KA0R5B,OAzV+C/uB,EAAAqyB,EAAA/lB,GAiE7C+lB,EAAAjyB,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGnBzrB,KAAKmvB,WACPnvB,KAAKgQ,KAAKzI,QAAUvH,KAAK4uB,eAAiB5uB,KAAK6R,OAAO,GAAK7R,KAAK6uB,iBAGlE7uB,KAAK8mB,QAAU9mB,KAAK+mB,aAChB/mB,KAAKovB,iBACPpvB,KAAK8mB,QAAU9mB,KAAKovB,gBAGtBpvB,KAAKqvB,QAAUrvB,KAAKsvB,aACpBtvB,KAAKuvB,aAAevvB,KAAKwvB,kBAEzBxvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,OACrD1H,KAAKye,OAASze,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAKgQ,KAAKzI,QAErD,mBAAS/G,WACDsiB,EAAM8F,EAAKlD,KAAKllB,GAClBykB,EAAK,MACT,IAAoB,IAAAxO,GAAAwb,OAAA,EAAAxwB,EAAAmnB,EAAK9Y,UAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACVzC,EAAIylB,EAAMrU,OAAO8O,MAAK,SAAAxO,GACxB,IAAIuf,EAAIvf,EAAKR,KACTjR,EAAIujB,EAKR,MAJuB,SAAnBtZ,EAAKiE,YACP8iB,EAAIA,EAAE2B,UACN3yB,EAAIA,EAAE2yB,WAED3B,IAAMhxB,KAGXD,GACFA,EAAE2lB,GAAKA,EACP3lB,EAAEof,GAAKuG,EAAK3lB,EAAEyC,MACdkjB,GAAM3lB,EAAEyC,QAERzC,EAAI,CACFkR,KAAMsS,EACN/gB,MAAO,EACPkjB,GAAEA,EACFvG,GAAIuG,GAENF,EAAMrU,OAAOtO,KAAK9C,+GAzBfkB,EAAI,EAAGA,EAAIR,KAAK0lB,KAAK/kB,OAAQH,MAA7BA,GA8BTR,KAAK0vB,iBAEL1vB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,IAEnE7R,KAAK6vB,WAAa,OAAS5S,KAAKtI,WAChC3U,KAAK8vB,SAAW,QAAQ9vB,KAAK6vB,WAAU,KAGzCsC,EAAAjyB,UAAAwvB,eAAA,WACM1vB,KAAKmvB,WACPnvB,KAAK+vB,cAAgB/vB,KAAKgQ,KAAKtI,MAC/B1H,KAAKgwB,gBAAkBhwB,KAAK+mB,aAC5B/mB,KAAKiwB,eAAiBjwB,KAAKgnB,UAAUhnB,KAAKgwB,gBAAiBhwB,KAAK+vB,eAChE/vB,KAAKkwB,eAAiBlwB,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAK4uB,gBACxD5uB,KAAKmwB,kBAAoB,aAAanwB,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,MAI/EsgB,EAAAjyB,UAAA6mB,WAAA,WACE,IAAIM,EAASkG,GAAuBvtB,KAAK8P,SAEzC9P,KAAKyN,UAAYqgB,GAAazG,GAC9B,IAMItS,EACAzC,EAPAiD,EAAS,GAgCb,MA9BuB,WAAnBvV,KAAKyN,YACP4Z,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,OAKX,SAAnBnlB,KAAKyN,WAA2C,WAAnBzN,KAAKyN,YACpCsH,EAAM/U,KAAKowB,UAAYpwB,KAAKowB,UAAY/iB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAEpD/U,EAAMtS,KAAKqwB,UAAYrwB,KAAKqwB,UAAYhjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,KAG/B,SAAnBrnB,KAAKyN,WACP8H,EAAS,CAAC,IAAIlP,KAAK0O,GAAM,IAAI1O,KAAKiM,IAClCtS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAC/B,IAAMixB,EAAQD,EAAEE,UACVC,EAAQnxB,EAAEkxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnBxwB,KAAKyN,WACd8H,EAAS,CAACR,EAAKzC,GAEftS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAAM,OAAAgxB,EAAIhxB,OAE3CgW,EAAS8R,EACTrnB,KAAK0lB,KAAO2B,GAGP9R,GAGT4c,EAAAjyB,UAAAovB,WAAA,WAGE,IAHF,IAAA9lB,EAAAxJ,KACQuV,EAAS,cAEN/U,WACDsiB,EAAMsP,EAAK1M,KAAKllB,GAClB4pB,EAAM,MACV,IAAoB,IAAA3T,GAAAtF,OAAA,EAAA1P,EAAA2wB,EAAKtiB,UAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IACGxC,EADQ4R,EAAAnP,MACE2O,OAAO8O,MAAK,SAAAxO,GAC1B,IAAIuf,EAAIvf,EAAKR,KACTjR,EAAIujB,EAKR,MAJuB,SAAnBtZ,EAAKiE,YACP8iB,EAAIA,EAAE2B,UACN3yB,EAAIA,EAAE2yB,WAED3B,IAAMhxB,KAGXD,IACF8qB,GAAO9qB,EAAEyC,yGAIbwT,EAAOnT,KAAKgoB,WAnBL5pB,EAAI,EAAGA,EAAIR,KAAK0lB,KAAK/kB,OAAQH,MAA7BA,GAyBT,MAAO,CAHKR,KAAK4wB,UAAY5wB,KAAK4wB,UAAYvjB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,IAEjDvV,KAAK6wB,UAAY7wB,KAAK6wB,UAAYxjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQiT,MAI5D4c,EAAAjyB,UAAAsvB,gBAAA,WACE,OAAOxvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjC2hB,EAAAjyB,UAAA8mB,UAAA,SAAUzR,EAAQ7N,GAChB,IAAIsM,EAYJ,MAVuB,SAAnBhU,KAAKyN,UACPuG,EAAQyT,EAAAA,YACoB,WAAnBznB,KAAKyN,UACduG,EAAQ0T,EAAAA,cACoB,YAAnB1nB,KAAKyN,YACduG,EAAQ2T,EAAAA,aAAazR,QAAQ,KAG/BlC,EAAM2K,MAAM,CAAC,EAAGjX,IAAQ6N,OAAOA,GAExBvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cme,EAAAjyB,UAAAuvB,UAAA,SAAUla,EAAQhO,GAChB,IAAMyM,EAAQ0T,EAAAA,cACX/I,MAAM,CAACpX,EAAQ,IACfgO,OAAOA,GACV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cme,EAAAjyB,UAAAkxB,aAAA,SAAa7b,GACXvV,KAAKovB,eAAiB7Z,EACtBvV,KAAK8mB,QAAU9mB,KAAKovB,eACpBpvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,QAGvDyqB,EAAAjyB,UAAAmxB,sBAAA,SAAsBrgB,GACpBhR,KAAKsxB,gBAAkBtgB,EAAKjP,MAC5B/B,KAAKuxB,iBAIPY,EAAAjyB,UAAAsxB,YAAA,WACExxB,KAAKsxB,gBAAkB,KACvBtxB,KAAKuxB,iBAGPY,EAAAjyB,UAAAkf,QAAA,SAAQvO,EAAMH,GACRA,IACFG,EAAKH,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBshB,EAAAjyB,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGd2hB,EAAAjyB,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKuvB,aAELvvB,KAAKqvB,QAGhBrvB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EkG,EAAAjyB,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAUjB,MARuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKuvB,aACnBkC,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKqvB,QACnBoC,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAErByd,GAGTU,EAAAjyB,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPqlB,EAAAjyB,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPqlB,EAAAjyB,UAAA0xB,WAAA,SAAW5gB,GACGhR,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,UAEvC,IAIX/B,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlD4S,EAAAjyB,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,SAGlD/B,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpD4S,EAAAjyB,UAAAqxB,cAAA,mBACEvxB,KAAKuf,cAAajd,EAAOtC,KAAKuf,mBAC9B,IAAoB,IAAA9I,EAAAhV,EAAAzB,KAAKuf,eAAarO,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAnC,IAAMwd,EAAKpO,EAAAnP,MACd/B,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOud,EAAOuS,QAAS,uGAEhD7xB,KAAKuf,cAAgB,IAtVdze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DACyBjxB,EAAA,CAAtCixB,EAAAA,aAAa,sEA8NdjxB,EAAA,CADC0J,EAAAA,aAAa,+CAjQH2nB,EAAyBrxB,EAAA,CA1IrC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,07IAoIViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBqnB,IAAkCjjB,YC9J/BmjB,GAAWxhB,EAAMyhB,EAAUjJ,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCxY,EAAKyf,MAAK,SAACC,EAAGhxB,GACnB,MAAkB,QAAd8pB,EACKkH,EAAE+B,GAAY/yB,EAAE+yB,GAEhB/yB,EAAE+yB,GAAY/B,EAAE+B,MAK7B,SAAgBC,GAAa1hB,EAAMyhB,EAAUjJ,EAAmB9T,GAC9D,YAD2C,IAAA8T,IAAAA,EAAA,OACpCxY,EAAKyf,MAAK,SAACC,EAAGhxB,GACnB,IAAMizB,EAAOjC,EAAE+B,GACTG,EAAOlzB,EAAE+yB,GAETI,EAAOnd,EAAO3J,QAAQ4mB,GACtBG,EAAOpd,EAAO3J,QAAQ6mB,GAE5B,MAAkB,QAAdpJ,EACKqJ,EAAOC,EAEPA,EAAOD,KAKpB,SAAgBE,GAAW/hB,EAAMyhB,EAAUjJ,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCxY,EAAKyf,MAAK,SAACC,EAAGhxB,GACnB,IAAMixB,EAAQD,EAAE+B,GAAU7B,UACpBC,EAAQnxB,EAAE+yB,GAAU7B,UAE1B,MAAkB,QAAdpH,EACEmH,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,EAEHA,EAAQE,GAAe,EACvBA,EAAQF,EAAc,EACnB,SCjCDqC,iBC4BZ,SAAAC,IAIW9yB,KAAAmuB,UAAiB,OAGjBnuB,KAAA+yB,SAAmB,EACnB/yB,KAAAgzB,YAAsB,EAItBhzB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAmGzB,OA1FEqmB,EAAA5yB,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPgmB,EAAA5yB,UAAA4M,OAAA,WAAA,IAGMmmB,EACAC,EAJN1pB,EAAAxJ,KACEA,KAAKmzB,iBAKL,IAAMC,EAAY,SAAA9zB,GAChB,IAAMiR,EAAQjR,EAAEkR,KAChB,OAAOhH,EAAK6U,OAAO9N,IAGjBvQ,KAAK+yB,SAAW/yB,KAAKgzB,YACvBC,EAAcI,EAAAA,OACXjhB,EAAEghB,GACFE,IAAG,SAACh0B,EAAGkB,GAAM,OAAAgJ,EAAKiV,OAAOnf,EAAE2lB,OAC3BtN,IAAG,SAACrY,EAAGkB,GAAM,OAAAgJ,EAAKiV,OAAOnf,EAAEof,OAE9BwU,EAAeG,EAAAA,OACZjhB,EAAEghB,GACFE,IAAG,SAAAh0B,GAAK,OAAAkK,EAAKiV,OAAOE,QAAQ,MAC5BhH,IAAG,SAAArY,GAAK,OAAAkK,EAAKiV,OAAOE,QAAQ,QAE/BsU,EAAcI,EAAAA,OACXjhB,EAAEghB,GACFE,IAAG,WAAM,MAAoB,SAAnB9pB,EAAK2kB,UAAuB3kB,EAAKiV,OAAOE,QAAQ,GAAKnV,EAAKiV,OAAOjV,EAAK2kB,cAChFxW,IAAG,SAAArY,GAAK,OAAAkK,EAAKiV,OAAOnf,EAAEyC,UAEzBmxB,EAAeG,EAAAA,OACZjhB,EAAEghB,GACFE,IAAG,SAAAh0B,GAAK,MAAoB,SAAnBkK,EAAK2kB,UAAuB3kB,EAAKiV,OAAOE,QAAQ,GAAKnV,EAAKiV,OAAOjV,EAAK2kB,cAC/ExW,IAAG,SAAArY,GAAK,MAAoB,SAAnBkK,EAAK2kB,UAAuB3kB,EAAKiV,OAAOE,QAAQ,GAAKnV,EAAKiV,OAAOjV,EAAK2kB,eAGpF8E,EAAY7E,MAAMpuB,KAAKouB,OACvB8E,EAAa9E,MAAMpuB,KAAKouB,OAExBpuB,KAAKkO,QAAU,GAEf,IAAI2C,EAAO7Q,KAAK6Q,KAAKH,OAEnBG,EADqB,WAAnB7Q,KAAKyN,UACA4kB,GAAWxhB,EAAM,QACI,SAAnB7Q,KAAKyN,UACPmlB,GAAW/hB,EAAM,QAEjB0hB,GAAa1hB,EAAM,OAAQ,MAAO7Q,KAAKqe,OAAO9I,UAGvDvV,KAAKyhB,KAAOwR,EAAYpiB,GACxB7Q,KAAKshB,aAAe4R,EAAariB,IAGnCiiB,EAAA5yB,UAAAizB,eAAA,WACE,GAA8B,WAA1BnzB,KAAK4e,OAAOnR,UAEd,GADAzN,KAAKghB,aAAc,EACfhhB,KAAK+yB,SAAW/yB,KAAKgzB,WAAY,CACnC,IAAMO,EAAWvzB,KAAK6Q,KAAKH,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAE2lB,MACvCuO,EAAWxzB,KAAK6Q,KAAKH,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEof,MACvCpM,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQkxB,IAClBze,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQixB,IACxBvzB,KAAKgf,cAAgBhf,KAAK4e,OAAOkO,uBAAuBxa,EAAKyC,OACxD,CACL,IAAMsS,EAASrnB,KAAK6Q,KAAKH,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SACrCuQ,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,IACxBrnB,KAAKgf,cAAgBhf,KAAK4e,OAAOkO,uBAAuBxa,QAG1DtS,KAAKghB,aAAc,EACnBhhB,KAAKgf,mBAAgBhb,GAIzB8uB,EAAA5yB,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SAK5BsiB,EAAA5yB,UAAAuzB,WAAA,SAAWnU,GACT,SAAKtf,KAAKuf,eAA+C,IAA9Bvf,KAAKuf,cAAc5e,cAI9BqD,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SA5GnB1P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAdUolB,EAAmBhyB,EAAA,CApB/B2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,gaAgBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BglB,oBCrBb,SAAAY,KAA8B,OAAjBA,EAAe5yB,EAAA,CAL3B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACkV,GAAoB+D,GAA8BG,GAA2BW,IAC5F9Z,QAAS,CAACiV,GAAoB+D,GAA8BG,GAA2BW,OAE5EY,oBCyDX,SAAAC,EAAYnwB,GAtBHxD,KAAA4zB,YAAsB,EACtB5zB,KAAA8gB,UAAoB,EACpB9gB,KAAAmS,OAAS,EACTnS,KAAAqf,UAAoB,EAEpBrf,KAAAuM,YAAsB,EAEtBvM,KAAA6zB,eAAyB,EAExB7zB,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aAQ3BzM,KAAAghB,aAAuB,EACvBhhB,KAAA8zB,SAAmB,EAGjB9zB,KAAKwD,QAAUA,EAAQC,cAkK3B,OA/JEkwB,EAAAzzB,UAAA0M,YAAA,SAAYC,GACNA,EAAQ+mB,YACV5zB,KAAKihB,gBAEPjhB,KAAK8M,UAGP6mB,EAAAzzB,UAAA4M,OAAA,WACE9M,KAAK0d,WAAa,OAAST,KAAKtI,WAChC3U,KAAK2d,aAAe,QAAQ3d,KAAK0d,WAAU,IAEvC1d,KAAK8gB,UAAY9gB,KAAKkhB,OACxBlhB,KAAKgf,cAAgBhf,KAAKmhB,cAC1BnhB,KAAKghB,aAAc,GAEnBhhB,KAAKghB,aAAc,EAGrBhhB,KAAKohB,eACLphB,KAAK+zB,kBAGPJ,EAAAzzB,UAAA+gB,cAAA,WACEjhB,KAAKyhB,KAAOzhB,KAAKg0B,kBACjBttB,WAAW1G,KAAK8M,OAAOvD,KAAKvJ,MAAO,MAGrC2zB,EAAAzzB,UAAAkhB,aAAA,WACE,IAAMG,EAAOhS,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,QACnCkS,EAAOzhB,KAAKi0B,UACdj0B,KAAKuM,WACPgV,EACGvT,aACApH,SAAS,KACT4a,KAAK,IAAKC,GAEbF,EAAKC,KAAK,IAAKC,IAInBkS,EAAAzzB,UAAAihB,YAAA,WACE,OAAInhB,KAAKkhB,MACAlhB,KAAKkhB,MAGP,CACL,CACE/O,OAAQ,EACRoM,MAAOve,KAAKgW,KACZ9H,QAASlO,KAAKk0B,mBAEhB,CACE/hB,OAAQ,IACRoM,MAAOve,KAAKgW,KACZ9H,QAAS,KAKfylB,EAAAzzB,UAAA8zB,gBAAA,WACE,IAAKh0B,KAAKuM,WACR,OAAOvM,KAAKi0B,UAGd,IACIxS,EADA1C,EAAS/e,KAAKm0B,YAmBlB,OAhBIn0B,KAAK4zB,WACkB,aAArB5zB,KAAKugB,aACPxB,EAAS1R,KAAK0H,IAAI/U,KAAKuH,OAAQwX,GAC/B0C,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAIlS,KAAKuH,OAAQvH,KAAK0H,MAAO,EAAG,EAAG1H,KAAKo0B,QAC1C,eAArBp0B,KAAKugB,cACdxB,EAAS1R,KAAK0H,IAAI/U,KAAK0H,MAAOqX,GAC9B0C,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAG,EAAGlS,KAAKuH,OAAQ,EAAGvH,KAAKo0B,QAGpC,aAArBp0B,KAAKugB,YACPkB,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAIlS,KAAKuH,OAAQvH,KAAK0H,MAAO,EAAG,EAAG1H,KAAKo0B,OAC1C,eAArBp0B,KAAKugB,cACdkB,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAG,EAAGlS,KAAKuH,OAAQ,EAAGvH,KAAKo0B,QAIxD3S,GAGTkS,EAAAzzB,UAAA+zB,QAAA,WACE,IACIxS,EADA1C,EAAS/e,KAAKm0B,YAelB,OAZIn0B,KAAK4zB,WACkB,aAArB5zB,KAAKugB,aACPxB,EAAS1R,KAAK0H,IAAI/U,KAAKuH,OAAQwX,GAC/B0C,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAGlS,KAAK0H,MAAO1H,KAAKuH,OAAQwX,EAAQ/e,KAAKo0B,QAC3C,eAArBp0B,KAAKugB,cACdxB,EAAS1R,KAAK0H,IAAI/U,KAAK0H,MAAOqX,GAC9B0C,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAGlS,KAAK0H,MAAO1H,KAAKuH,OAAQwX,EAAQ/e,KAAKo0B,QAG3E3S,EAAOnL,EAAYtW,KAAKoS,EAAGpS,KAAKkS,EAAGlS,KAAK0H,MAAO1H,KAAKuH,OAAQwX,EAAQ/e,KAAKo0B,OAGpE3S,GAGTkS,EAAAzzB,UAAAi0B,UAAA,WACE,IAAIpV,EAAS,EAMb,OAJI/e,KAAK4zB,YAAc5zB,KAAKuH,OAAS,GAAKvH,KAAK0H,MAAQ,IACrDqX,EAAS1R,KAAKC,MAAMD,KAAK0H,IAAI,EAAG/U,KAAKuH,OAAS,EAAGvH,KAAK0H,MAAQ,KAGzDqX,GAGT4U,EAAAzzB,UAAAg0B,gBAAA,WACE,OAAIl0B,KAAK4zB,WACA,GAEA,IAIXp0B,OAAAgC,eAAImyB,EAAAzzB,UAAA,QAAK,KAAT,WACE,IAAIk0B,EAAQ,EAAC,GAAO,GAAO,GAAO,GAgBlC,OAfIp0B,KAAK4zB,aACkB,aAArB5zB,KAAKugB,YAEL6T,EADEp0B,KAAK6Q,KAAK9O,MAAQ,EACZ,EAAC,GAAM,GAAM,GAAO,GAEpB,EAAC,GAAO,GAAO,GAAM,GAED,eAArB/B,KAAKugB,cAEZ6T,EADEp0B,KAAK6Q,KAAK9O,MAAQ,EACZ,EAAC,GAAO,GAAM,GAAO,GAErB,EAAC,GAAM,GAAO,GAAM,KAI3BqyB,mCAITT,EAAAzzB,UAAA6a,aAAA,WACE/a,KAAKsd,SAAS3O,KAAK3O,KAAK6Q,OAI1B8iB,EAAAzzB,UAAA+a,aAAA,WACEjb,KAAKud,WAAW5O,KAAK3O,KAAK6Q,OAGpB8iB,EAAAzzB,UAAA6zB,eAAR,WACE/zB,KAAK8zB,QACH9zB,KAAK6zB,gBACkB,aAArB7zB,KAAKugB,aAA8C,IAAhBvgB,KAAKuH,QAClB,eAArBvH,KAAKugB,aAA+C,IAAfvgB,KAAK0H,iDAjK5ByC,EAAAA,cA7BZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CA+JD5M,EAAA,CADC0J,EAAAA,aAAa,gDAMd1J,EAAA,CADC0J,EAAAA,aAAa,gDAtLHmpB,EAAY7yB,EAAA,CArBxB2J,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAU,ifAiBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B6lB,qBCgDb,SAAAU,IAAA,IAAA7qB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EACxBnlB,EAAAoqB,YAAsB,EAGtBpqB,EAAA+qB,eAAyB,EAEzB/qB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAW9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAgrB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,KAmKpD,OApN4C50B,EAAAu0B,EAAAjoB,GAmD1CioB,EAAAn0B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKu0B,gBACRv0B,KAAKw0B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD10B,KAAK6R,OAAS,CAAC,GAAI,GAAK7R,KAAKw0B,kBAAkBE,SAAU,GAAI,GAAK10B,KAAKw0B,kBAAkBC,UAEzFz0B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAELrQ,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,KAGrEwiB,EAAAn0B,UAAA8mB,UAAA,WACEhnB,KAAK8mB,QAAU9mB,KAAK+mB,aAEpB,IAAM/S,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG3e,KAAKgQ,KAAKtI,QACpB6N,OAAOvV,KAAK8mB,SAEf,OAAO9mB,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CqgB,EAAAn0B,UAAAuvB,UAAA,WACEzvB,KAAKqvB,QAAUrvB,KAAKsvB,aACpB,IAAM/mB,EAAUvI,KAAKqvB,QAAQ1uB,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKs0B,WAAa,GAE5E,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKzI,SACzB6Y,aAAa7X,GACbgN,OAAOvV,KAAKqvB,UAGjBgF,EAAAn0B,UAAA6mB,WAAA,WACE,IAAMM,EAASrnB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAIvC,MAAO,CAHK/B,KAAKowB,UAAY/iB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKowB,WAAc/I,IAAUha,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAM+kB,IAEtErnB,KAAKqwB,UAAYhjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKqwB,WAAchJ,IAAUha,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAK,GAAM+kB,MAIpFgN,EAAAn0B,UAAAovB,WAAA,WACE,OAAOtvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEiR,UAGjC8jB,EAAAn0B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBwjB,EAAAn0B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKqvB,QAELrvB,KAAK8mB,QAGhB9mB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EoI,EAAAn0B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKqvB,QACnBoC,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAK8mB,QACnB2K,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGT4C,EAAAn0B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPunB,EAAAn0B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPunB,EAAAn0B,UAAA00B,2BAAA,SAA2B9Y,GAA3B,IAAAtS,EAAAxJ,KACM8b,EAAM+Y,KAAKJ,SACbz0B,KAAKw0B,kBAAkBC,SAAWpnB,KAAKiF,IAAItS,KAAKw0B,kBAAkBC,SAAU3Y,EAAM+Y,KAAKntB,OAEvF1H,KAAKw0B,kBAAkBE,SAAWrnB,KAAKiF,IAAItS,KAAKw0B,kBAAkBE,SAAU5Y,EAAM+Y,KAAKntB,OAErFoU,EAAMgN,QAAU9oB,KAAK8P,QAAQnP,OAAS,GACxC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BunB,EAAAn0B,UAAA0xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAIfxQ,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,WAElE,IAIX1Q,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlD8U,EAAAn0B,UAAA4xB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAI3B,IAAM7E,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,UAG7E1Q,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAjN3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DApCHsC,EAAsBvzB,EAAA,CAvElC2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,4wEAiEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBupB,IAA+BnlB,kBC4B5C,SAAA6lB,IAAA,IAAAvrB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAwrB,aAAe,GACfxrB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EACxBnlB,EAAAoqB,YAAsB,EAEtBpqB,EAAA+qB,eAAyB,EAEzB/qB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAa9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAgrB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,KAyNpD,OA5Q8C50B,EAAAi1B,EAAA3oB,GAqD5C2oB,EAAA70B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKu0B,gBACRv0B,KAAKw0B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD10B,KAAK6R,OAAS,CAAC,GAAI,GAAK7R,KAAKw0B,kBAAkBE,SAAU,GAAI,GAAK10B,KAAKw0B,kBAAkBC,UAEzFz0B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAELrQ,KAAKi1B,YAAcj1B,KAAKk1B,iBACxBl1B,KAAKm1B,YAAcn1B,KAAKo1B,iBACxBp1B,KAAKq1B,aAAer1B,KAAKs1B,iBAEzBt1B,KAAKu1B,WAAav1B,KAAKw1B,gBACvBx1B,KAAKy1B,WAAaz1B,KAAK01B,gBACvB11B,KAAKysB,WAAazsB,KAAK21B,gBAEvB31B,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,KAGrEkjB,EAAA70B,UAAAs1B,cAAA,WACE,IAAMjtB,EAAUvI,KAAKi1B,YAAYt0B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKg1B,aAAe,GAElF,OAAOhI,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKzI,SACzB6Y,aAAa7X,GACbqtB,aAAartB,EAAU,GACvBgN,OAAOvV,KAAKi1B,cAGjBF,EAAA70B,UAAAw1B,cAAA,WACE,IAAMnuB,EAASvH,KAAKu1B,WAAW/gB,YACzBjM,EAAUvI,KAAKm1B,YAAYx0B,QAAU4G,EAASvH,KAAKs0B,WAAa,GAEtE,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAGptB,IACf6Y,aAAa7X,GACbgN,OAAOvV,KAAKm1B,cAGjBJ,EAAA70B,UAAAy1B,cAAA,WACE,IAAM3hB,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG3e,KAAKgQ,KAAKtI,QACpB6N,OAAOvV,KAAKq1B,cAEf,OAAOr1B,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5C+gB,EAAA70B,UAAAg1B,eAAA,mBACQ3f,EAAS,OAEf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMxU,QACzBgF,EAAOnT,KAAK2iB,EAAMxU,yGAItB,OAAOgF,GAGTwf,EAAA70B,UAAAk1B,eAAA,uBACQ7f,EAAS,OAEf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEiR,QACrBgF,EAAOnT,KAAK9C,EAAEiR,4MAKpB,OAAOgF,GAGTwf,EAAA70B,UAAAo1B,eAAA,uBACQ/f,EAAS,OAEf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAwO,OAAA,EAAAr0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEyC,QACrBwT,EAAOnT,KAAK9C,EAAEyC,4MAOpB,MAAO,CAFKsL,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,IACfvV,KAAKqwB,UAAYhjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKqwB,WAAc9a,IAAUlI,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,MAIpFwf,EAAA70B,UAAA61B,eAAA,SAAehR,GACb,MAAO,gBAAgB/kB,KAAKu1B,WAAWxQ,EAAMxU,OAAM,KAGrDwkB,EAAA70B,UAAAkf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKH,OAASqU,EAAMvU,MAGtBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBkkB,EAAA70B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdukB,EAAA70B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKm1B,YAELn1B,KAAKq1B,aAGhBr1B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3E8I,EAAA70B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKm1B,YACnB1D,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKq1B,aACnB5D,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGTsD,EAAA70B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPioB,EAAA70B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPioB,EAAA70B,UAAA00B,2BAAA,SAA2B9Y,EAAOka,GAAlC,IAAAxsB,EAAAxJ,KACM8b,EAAM+Y,KAAKJ,SACbz0B,KAAKw0B,kBAAkBC,SAAWpnB,KAAKiF,IAAItS,KAAKw0B,kBAAkBC,SAAU3Y,EAAM+Y,KAAKntB,OAEvF1H,KAAKw0B,kBAAkBE,SAAWrnB,KAAKiF,IAAItS,KAAKw0B,kBAAkBE,SAAU5Y,EAAM+Y,KAAKntB,OAErFsuB,IAAeh2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BioB,EAAA70B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlDwV,EAAA70B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAzQ3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DApCHgD,EAAwBj0B,EAAA,CAjGpC2J,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAU,u1FAgFViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,MAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,unDAKvC+iB,IAAiC7lB,kBCZ9C,SAAAgnB,IAAA,IAAA1sB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EACxBnlB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAY9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,IAgLvB,OA3NsDprB,EAAAo2B,EAAA9pB,GA8CpD8pB,EAAAh2B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAELrQ,KAAKi1B,YAAcj1B,KAAKk1B,iBACxBl1B,KAAKm1B,YAAcn1B,KAAKo1B,iBACxBp1B,KAAKm2B,YAAcn2B,KAAKs1B,iBAExBt1B,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,KAGrEqkB,EAAAh2B,UAAAg1B,eAAA,mBACQ3f,EAAS,OAEf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMxU,QACzBgF,EAAOnT,KAAK2iB,EAAMxU,yGAItB,OAAOgF,GAGT2gB,EAAAh2B,UAAAk1B,eAAA,uBACQ7f,EAAS,OAEf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEiR,QACrBgF,EAAOnT,KAAK9C,EAAEiR,4MAKpB,OAAOgF,GAGT2gB,EAAAh2B,UAAAo1B,eAAA,WACE,MAAO,CAAC,EAAG,MAGbY,EAAAh2B,UAAAuvB,UAAA,WACE,IAAMlnB,EAAUvI,KAAKi1B,YAAYt0B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKs0B,WAAa,GAEhF,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKzI,SACzB6Y,aAAa7X,GACbgN,OAAOvV,KAAKi1B,cAGjBiB,EAAAh2B,UAAA8mB,UAAA,WACE,IAAMhT,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG3e,KAAKgQ,KAAKtI,QACpB6N,OAAOvV,KAAKm2B,aACf,OAAOn2B,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CkiB,EAAAh2B,UAAA61B,eAAA,SAAehR,GACb,MAAO,gBAAgB/kB,KAAKye,OAAOsG,EAAMvU,MAAK,KAGhD0lB,EAAAh2B,UAAAkf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKH,OAASqU,EAAMvU,MAGtBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBqlB,EAAAh2B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGd0lB,EAAAh2B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKm1B,YAELn1B,KAAKm2B,YAGhBn2B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EiK,EAAAh2B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKm1B,YACnB1D,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKm2B,YACnB1E,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGTyE,EAAAh2B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPopB,EAAAh2B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPopB,EAAAh2B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlD2W,EAAAh2B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAxN3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DA/BHmE,EAAgCp1B,EAAA,CArF5C2J,EAAAA,UAAU,CACTC,SAAU,uCACVC,SAAU,81EAoEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,MAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,unDAKvCkkB,IAAyChnB,kBCItD,SAAAknB,IAAA,IAAA5sB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EAExBnlB,EAAA+qB,eAAyB,EAEzB/qB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAY9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAgrB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,KAuNpD,OAvQmD50B,EAAAs2B,EAAAhqB,GAkDjDgqB,EAAAl2B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKu0B,gBACRv0B,KAAKw0B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD10B,KAAK6R,OAAS,CAAC,GAAI,GAAK7R,KAAKw0B,kBAAkBE,SAAU,GAAI,GAAK10B,KAAKw0B,kBAAkBC,UAEzFz0B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAELrQ,KAAKi1B,YAAcj1B,KAAKk1B,iBACxBl1B,KAAKm1B,YAAcn1B,KAAKo1B,iBACxBp1B,KAAKm2B,YAAcn2B,KAAKs1B,iBAExBt1B,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,KAGrEukB,EAAAl2B,UAAAg1B,eAAA,mBACQ3f,EAAS,OAEf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMxU,QACzBgF,EAAOnT,KAAK2iB,EAAMxU,yGAItB,OAAOgF,GAGT6gB,EAAAl2B,UAAAk1B,eAAA,uBACQ7f,EAAS,OAEf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEiR,QACrBgF,EAAOnT,KAAK9C,EAAEiR,4MAKpB,OAAOgF,GAGT6gB,EAAAl2B,UAAAo1B,eAAA,uBACQ/f,EAAS,GACX8gB,EAAW,EACXC,EAAU,MACd,IAAoB,IAAAplB,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,MACVw0B,EAAc,EACdC,EAAa,MACjB,IAAgB,IAAAlP,GAAAwO,OAAA,EAAAr0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACNzC,EAAEyC,MAAQ,EACZw0B,GAAej3B,EAAEyC,MAEjBy0B,GAAcl3B,EAAEyC,MAElBs0B,EAAW/2B,EAAEyC,MAAQs0B,EAAW/2B,EAAEyC,MAAQs0B,EAC1CC,EAAUh3B,EAAEyC,MAAQu0B,EAAUh3B,EAAEyC,MAAQu0B,oGAE1C/gB,EAAOnT,KAAKm0B,GACZhhB,EAAOnT,KAAKo0B,qGAOd,OALAjhB,EAAOnT,KAAKi0B,GACZ9gB,EAAOnT,KAAKk0B,GAIL,CAFKjpB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,IACfvV,KAAKqwB,UAAYhjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKqwB,WAAc9a,IAAUlI,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQiT,MAIjF6gB,EAAAl2B,UAAAuvB,UAAA,WACE,IAAMlnB,EAAUvI,KAAKi1B,YAAYt0B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKs0B,WAAa,GAEhF,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKzI,SACzB6Y,aAAa7X,GACbgN,OAAOvV,KAAKi1B,cAGjBmB,EAAAl2B,UAAA8mB,UAAA,WACE,IAAMhT,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG3e,KAAKgQ,KAAKtI,QACpB6N,OAAOvV,KAAKm2B,aACf,OAAOn2B,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CoiB,EAAAl2B,UAAA61B,eAAA,SAAehR,GACb,MAAO,gBAAgB/kB,KAAKye,OAAOsG,EAAMvU,MAAK,KAGhD4lB,EAAAl2B,UAAAkf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKH,OAASqU,EAAMvU,MAGtBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBulB,EAAAl2B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGd4lB,EAAAl2B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKm1B,YAELn1B,KAAKm2B,YAGhBn2B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EmK,EAAAl2B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKm1B,YACnB1D,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKm2B,YACnB1E,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGT2E,EAAAl2B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPspB,EAAAl2B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPspB,EAAAl2B,UAAA00B,2BAAA,SAA2B9Y,EAAOka,GAAlC,IAAAxsB,EAAAxJ,KACM8b,EAAM+Y,KAAKJ,SACbz0B,KAAKw0B,kBAAkBC,SAAWpnB,KAAKiF,IAAItS,KAAKw0B,kBAAkBC,SAAU3Y,EAAM+Y,KAAKntB,OAEvF1H,KAAKw0B,kBAAkBE,SAAWrnB,KAAKiF,IAAItS,KAAKw0B,kBAAkBE,SAAU5Y,EAAM+Y,KAAKntB,OAErFsuB,IAAeh2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BspB,EAAAl2B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlD6W,EAAAl2B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBApQ3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAlCHqE,EAA6Bt1B,EAAA,CAzFzC2J,EAAAA,UAAU,CACTC,SAAU,oCACVC,SAAU,2lFAwEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,MAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,unDAKvCokB,IAAsClnB,kBCnBnD,SAAAunB,IAAA,IAAAjtB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EACxBnlB,EAAAoqB,YAAsB,EAGtBpqB,EAAA+qB,eAAyB,EAEzB/qB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAW9CjD,EAAAqI,OAAgB,CAAC,GAAI,GAAI,GAAI,IAC7BrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAktB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,KAwKrD,OAzN0C50B,EAAA22B,EAAArqB,GAmDxCqqB,EAAAv2B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKu0B,gBACRv0B,KAAK02B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD10B,KAAK6R,OAAS,CAAC,GAAK7R,KAAK02B,mBAAmBhC,SAAU,GAAI,GAAK10B,KAAK02B,mBAAmBjC,SAAU,IAEjGz0B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAEDrQ,KAAKu0B,gBACPv0B,KAAKgQ,KAAKzI,QAAUvH,KAAK02B,mBAAmBjC,UAE9Cz0B,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,OAAM5rB,KAAK6R,OAAO,GAAK7R,KAAK02B,mBAAmBjC,UAAQ,KAGxGgC,EAAAv2B,UAAA8mB,UAAA,WACEhnB,KAAK8mB,QAAU9mB,KAAK+mB,aACpB,IAAMxe,EAAUvI,KAAK8mB,QAAQnmB,QAAUX,KAAKgQ,KAAKtI,MAAQ1H,KAAKs0B,WAAa,GAC3E,OAAOtH,EAAAA,YACJrO,MAAM,CAAC,EAAG3e,KAAKgQ,KAAKtI,QACpB0Y,aAAa7X,GACbgN,OAAOvV,KAAK8mB,UAGjB2P,EAAAv2B,UAAAuvB,UAAA,WACEzvB,KAAKqvB,QAAUrvB,KAAKsvB,aACpB,IAAMtb,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC3e,KAAKgQ,KAAKzI,OAAQ,IACzBgO,OAAOvV,KAAKqvB,SACf,OAAOrvB,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CyiB,EAAAv2B,UAAA6mB,WAAA,WACE,OAAO/mB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEiR,UAGjCkmB,EAAAv2B,UAAAovB,WAAA,WACE,IAAMjI,EAASrnB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAEnCgT,EAAM/U,KAAK4wB,UAAYvjB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAKtC,KAAK4wB,WAAcvJ,IAAUha,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAM+kB,IAC5ErnB,KAAK22B,aAAe32B,KAAK22B,WAAWC,KAAKC,SAC3C9hB,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAKyS,GAAQ/U,KAAK22B,cAG9B,IAAIrkB,EAAMtS,KAAK6wB,UAAYxjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAK6wB,WAAcxJ,IAAUha,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAK,GAAM+kB,IAIhF,OAHIrnB,KAAK22B,aAAe32B,KAAK22B,WAAWC,KAAKC,SAC3CvkB,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKgQ,GAAQtS,KAAK22B,cAEvB,CAAC5hB,EAAKzC,IAGfmkB,EAAAv2B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB4lB,EAAAv2B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAK8mB,QAEL9mB,KAAKqvB,QAGhBrvB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EwK,EAAAv2B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAUjB,MARuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAK8mB,QACnB2K,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKqvB,QACnBoC,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAErByd,GAGTgF,EAAAv2B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGP2pB,EAAAv2B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGP2pB,EAAAv2B,UAAA42B,4BAAA,SAA4Bhb,GAA5B,IAAAtS,EAAAxJ,KACM8b,EAAM+Y,KAAKJ,SACbz0B,KAAK02B,mBAAmBjC,SAAWpnB,KAAKiF,IAAItS,KAAK02B,mBAAmBjC,SAAU3Y,EAAM+Y,KAAKttB,QAEzFvH,KAAK02B,mBAAmBhC,SAAWrnB,KAAKiF,IAAItS,KAAK02B,mBAAmBhC,SAAU5Y,EAAM+Y,KAAKttB,QAEvFuU,EAAMgN,QAAU9oB,KAAK8P,QAAQnP,OAAS,GACxC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1B2pB,EAAAv2B,UAAA0xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAIfxQ,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,WAElE,IAIX1Q,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlDkX,EAAAv2B,UAAA4xB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAI3B,IAAM7E,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,UAG7E1Q,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAtN3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DApCH0E,EAAoB31B,EAAA,CAvEhC2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,6wEAiEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtB2rB,IAA6BvnB,kBCuB1C,SAAA6nB,IAAA,IAAAvtB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAC3BhQ,EAAAiE,UAAY,UAEZjE,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAwrB,aAAe,GACfxrB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EACxBnlB,EAAAoqB,YAAsB,EAEtBpqB,EAAA+qB,eAAyB,EAEzB/qB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAa9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAktB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,KAuNrD,OA3Q4C50B,EAAAi3B,EAAA3qB,GAsD1C2qB,EAAA72B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKu0B,gBACRv0B,KAAK02B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD10B,KAAK6R,OAAS,CAAC,GAAK7R,KAAK02B,mBAAmBhC,SAAU,GAAI,GAAK10B,KAAK02B,mBAAmBjC,SAAU,IAEjGz0B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGnBzrB,KAAKu0B,gBACPv0B,KAAKgQ,KAAKzI,QAAUvH,KAAK02B,mBAAmBjC,UAG9Cz0B,KAAKqQ,cAELrQ,KAAKi1B,YAAcj1B,KAAKk1B,iBACxBl1B,KAAKm1B,YAAcn1B,KAAKo1B,iBACxBp1B,KAAKq1B,aAAer1B,KAAKs1B,iBAEzBt1B,KAAKu1B,WAAav1B,KAAKw1B,gBACvBx1B,KAAKy1B,WAAaz1B,KAAK01B,gBACvB11B,KAAKysB,WAAazsB,KAAK21B,gBAEvB31B,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAC1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,OAAM5rB,KAAK6R,OAAO,GAAK7R,KAAK02B,mBAAmBjC,UAAQ,KAGxGsC,EAAA72B,UAAA42B,4BAAA,SAA4Bhb,EAAOka,GAAnC,IAAAxsB,EAAAxJ,KACM8b,EAAM+Y,KAAKJ,SACbz0B,KAAK02B,mBAAmBjC,SAAWpnB,KAAKiF,IAAItS,KAAK02B,mBAAmBjC,SAAU3Y,EAAM+Y,KAAKttB,QAEzFvH,KAAK02B,mBAAmBhC,SAAWrnB,KAAKiF,IAAItS,KAAK02B,mBAAmBhC,SAAU5Y,EAAM+Y,KAAKttB,QAEvFyuB,IAAeh2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BiqB,EAAA72B,UAAAs1B,cAAA,WACE,IAAMjtB,EAAUvI,KAAKi1B,YAAYt0B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKg1B,aAAe,GAElF,OAAOhI,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKtI,QACzB0Y,aAAa7X,GACbqtB,aAAartB,EAAU,GACvBgN,OAAOvV,KAAKi1B,cAGjB8B,EAAA72B,UAAAw1B,cAAA,WACE,IAAMhuB,EAAQ1H,KAAKu1B,WAAW/gB,YACxBjM,EAAUvI,KAAKm1B,YAAYx0B,QAAU+G,EAAQ1H,KAAKs0B,WAAa,GACrE,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAGjtB,IACf0Y,aAAa7X,GACbgN,OAAOvV,KAAKm1B,cAGjB4B,EAAA72B,UAAAy1B,cAAA,WACE,IAAM3hB,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC3e,KAAKgQ,KAAKzI,OAAQ,IACzBgO,OAAOvV,KAAKq1B,cACf,OAAOr1B,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5C+iB,EAAA72B,UAAAg1B,eAAA,mBACQ3f,EAAS,OACf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMxU,QACzBgF,EAAOnT,KAAK2iB,EAAMxU,yGAItB,OAAOgF,GAGTwhB,EAAA72B,UAAAk1B,eAAA,uBACQ7f,EAAS,OACf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEiR,QACrBgF,EAAOnT,KAAK9C,EAAEiR,4MAKpB,OAAOgF,GAGTwhB,EAAA72B,UAAAo1B,eAAA,uBACQ/f,EAAS,OACf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAwO,OAAA,EAAAr0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEyC,QACrBwT,EAAOnT,KAAK9C,EAAEyC,4MAQpB,MAAO,CAHKsL,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,IACfvV,KAAK6wB,UAAYxjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAK6wB,WAActb,IAAUlI,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,MAKpFwhB,EAAA72B,UAAA61B,eAAA,SAAehR,GACb,MAAO,aAAa/kB,KAAKu1B,WAAWxQ,EAAMxU,OAAM,QAGlDwmB,EAAA72B,UAAAkf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKH,OAASqU,EAAMvU,MAGtBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBkmB,EAAA72B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdumB,EAAA72B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKm1B,YAELn1B,KAAKq1B,aAGhBr1B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3E8K,EAAA72B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKm1B,YACnB1D,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKq1B,aACnB5D,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGTsF,EAAA72B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPiqB,EAAA72B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPiqB,EAAA72B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlDwX,EAAA72B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAxQ3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DArCHgF,EAAsBj2B,EAAA,CA9FlC2J,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAU,6vFA8EVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,MAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,unDAKvC+kB,IAA+B7nB,kBCT5C,SAAA8nB,IAAA,IAAAxtB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EACxBnlB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAY9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,IA8KvB,OAzNoDprB,EAAAk3B,EAAA5qB,GA8ClD4qB,EAAA92B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAELrQ,KAAKi1B,YAAcj1B,KAAKk1B,iBACxBl1B,KAAKm1B,YAAcn1B,KAAKo1B,iBACxBp1B,KAAKm2B,YAAcn2B,KAAKs1B,iBAExBt1B,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,KAGrEmlB,EAAA92B,UAAAg1B,eAAA,mBACQ3f,EAAS,OACf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMxU,QACzBgF,EAAOnT,KAAK2iB,EAAMxU,yGAItB,OAAOgF,GAGTyhB,EAAA92B,UAAAk1B,eAAA,uBACQ7f,EAAS,OACf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEiR,QACrBgF,EAAOnT,KAAK9C,EAAEiR,4MAKpB,OAAOgF,GAGTyhB,EAAA92B,UAAAo1B,eAAA,WACE,MAAO,CAAC,EAAG,MAGb0B,EAAA92B,UAAA8mB,UAAA,WACE,IAAMze,EAAUvI,KAAKi1B,YAAYt0B,QAAUX,KAAKgQ,KAAKtI,MAAQ1H,KAAKs0B,WAAa,GAE/E,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKtI,QACzB0Y,aAAa7X,GACbgN,OAAOvV,KAAKi1B,cAGjB+B,EAAA92B,UAAAuvB,UAAA,WACE,IAAMzb,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC3e,KAAKgQ,KAAKzI,OAAQ,IACzBgO,OAAOvV,KAAKm2B,aACf,OAAOn2B,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CgjB,EAAA92B,UAAA61B,eAAA,SAAehR,GACb,MAAO,aAAa/kB,KAAKqe,OAAO0G,EAAMvU,MAAK,QAG7CwmB,EAAA92B,UAAAkf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKH,OAASqU,EAAMvU,MAGtBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBmmB,EAAA92B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdwmB,EAAA92B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKm1B,YAELn1B,KAAKm2B,YAGhBn2B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3E+K,EAAA92B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKm1B,YACnB1D,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKm2B,YACnB1E,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGTuF,EAAA92B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPkqB,EAAA92B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPkqB,EAAA92B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlDyX,EAAA92B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAtN3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DA/BHiF,EAA8Bl2B,EAAA,CArF1C2J,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAU,41EAqEVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,MAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,unDAKvCglB,IAAuC9nB,kBCIpD,SAAA+nB,IAAA,IAAAztB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAOzBjiB,EAAAgQ,iBAA2B,EAE3BhQ,EAAA2J,eAAyB,EACzB3J,EAAA+V,cAAuB,GAEvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAA8qB,WAAa,EACb9qB,EAAAmlB,cAAwB,EAExBnlB,EAAA+qB,eAAyB,EAEzB/qB,EAAAqqB,eAAyB,EAExBrqB,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAa9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAktB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,KAqNrD,OAtQiD50B,EAAAm3B,EAAA7qB,GAmD/C6qB,EAAA/2B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKu0B,gBACRv0B,KAAK02B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD10B,KAAK6R,OAAS,CAAC,GAAK7R,KAAK02B,mBAAmBhC,SAAU,GAAI,GAAK10B,KAAK02B,mBAAmBjC,SAAU,IAEjGz0B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGnBzrB,KAAKu0B,gBACPv0B,KAAKgQ,KAAKzI,QAAUvH,KAAK02B,mBAAmBjC,UAG9Cz0B,KAAKqQ,cAELrQ,KAAKi1B,YAAcj1B,KAAKk1B,iBACxBl1B,KAAKm1B,YAAcn1B,KAAKo1B,iBACxBp1B,KAAKm2B,YAAcn2B,KAAKs1B,iBAExBt1B,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,OAAM5rB,KAAK6R,OAAO,GAAK7R,KAAK02B,mBAAmBjC,UAAQ,KAGxGwC,EAAA/2B,UAAAg1B,eAAA,mBACQ3f,EAAS,OACf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMxU,QACzBgF,EAAOnT,KAAK2iB,EAAMxU,yGAGtB,OAAOgF,GAGT0hB,EAAA/2B,UAAAk1B,eAAA,uBACQ7f,EAAS,OACf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEiR,QACrBgF,EAAOnT,KAAK9C,EAAEiR,4MAIpB,OAAOgF,GAGT0hB,EAAA/2B,UAAAo1B,eAAA,uBACQ/f,EAAS,GACX8gB,EAAW,EACXC,EAAU,MACd,IAAoB,IAAAplB,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,MACVw0B,EAAc,EACdC,EAAa,MACjB,IAAgB,IAAAlP,GAAAwO,OAAA,EAAAr0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACNzC,EAAEyC,MAAQ,EACZw0B,GAAej3B,EAAEyC,MAEjBy0B,GAAcl3B,EAAEyC,MAElBs0B,EAAW/2B,EAAEyC,MAAQs0B,EAAW/2B,EAAEyC,MAAQs0B,EAC1CC,EAAUh3B,EAAEyC,MAAQu0B,EAAUh3B,EAAEyC,MAAQu0B,oGAE1C/gB,EAAOnT,KAAKm0B,GACZhhB,EAAOnT,KAAKo0B,qGAOd,OALAjhB,EAAOnT,KAAKi0B,GACZ9gB,EAAOnT,KAAKk0B,GAIL,CAFKjpB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAMiT,IACfvV,KAAK6wB,UAAYxjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAK6wB,WAActb,IAAUlI,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQiT,MAIjF0hB,EAAA/2B,UAAA8mB,UAAA,WACE,IAAMze,EAAUvI,KAAKi1B,YAAYt0B,QAAUX,KAAKgQ,KAAKtI,MAAQ1H,KAAKs0B,WAAa,GAC/E,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKtI,QACzB0Y,aAAa7X,GACbgN,OAAOvV,KAAKi1B,cAGjBgC,EAAA/2B,UAAAuvB,UAAA,WACE,IAAMzb,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC3e,KAAKgQ,KAAKzI,OAAQ,IACzBgO,OAAOvV,KAAKm2B,aACf,OAAOn2B,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CijB,EAAA/2B,UAAA42B,4BAAA,SAA4Bhb,EAAOka,GAAnC,IAAAxsB,EAAAxJ,KACM8b,EAAM+Y,KAAKJ,SACbz0B,KAAK02B,mBAAmBjC,SAAWpnB,KAAKiF,IAAItS,KAAK02B,mBAAmBjC,SAAU3Y,EAAM+Y,KAAKttB,QAEzFvH,KAAK02B,mBAAmBhC,SAAWrnB,KAAKiF,IAAItS,KAAK02B,mBAAmBhC,SAAU5Y,EAAM+Y,KAAKttB,QAEvFyuB,IAAeh2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BmqB,EAAA/2B,UAAA61B,eAAA,SAAehR,GACb,MAAO,cAAa/kB,KAAKqe,OAAO0G,EAAMvU,OAAS,GAAC,QAGlDymB,EAAA/2B,UAAAkf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKH,OAASqU,EAAMvU,MAGtBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnBomB,EAAA/2B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdymB,EAAA/2B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKm1B,YAELn1B,KAAKm2B,YAGhBn2B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3EgL,EAAA/2B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAWjB,MATuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKm1B,YACnB1D,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKm2B,YACnB1E,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGTwF,EAAA/2B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPmqB,EAAA/2B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPmqB,EAAA/2B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlD0X,EAAA/2B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAnQ3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAlCHkF,EAA2Bn2B,EAAA,CAzFvC2J,EAAAA,UAAU,CACTC,SAAU,kCACVC,SAAU,4lFAyEVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,MAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,unDAKvCilB,IAAoC/nB,IXrGrC2jB,GAAAA,EAAAA,UAAAA,EAAAA,QAAO,KACjB,SAAA,WACAA,GAAA,SAAA,WA+DF,IAAAqE,GAAA,WAAA,SAAAA,IAEWl3B,KAAAmJ,KAAO,WAQPnJ,KAAAwZ,iBAA2B,EAG3BxZ,KAAAuM,YAAsB,EACtBvM,KAAAu0B,eAAyB,EAEzBv0B,KAAA6zB,eAAyB,EAExB7zB,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aACjBzM,KAAAm3B,uBAAyB,IAAI1qB,EAAAA,aAQvCzM,KAAAo3B,kBAAmH,GAoLrH,OAlLEF,EAAAh3B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPoqB,EAAAh3B,UAAA4M,OAAA,iBAEMpF,EAFN8B,EAAAxJ,KACEA,KAAKq3B,wBAEDr3B,KAAK0Q,OAAO/P,SACd+G,EAAQ1H,KAAKqe,OAAO7J,aAEtB9M,EAAQ2F,KAAKuV,MAAMlb,GACnB,IAQI2iB,EAREuG,EAAYvjB,KAAKiF,IAAItS,KAAKye,OAAOlJ,SAAS,GAAI,GAE9C0P,IAAElb,EAAA,IACL8oB,EAAAA,QAAQ6B,UAAW,EACpB3qB,EAAC8oB,EAAAA,QAAQ4B,UAAW,KAElB6C,EAASzE,EAAAA,QAAQ6B,SAGH,eAAd10B,KAAKmJ,OACPkhB,EAAQrqB,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAAA8qB,EAAM9qB,IAAG,IAGpEU,KAAKu3B,KAAOv3B,KAAK0Q,OAAOsH,KAAI,SAAC1Y,EAAGwpB,GAC9B,IAAI/mB,EAAQzC,EAAEyC,MACRwO,EAAQ/G,EAAKguB,SAASl4B,GACtBqpB,EAAiBrM,EAAY/L,GAC7BqjB,EAAapqB,EAAKoqB,WACxB0D,EAASv1B,EAAQ,EAAI8wB,EAAAA,QAAQ6B,SAAW7B,EAAAA,QAAQ4B,SAEhD,IAAMgD,EAAW,CACf11B,MAAKA,EACLwO,MAAKA,EACLqjB,WAAUA,EACV/iB,KAAMvR,EACNoI,MAAKA,EACLihB,eAAcA,EACdphB,OAAQ,EACR6K,EAAG,EACHF,EAAG,GAGL,GAAkB,aAAd1I,EAAKL,KACPsuB,EAAIlwB,OAAS8F,KAAK2V,IAAIxZ,EAAKiV,OAAO1c,GAASyH,EAAKiV,OAAOmS,IACvD6G,EAAIrlB,EAAI5I,EAAK6U,OAAO9N,GAGlBknB,EAAIvlB,EADFnQ,EAAQ,EACFyH,EAAKiV,OAAO,GAEZjV,EAAKiV,OAAO1c,QAEjB,GAAkB,YAAdyH,EAAKL,KAAoB,CAClC,IACMuuB,GADAC,EAAU1S,EAAGqS,IACOv1B,EAC1BkjB,EAAGqS,IAAWv1B,EAEd01B,EAAIlwB,OAASiC,EAAKiV,OAAOkZ,GAAWnuB,EAAKiV,OAAOiZ,GAChDD,EAAIrlB,EAAI,EACRqlB,EAAIvlB,EAAI1I,EAAKiV,OAAOiZ,GACpBD,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,OACT,GAAkB,eAAdluB,EAAKL,KAAuB,CACrC,IAAIwuB,EACAD,GADAC,EAAU1S,EAAGqS,IACOv1B,EACxBkjB,EAAGqS,IAAWv1B,EAEVsoB,EAAQ,GACVsN,EAAqB,IAAVA,EAAiBtN,EAC5BqN,EAAqB,IAAVA,EAAiBrN,IAE5BsN,EAAU,EACVD,EAAU,GAGZD,EAAIlwB,OAASiC,EAAKiV,OAAOkZ,GAAWnuB,EAAKiV,OAAOiZ,GAChDD,EAAIrlB,EAAI,EACRqlB,EAAIvlB,EAAI1I,EAAKiV,OAAOiZ,GACpBD,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,EACd31B,GAAS21B,EAAUC,GAASzS,QAAQ,GAAK,IAGb,YAA1B1b,EAAKoV,OAAOnR,UACdgqB,EAAIlZ,MAAQ/U,EAAKoV,OAAOC,SAAStO,GAEf,aAAd/G,EAAKL,MACPsuB,EAAIlZ,MAAQ/U,EAAKoV,OAAOC,SAAS9c,GACjC01B,EAAIzY,cAAgBxV,EAAKoV,OAAOkO,uBAAuB/qB,KAEvD01B,EAAIlZ,MAAQ/U,EAAKoV,OAAOC,SAAS4Y,EAAIC,SACrCD,EAAIzY,cAAgBxV,EAAKoV,OAAOkO,uBAAuB2K,EAAIC,QAASD,EAAIE,UAI5E,IAAIvZ,EAAeuK,EAenB,OAdA8O,EAAIG,UAAYjP,EAAiB,IAAM5mB,EAAMqS,iBACzC5K,EAAK2U,aACPC,EAAkB5U,EAAK2U,WAAU,MAAMwK,EACvC8O,EAAI5mB,KAAKH,OAASlH,EAAK2U,WACvBsZ,EAAIG,UAAYpuB,EAAK2U,WAAa,IAAMsZ,EAAIG,WAG9CH,EAAII,YAAcruB,EAAKgQ,qBACnBxV,EACA,yCAC4BuY,EAAY6B,GAAa,8CAC3Brc,EAAMqS,iBAAgB,kBAG7CqjB,KAGTz3B,KAAK83B,oBAGPZ,EAAAh3B,UAAA43B,iBAAA,WAAA,IAAAtuB,EAAAxJ,KACE,GAAkB,YAAdA,KAAKmJ,KAAoB,CAC3BnJ,KAAKo3B,kBAAoB,GACzB,IAAMW,EAAe,GACrBA,EAAQrnB,OAAS1Q,KAAKme,WACtB,IAAM6Z,EAAgBh4B,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAACA,EAAI,EAAI8qB,EAAM9qB,EAAI8qB,IAAM,GAC1F6N,EAAgBj4B,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAACA,EAAI,EAAI8qB,EAAM9qB,EAAI8qB,IAAM,GAChG2N,EAAQ1N,MAAQ2N,EAAgBC,EAChCF,EAAQ3lB,EAAI,EACZ2lB,EAAQ7lB,EAAI,EACR6lB,EAAQ1N,MAAQ,EAClB0N,EAAQxwB,OAASvH,KAAKye,OAAOuZ,GAE7BD,EAAQxwB,OAASvH,KAAKye,OAAOwZ,GAE/BF,EAAQrwB,MAAQ1H,KAAKqe,OAAO7J,YAC5BxU,KAAKo3B,kBAAkBh1B,KAAK21B,QAE5B/3B,KAAKo3B,kBAAoBp3B,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GACvC,IAAMy4B,EAAe,GAOrB,OANAA,EAAQrnB,OAASlH,EAAK2U,WAAa3U,EAAK2U,WAAa7e,EAAEiR,MACvDwnB,EAAQ1N,MAAQ/qB,EAAEyC,MAClBg2B,EAAQ3lB,EAAI5I,EAAK6U,OAAO/e,EAAEiR,OAC1BwnB,EAAQ7lB,EAAI1I,EAAKiV,OAAO,GACxBsZ,EAAQxwB,OAASiC,EAAKiV,OAAOsZ,EAAQ1N,OAAS7gB,EAAKiV,OAAO,GAC1DsZ,EAAQrwB,MAAQ8B,EAAK6U,OAAO7J,YACrBujB,MAKbb,EAAAh3B,UAAAm3B,sBAAA,WACEr3B,KAAK0Z,iBAAmB1Z,KAAKwZ,qBAAkBxV,EAAY,MAC3DhE,KAAK6Z,YAAc7Z,KAAKwZ,qBAAkBxV,EAAY,WAGxDkzB,EAAAh3B,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,MAAQ8O,EAAM5O,SAAWpR,EAAEoR,WAKvDwmB,EAAAh3B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBqmB,EAAAh3B,UAAAs3B,SAAA,SAASU,GACP,OAAIA,EAAS3nB,MACJ2nB,EAAS3nB,MAEX2nB,EAAS1nB,MAGlB0mB,EAAAh3B,UAAA2oB,QAAA,SAAQC,EAAO2O,GACb,OAAOA,EAAIlnB,OAGb2mB,EAAAh3B,UAAAi4B,iBAAA,SAAiBrP,EAAOsP,GACtB,OAAOtP,EAAQ,IAAMsP,EAAS1nB,OAAS,IAAM0nB,EAAS/N,OA9M/CvpB,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,uDArBUwpB,EAAuBp2B,EAAA,CA5DnC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,2+CA8CViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,aAKzBgpB,GAAb,iBYIA,SAAAmB,IAIEr4B,KAAAo3B,kBAAmH,GAG1Gp3B,KAAAmJ,KAAO,WAKPnJ,KAAAwZ,iBAA2B,EAM3BxZ,KAAAuM,YAAsB,EACtBvM,KAAAu0B,eAAyB,EAEzBv0B,KAAA6zB,eAAyB,EAExB7zB,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aACjBzM,KAAAs4B,sBAAwB,IAAI7rB,EAAAA,aA+KxC,OA1KE4rB,EAAAn4B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPurB,EAAAn4B,UAAA4M,OAAA,iBAAAtD,EAAAxJ,KACEA,KAAKq3B,wBACL,IAIIC,EAEAjN,EANEpF,IAAElb,EAAA,IACL8oB,EAAAA,QAAQ6B,UAAW,EACpB3qB,EAAC8oB,EAAAA,QAAQ4B,UAAW,KAGtB6C,EAASzE,EAAAA,QAAQ6B,SAEC,eAAd10B,KAAKmJ,OACPkhB,EAAQrqB,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAAA8qB,EAAM9qB,IAAG,IAEpE,IAAM8wB,EAAY/iB,KAAKiF,IAAItS,KAAKqe,OAAO9I,SAAS,GAAI,GAEpDvV,KAAKu3B,KAAOv3B,KAAK0Q,OAAOsH,KAAI,SAAC1Y,EAAGwpB,GAC9B,IAAI/mB,EAAQzC,EAAEyC,MACRwO,EAAQ/G,EAAKguB,SAASl4B,GACtBqpB,EAAiBrM,EAAY/L,GAC7BqjB,EAAapqB,EAAKoqB,WACxB0D,EAASv1B,EAAQ,EAAI8wB,EAAAA,QAAQ6B,SAAW7B,EAAAA,QAAQ4B,SAEhD,IAAMgD,EAAW,CACf11B,MAAKA,EACLwO,MAAKA,EACLqjB,WAAUA,EACV/iB,KAAMvR,EACNqpB,eAAcA,GAKhB,GAFA8O,EAAIlwB,OAASiC,EAAKiV,OAAOjK,YAEP,aAAdhL,EAAKL,KACPsuB,EAAI/vB,MAAQ2F,KAAK2V,IAAIxZ,EAAK6U,OAAOtc,GAASyH,EAAK6U,OAAO+R,IAEpDqH,EAAIrlB,EADFrQ,EAAQ,EACFyH,EAAK6U,OAAOtc,GAEZyH,EAAK6U,OAAO+R,GAEtBqH,EAAIvlB,EAAI1I,EAAKiV,OAAOlO,QACf,GAAkB,YAAd/G,EAAKL,KAAoB,CAClC,IACMuuB,GADAC,EAAU1S,EAAGqS,IACOv1B,EAC1BkjB,EAAGqS,IAAWv1B,EAEd01B,EAAI/vB,MAAQ8B,EAAK6U,OAAOqZ,GAAWluB,EAAK6U,OAAOsZ,GAC/CF,EAAIrlB,EAAI5I,EAAK6U,OAAOsZ,GACpBF,EAAIvlB,EAAI,EACRulB,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,OACT,GAAkB,eAAdluB,EAAKL,KAAuB,CACrC,IAAIwuB,EACAD,GADAC,EAAU1S,EAAGqS,IACOv1B,EACxBkjB,EAAGqS,IAAWv1B,EAEVsoB,EAAQ,GACVsN,EAAqB,IAAVA,EAAiBtN,EAC5BqN,EAAqB,IAAVA,EAAiBrN,IAE5BsN,EAAU,EACVD,EAAU,GAGZD,EAAI/vB,MAAQ8B,EAAK6U,OAAOqZ,GAAWluB,EAAK6U,OAAOsZ,GAC/CF,EAAIrlB,EAAI5I,EAAK6U,OAAOsZ,GACpBF,EAAIvlB,EAAI,EACRulB,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,EACd31B,GAAS21B,EAAUC,GAASzS,QAAQ,GAAK,IAGb,YAA1B1b,EAAKoV,OAAOnR,UACdgqB,EAAIlZ,MAAQ/U,EAAKoV,OAAOC,SAAStO,GAEf,aAAd/G,EAAKL,MACPsuB,EAAIlZ,MAAQ/U,EAAKoV,OAAOC,SAAS9c,GACjC01B,EAAIzY,cAAgBxV,EAAKoV,OAAOkO,uBAAuB/qB,KAEvD01B,EAAIlZ,MAAQ/U,EAAKoV,OAAOC,SAAS4Y,EAAIC,SACrCD,EAAIzY,cAAgBxV,EAAKoV,OAAOkO,uBAAuB2K,EAAIC,QAASD,EAAIE,UAI5E,IAAIvZ,EAAeuK,EAenB,OAdA8O,EAAIG,UAAYjP,EAAiB,IAAM5mB,EAAMqS,iBACzC5K,EAAK2U,aACPC,EAAkB5U,EAAK2U,WAAU,MAAMwK,EACvC8O,EAAI5mB,KAAKH,OAASlH,EAAK2U,WACvBsZ,EAAIG,UAAYpuB,EAAK2U,WAAa,IAAMsZ,EAAIG,WAG9CH,EAAII,YAAcruB,EAAKgQ,qBACnBxV,EACA,yCAC4BuY,EAAY6B,GAAa,8CAC3Brc,EAAMqS,iBAAgB,kBAG7CqjB,KAGTz3B,KAAK83B,oBAGPO,EAAAn4B,UAAA43B,iBAAA,WAAA,IAAAtuB,EAAAxJ,KACE,GAAkB,YAAdA,KAAKmJ,KAAoB,CAC3BnJ,KAAKo3B,kBAAoB,GACzB,IAAMW,EAAe,GACrBA,EAAQrnB,OAAS1Q,KAAKme,WACtB,IAAM6Z,EAAgBh4B,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAACA,EAAI,EAAI8qB,EAAM9qB,EAAI8qB,IAAM,GAC1F6N,EAAgBj4B,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAACA,EAAI,EAAI8qB,EAAM9qB,EAAI8qB,IAAM,GAChG2N,EAAQ1N,MAAQ2N,EAAgBC,EAChCF,EAAQ3lB,EAAI,EACZ2lB,EAAQ7lB,EAAI,EAER6lB,EAAQ1N,MAAQ,EAClB0N,EAAQrwB,MAAQ1H,KAAKqe,OAAO2Z,GAE5BD,EAAQrwB,MAAQ1H,KAAKqe,OAAO4Z,GAE9BF,EAAQxwB,OAASvH,KAAKye,OAAOjK,YAC7BxU,KAAKo3B,kBAAkBh1B,KAAK21B,QAE5B/3B,KAAKo3B,kBAAoBp3B,KAAK0Q,OAAOsH,KAAI,SAAA1Y,GACvC,IAAMy4B,EAAe,GAOrB,OANAA,EAAQrnB,OAASlH,EAAK2U,WAAa3U,EAAK2U,WAAa7e,EAAEiR,MACvDwnB,EAAQ1N,MAAQ/qB,EAAEyC,MAClBg2B,EAAQ3lB,EAAI5I,EAAK6U,OAAO,GACxB0Z,EAAQ7lB,EAAI1I,EAAKiV,OAAOnf,EAAEiR,OAC1BwnB,EAAQrwB,MAAQ8B,EAAK6U,OAAO0Z,EAAQ1N,OAAS7gB,EAAK6U,OAAO,GACzD0Z,EAAQxwB,OAASiC,EAAKiV,OAAOjK,YACtBujB,MAKbM,EAAAn4B,UAAAm3B,sBAAA,WACEr3B,KAAK0Z,iBAAmB1Z,KAAKwZ,qBAAkBxV,EAAY,MAC3DhE,KAAK6Z,YAAc7Z,KAAKwZ,qBAAkBxV,EAAY,WAGxDq0B,EAAAn4B,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,MAAQ8O,EAAM5O,SAAWpR,EAAEoR,WAKvD2nB,EAAAn4B,UAAAs3B,SAAA,SAASU,GACP,OAAIA,EAAS3nB,MACJ2nB,EAAS3nB,MAEX2nB,EAAS1nB,MAGlB6nB,EAAAn4B,UAAA2oB,QAAA,SAAQC,EAAO2O,GACb,OAAOA,EAAIlnB,OAGb8nB,EAAAn4B,UAAAi4B,iBAAA,SAAiBrP,EAAOsP,GACtB,OAAOtP,EAAQ,IAAMsP,EAAS1nB,OAAS,IAAM0nB,EAAS/N,OAGxDgO,EAAAn4B,UAAAq4B,MAAA,SAAM1nB,GACJ7Q,KAAKuP,OAAOZ,KAAKkC,IAjMV/P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,sDA1BU2qB,EAAgBv3B,EAAA,CA3D5B2J,EAAAA,UAAU,CACTC,SAAU,kCACVC,SAAU,08CA6CViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,aAKzBmqB,oBCzBX,SAAAG,EAAYh1B,GAXFxD,KAAAqT,kBAAuC,IAAI5G,EAAAA,aAKrDzM,KAAAy4B,kBAA4B,EAC5Bz4B,KAAA04B,gBAA0B,EAMxB14B,KAAKwD,QAAUA,EAAQC,cAmD3B,OAhDE+0B,EAAAt4B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP0rB,EAAAt4B,UAAAy4B,QAAA,WAGE,MAAO,CAAEpxB,OAFCvH,KAAKwD,QAAQmG,wBAAwBpC,OAE3BG,MADV1H,KAAKwD,QAAQmG,wBAAwBjC,MACjB+sB,SAAUz0B,KAAK+B,MAAQ,IAGvDy2B,EAAAt4B,UAAAmJ,gBAAA,WACErJ,KAAKqT,kBAAkB1E,KAAK3O,KAAK24B,YAGnCH,EAAAt4B,UAAA4M,OAAA,WACM9M,KAAK8jB,gBACP9jB,KAAK44B,cAAgB54B,KAAK8jB,gBAAgB9jB,KAAK+B,OAE/C/B,KAAK44B,cAAgBtc,EAAYtc,KAAK+B,OAGf,eAArB/B,KAAKugB,aACPvgB,KAAKoS,EAAIpS,KAAK64B,KAAO74B,KAAK84B,SAGtB94B,KAAK+B,MAAQ,GACf/B,KAAKoS,EAAIpS,KAAKoS,EAAIpS,KAAKy4B,kBACvBz4B,KAAK+R,WAAa,QAElB/R,KAAKoS,EAAIpS,KAAKoS,EAAIpS,KAAKy4B,kBACvBz4B,KAAK+R,WAAa,SAEpB/R,KAAKkS,EAAIlS,KAAK+4B,KAAO/4B,KAAKg5B,UAAY,IAGtCh5B,KAAKoS,EAAIpS,KAAK64B,KAAO74B,KAAK84B,SAAW,EACrC94B,KAAKkS,EAAIlS,KAAK+4B,KAAO/4B,KAAKg5B,UAEtBh5B,KAAK+B,MAAQ,GACf/B,KAAKkS,EAAIlS,KAAKkS,EAAIlS,KAAK04B,gBACvB14B,KAAK+R,WAAa,QAElB/R,KAAKkS,EAAIlS,KAAKkS,EAAIlS,KAAK04B,gBACvB14B,KAAK+R,WAAa,SAEpB/R,KAAKgS,UAAY,eAAehS,KAAKoS,EAAC,MAAMpS,KAAKkS,EAAC,+CAjDjC/H,EAAAA,cAnBZrJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,2CAESvJ,EAAA,CAAT4M,EAAAA,kDATU8qB,EAAiB13B,EAAA,CAjB7B2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,4PAaViD,gBAAiBC,EAAAA,wBAAwBC,oDAE9B0qB,oBCiBb,SAAAS,KAA6B,OAAhBA,EAAcn4B,EAAA,CA/B1B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CACZ4a,GACAU,GACAU,GACAmB,GACAE,GACAK,GACAM,GACAC,GACAC,GACAuB,GACAH,GACAnB,IAEFle,QAAS,CACP2a,GACAU,GACAU,GACAmB,GACAE,GACAK,GACAM,GACAC,GACAC,GACAuB,GACAH,GACAnB,OAGS+B,eC5CGC,GAAU7R,EAAQ5Z,EAAWkjB,EAAWwI,EAASC,GAC/D,IAAI7jB,EAAmB,IACL,WAAd9H,IACF4Z,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,MAC3BwL,GACHtJ,EAAOjlB,KAAK,IAIE,SAAdqL,GAAsC,WAAdA,GAI1B8H,EAAS,CAHG4jB,GAAkB9rB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAC9B+R,GAAkB/rB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,KAI1C9R,EAAS8R,EAGX,OAAO9R,EAGT,SAAgB8jB,GAAS9jB,EAAQoJ,EAAiBlR,EAAWkhB,GAC3D,IAAI3a,EAoBJ,MAlBkB,SAAdvG,EACFuG,EAAQyT,EAAAA,YACL9I,MAAMA,GACNpJ,OAAOA,GACa,WAAd9H,GACTuG,EAAQ0T,EAAAA,cACL/I,MAAMA,GACNpJ,OAAOA,GAENoZ,IACF3a,EAAQA,EAAM8c,SAEO,YAAdrjB,IACTuG,EAAQ2T,EAAAA,aACLhJ,MAAM,CAACA,EAAM,GAAIA,EAAM,KACvBpJ,OAAOA,IAGLvB,qBCkFT,SAAAslB,IAAA,IAAA9vB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA2J,eAAyB,EACzB3J,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QACzBjiB,EAAAslB,OAAiB,EACjBtlB,EAAAulB,OAAiB,EAKjBvlB,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAmlB,cAAwB,EACxBnlB,EAAA+vB,UAAY,GACZ/vB,EAAAgwB,UAAY,EAEZhwB,EAAA8F,WAAa,UACb9F,EAAAgQ,iBAA2B,EAM1BhQ,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAM9CjD,EAAAiE,UAAY,SACZjE,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAiwB,cAAgB,CAAC,EAAG,EAAG,EAAG,GAqB1BjwB,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAA+V,cAAuB,KAiOzB,OAjS0Czf,EAAAw5B,EAAAltB,GAkExCktB,EAAAp5B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKuvB,aAAevvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,QAC5CxQ,KAAK05B,QAAU15B,KAAK25B,aACpB35B,KAAK8mB,QAAU9mB,KAAK+mB,aACpB/mB,KAAKqvB,QAAUrvB,KAAKsvB,aAEpBtvB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,IAAI5rB,KAAK6R,OAAO,GAAE,IAEjE,IAAMsa,EAAkC,YAApBnsB,KAAKsP,WAA2BtP,KAAKuvB,aAAevvB,KAAK05B,QAC7E15B,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAY6c,EAAansB,KAAKisB,cAE9EjsB,KAAK6Q,KAAO7Q,KAAK8P,QAEjB9P,KAAKw5B,UAAYnsB,KAAKiF,IAAItS,KAAKw5B,UAAW,GAC1Cx5B,KAAKu5B,UAAYlsB,KAAKiF,IAAItS,KAAKu5B,UAAW,GAE1Cv5B,KAAK45B,OAAS55B,KAAK65B,UAAU75B,KAAK05B,QAAS,CAAC15B,KAAKw5B,UAAWx5B,KAAKu5B,YAEjEv5B,KAAKy5B,cAAgB,CAAC,EAAG,EAAG,EAAG,GAC/Bz5B,KAAK85B,YAEL95B,KAAKy5B,cAAgBz5B,KAAK+5B,mBAC1B/5B,KAAK85B,YAEL95B,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAK6vB,WAAa,OAAS5S,KAAKtI,WAChC3U,KAAK8vB,SAAW,QAAQ9vB,KAAK6vB,WAAU,KAIzCyJ,EAAAp5B,UAAAsxB,YAAA,WACExxB,KAAKuxB,iBAGP+H,EAAAp5B,UAAAkf,QAAA,SAAQvO,EAAMH,GACRA,IACFG,EAAKH,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnByoB,EAAAp5B,UAAA65B,iBAAA,uBACMC,EAAO,EACPC,EAAO,EACPC,EAAOl6B,KAAKgQ,KAAKzI,OACjB4yB,EAAOn6B,KAAKgQ,KAAKtI,UAErB,IAAgB,IAAAwJ,EAAAzP,EAAAzB,KAAK6Q,MAAIO,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAAtB,IAAMvB,EAAC6Q,EAAArP,UACV,IAAgB,IAAAulB,GAAAnW,OAAA,EAAA1P,EAAAlB,EAAEmQ,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAArB,IAAMxC,EAACioB,EAAAxlB,MACJX,EAAIpB,KAAK45B,OAAOt6B,EAAE8B,GAClB8c,EAAyB,WAApBle,KAAKo6B,WAA0Bp6B,KAAKqe,OAAOC,OAAOhf,EAAE8S,IAAMpS,KAAKqe,OAAO/e,EAAE8S,GAC7EoM,EAAyB,WAApBxe,KAAKq6B,WAA0Br6B,KAAKye,OAAOH,OAAOhf,EAAE4S,IAAMlS,KAAKye,OAAOnf,EAAE4S,GACnF+nB,EAAO5sB,KAAKiF,IAAIlR,EAAI8c,EAAI+b,GACxBD,EAAO3sB,KAAKiF,IAAIlR,EAAIod,EAAIwb,GACxBE,EAAO7sB,KAAKiF,IAAIkM,EAAKpd,EAAG84B,GACxBC,EAAO9sB,KAAKiF,IAAI4L,EAAK9c,EAAG+4B,wMAO5B,MAAO,CAACH,EAHRG,EAAO9sB,KAAKiF,IAAI6nB,EAAOn6B,KAAKgQ,KAAKtI,MAAO,GACxCwyB,EAAO7sB,KAAKiF,IAAI4nB,EAAOl6B,KAAKgQ,KAAKzI,OAAQ,GAEf0yB,IAG5BX,EAAAp5B,UAAA45B,UAAA,WACE,IAAIpyB,EAAQ1H,KAAKgQ,KAAKtI,WACC1D,IAAnBhE,KAAKowB,gBAA8CpsB,IAAnBhE,KAAKqwB,YACvC3oB,GAAgB1H,KAAKy5B,cAAc,IAErC,IAAIlyB,EAASvH,KAAKgQ,KAAKzI,YACAvD,IAAnBhE,KAAK4wB,gBAA8C5sB,IAAnBhE,KAAK6wB,YACvCtpB,GAAkBvH,KAAKy5B,cAAc,IAEvCz5B,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAASpf,GAC3C1H,KAAKye,OAASze,KAAKyvB,UAAUzvB,KAAKqvB,QAAS9nB,IAG7C+xB,EAAAp5B,UAAAuvB,UAAA,SAAUla,EAAQhO,GAChB,OAAO8xB,GAAS9jB,EAAQ,CAAChO,EAAQvH,KAAKy5B,cAAc,IAAKz5B,KAAKq6B,WAAYr6B,KAAK2uB,eAGjF2K,EAAAp5B,UAAA8mB,UAAA,SAAUzR,EAAQ7N,GAChB,OAAO2xB,GAAS9jB,EAAQ,CAACvV,KAAKy5B,cAAc,GAAI/xB,GAAQ1H,KAAKo6B,WAAYp6B,KAAK2uB,eAGhF2K,EAAAp5B,UAAA25B,UAAA,SAAUtkB,EAAQoJ,GAChB,IAAM3K,EAAQ0T,EAAAA,cACX/I,MAAMA,GACNpJ,OAAOA,GAEV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5CslB,EAAAp5B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRjM,SAAUtJ,KAAKyrB,eACfzP,WAAOhY,GAYT,MATuB,YAAnBytB,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKuvB,aACnBkC,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAK05B,QACnBjI,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAGrByd,GAGT6H,EAAAp5B,UAAA6mB,WAAA,uBACQM,EAAS,OAEf,IAAsB,IAAAnW,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAgT,OAAA,EAAA74B,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACLslB,EAAOG,SAASloB,EAAE8S,IACrBiV,EAAOjlB,KAAK9C,EAAE8S,wMAMpB,OADApS,KAAKo6B,WAAatM,GAAazG,GACxB6R,GAAU7R,EAAQrnB,KAAKo6B,WAAYp6B,KAAK2wB,UAAW3wB,KAAKowB,UAAWpwB,KAAKqwB,YAGjFiJ,EAAAp5B,UAAAovB,WAAA,uBACQjI,EAAS,OAEf,IAAsB,IAAAnW,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAiT,OAAA,EAAA94B,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACLslB,EAAOG,SAASloB,EAAE4S,IACrBmV,EAAOjlB,KAAK9C,EAAE4S,wMAMpB,OADAlS,KAAKq6B,WAAavM,GAAazG,GACxB6R,GAAU7R,EAAQrnB,KAAKq6B,WAAYr6B,KAAK2wB,UAAW3wB,KAAK4wB,UAAW5wB,KAAK6wB,YAGjFyI,EAAAp5B,UAAAy5B,WAAA,uBACM5kB,EAAMylB,EAAAA,EACNloB,GAAOkoB,EAAAA,MAEX,IAAsB,IAAAtpB,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAmT,OAAA,EAAAh5B,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACJA,EAAQuc,OAAOhf,EAAE8B,IAAM,EAC7B2T,EAAM1H,KAAK0H,IAAIA,EAAKhT,GACpBuQ,EAAMjF,KAAKiF,IAAIA,EAAKvQ,wMAIxB,MAAO,CAACgT,EAAKzC,IAGfgnB,EAAAp5B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGPwsB,EAAAp5B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGPwsB,EAAAp5B,UAAA0xB,WAAA,SAAW5gB,GACGhR,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,SAEd,IAIXxQ,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlD+Z,EAAAp5B,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,QAGzBxQ,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpD+Z,EAAAp5B,UAAAqxB,cAAA,mBACEvxB,KAAKuf,cAAajd,EAAOtC,KAAKuf,mBAC9B,IAAoB,IAAA9I,EAAAhV,EAAAzB,KAAKuf,eAAarO,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAnC,IAAMwd,EAAKpO,EAAAnP,MACd/B,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOud,EAAOuS,QAAS,uGAEhD7xB,KAAKuf,cAAgB,IAGvB+Z,EAAAp5B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MA9RL1P,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAgFdjxB,EAAA,CADC0J,EAAAA,aAAa,+CAjHH8uB,EAAoBx4B,EAAA,CAzGhC2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,03FAqFViD,gBAAiBC,EAAAA,wBAAwBC,OACzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,8mDAORorB,IAA6BpqB,iBCpE1C,SAAAwrB,IAYW16B,KAAAwZ,iBAA2B,EAG1BxZ,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aA+H7B,OA1HEiuB,EAAAx6B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP4tB,EAAAx6B,UAAA4M,OAAA,WACE9M,KAAK26B,QAAU36B,KAAK46B,cAGtBF,EAAAx6B,UAAA06B,WAAA,WAAA,IAAApxB,EAAAxJ,KACQme,EAAane,KAAK6Q,KAAKL,KAE7B,OAAOxQ,KAAK6Q,KAAKH,OACdsH,KAAI,SAAC1Y,EAAGkB,GACP,QAAmB,IAARlB,EAAE4S,QAAoC,IAAR5S,EAAE8S,EAAmB,CAC5D,IAAMF,EAAI5S,EAAE4S,EACNE,EAAI9S,EAAE8S,EACNhR,EAAI9B,EAAE8B,EAEN2d,EAASvV,EAAKowB,OAAOx4B,GAAK,GAC1Bgd,EAAe9B,EAAYhd,EAAEkR,MAE7B0N,EAAyB,WAApB1U,EAAK4wB,WAA0B5wB,EAAK6U,OAAOC,OAAOlM,IAAM5I,EAAK6U,OAAOjM,GACzEoM,EAAyB,WAApBhV,EAAK6wB,WAA0B7wB,EAAKiV,OAAOH,OAAOpM,IAAM1I,EAAKiV,OAAOvM,GAEzEqM,EAAkC,WAA1B/U,EAAKoV,OAAOnR,UAAyBjE,EAAKoV,OAAOC,SAASzd,GAAKoI,EAAKoV,OAAOC,SAASV,GAE5FkB,GAAY7V,EAAK+V,cAAc5e,QAAgB6I,EAAK6V,SAAS,CAAE7O,KAAM2N,IACrEjQ,EAAUmR,EAAW,EAAI,GAU/B,MAAO,CACLxO,KATWrR,OAAOa,OAAO,GAAIf,EAAG,CAChCoR,OAAQyN,EACR3N,KAAMlR,EAAEkR,KACRzO,MAAOzC,EAAE4S,EACTE,EAAG9S,EAAE8S,EACL2M,OAAQzf,EAAE8B,IAKVgR,EAACA,EACDF,EAACA,EACD9Q,EAACA,EACD0d,WAAY,CAAC,eAAete,GAC5BuB,MAAOmQ,EACP3B,MAAO6B,EACP8L,GAAEA,EACFM,GAAEA,EACFO,OAAMA,EACNX,aAAYA,EACZG,MAAKA,EACLrQ,QAAOA,EACPiQ,WAAUA,EACVkB,SAAQA,EACRrN,UAAW,aAAakM,EAAE,IAAIM,EAAE,SAIrC4I,QAAO,SAAAxJ,GAAU,YAAW5Z,IAAX4Z,MAGtB8c,EAAAx6B,UAAAgf,eAAA,SAAetB,GACb,IAAMid,OAAgC,IAAbjd,EAAOxc,EAC1B05B,EAAkBld,EAAOQ,cAAgBR,EAAOQ,aAAazd,OAC7Do6B,EAAgBnd,EAAOO,YAAcP,EAAOO,WAAWxd,OAEvDq6B,EAAcH,EAAYve,EAAYsB,EAAOxc,GAAK,GAClD65B,EAAaj7B,KAAKi7B,YAAkC,KAApBj7B,KAAKi7B,WAAuBj7B,KAAKi7B,WAAU,IAAM,GACjFC,EAAal7B,KAAKk7B,YAAkC,KAApBl7B,KAAKk7B,WAAuBl7B,KAAKk7B,WAAU,IAAM,GACjF9oB,EAAIkK,EAAYsB,EAAOxL,GACvBF,EAAIoK,EAAYsB,EAAO1L,GACvB1B,EACJuqB,GAAiBD,EACVld,EAAOO,WAAU,MAAMP,EAAOQ,aACjCR,EAAOO,WAAaP,EAAOQ,aAIjC,MAAO,YAFL2c,GAAiBD,EAAkB,+BAA+Bve,EAAY/L,GAAK,UAAY,IAGjF,wDAEH+L,EAAY0e,GAAW,YAAY1e,EAAYnK,GAAE,0BACjDmK,EAAY2e,GAAW,YAAY3e,EAAYrK,GAAE,8DAGxDqK,EAAYye,GAAY,yBAKhCN,EAAAx6B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB6pB,EAAAx6B,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SAK5BkqB,EAAAx6B,UAAAqO,UAAA,SAAUqP,GACR,OAAI5d,KAAKuf,cAAc5e,OAAS,EACvBX,KAAKqf,SAAS,CAAE7O,KAAMoN,EAAOO,aAGZ,IAAnBP,EAAO1P,SAGhBwsB,EAAAx6B,UAAAuf,eAAA,SAAe7B,GACbA,EAAOJ,YAAa,EACpBxd,KAAKsd,SAAS3O,KAAK,CAAE6B,KAAMxQ,KAAK6Q,KAAKL,QAGvCkqB,EAAAx6B,UAAAwf,iBAAA,SAAiB9B,GACfA,EAAOJ,YAAa,EACpBxd,KAAKud,WAAW5O,KAAK,CAAE6B,KAAMxQ,KAAK6Q,KAAKL,QAGzCkqB,EAAAx6B,UAAA2oB,QAAA,SAAQC,EAAOlL,GACb,OAAUA,EAAO/M,KAAKH,OAAM,IAAIkN,EAAO/M,KAAKL,MA7IrC1P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAjBUgtB,EAAqB55B,EAAA,CA7CjC2J,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAU,ihCA8BViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACT8D,UAAW,aAEb7D,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAG8D,UAAW,sBAKvC0oB,oBChDb,SAAAS,KAAgC,OAAnBA,EAAiBr6B,EAAA,CAL7B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACugB,GAAsBoB,IACrC1hB,QAAS,CAACsgB,GAAsBoB,OAErBS,oBCgDX,SAAAC,EAAY53B,GAfHxD,KAAA8gB,UAAoB,EACpB9gB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aAWzBzM,KAAKwD,QAAUA,EAAQC,cA2D3B,OAxDE23B,EAAAl7B,UAAA0M,YAAA,SAAYC,GACV7M,KAAKgS,UAAY,aAAahS,KAAKoS,EAAC,MAAMpS,KAAKkS,EAAC,IAEhDlS,KAAK4gB,aAAe,GACpB5gB,KAAK0d,WAAa,OAAST,KAAKtI,WAChC3U,KAAKq7B,YAAc,QAAQr7B,KAAK0d,WAAU,IAC1C1d,KAAKgf,cAAgBhf,KAAKif,mBAEtBjf,KAAKuM,YACPvM,KAAKihB,iBAITma,EAAAl7B,UAAA+e,iBAAA,WACE,MAAO,CACL,CACE9M,OAAQ,EACRoM,MAAOve,KAAKgW,KACZ9H,QAASlO,KAAK4gB,cAEhB,CACEzO,OAAQ,IACRoM,MAAOve,KAAKgW,KACZ9H,QAAS,KAKfktB,EAAAl7B,UAAA+gB,cAAA,WACe1R,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SACpCiS,KAAK,UAAW,GACrBxhB,KAAKs7B,wBAGPF,EAAAl7B,UAAAo7B,qBAAA,WACe/rB,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SAGtCvB,aACApH,SAAS,KACT4a,KAAK,UAAW,IAGrB4Z,EAAAl7B,UAAAkf,QAAA,WACEpf,KAAKuP,OAAOZ,KAAK3O,KAAK6Q,OAIxBuqB,EAAAl7B,UAAA6a,aAAA,WACE/a,KAAKsd,SAAS3O,KAAK3O,KAAK6Q,OAI1BuqB,EAAAl7B,UAAA+a,aAAA,WACEjb,KAAKud,WAAW5O,KAAK3O,KAAK6Q,gDA1DP1G,EAAAA,cAtBZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CA8DD5M,EAAA,CADC0J,EAAAA,aAAa,gDAMd1J,EAAA,CADC0J,EAAAA,aAAa,gDA/EH4wB,EAAoBt6B,EAAA,CApBhC2J,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAU,ieAgBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BstB,oBCMb,SAAAG,IAMWv7B,KAAAwZ,iBAA2B,EAG3BxZ,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAA8B,IAAI7Q,EAAAA,aAClCzM,KAAAud,WAAgC,IAAI9Q,EAAAA,aA0DhD,OAtDE8uB,EAAAr7B,UAAAud,SAAA,WACOzd,KAAK63B,cACR73B,KAAK63B,YAAc73B,KAAKkf,iBAI5Bqc,EAAAr7B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPyuB,EAAAr7B,UAAA4M,OAAA,WACE9M,KAAKw7B,MAAQx7B,KAAKy7B,YAGpBF,EAAAr7B,UAAAu7B,SAAA,WAAA,IAAAjyB,EAAAxJ,KACQw7B,EAAQ,GAsBd,OApBAx7B,KAAK6Q,KAAKmH,KAAI,SAAA0jB,GACZA,EAAIhrB,OAAOsH,KAAI,SAAA2jB,GACb,IAAM55B,EAAQ45B,EAAK55B,MACnB45B,EAAKjrB,OAASgrB,EAAIlrB,KAElBgrB,EAAMp5B,KAAK,CACTs5B,IAAGA,EACHC,KAAIA,EACJvpB,EAAG5I,EAAK6U,OAAOqd,EAAIlrB,MACnB0B,EAAG1I,EAAKiV,OAAOkd,EAAKnrB,MACpB9I,MAAO8B,EAAK6U,OAAO7J,YACnBjN,OAAQiC,EAAKiV,OAAOjK,YACpBwB,KAAMxM,EAAKoV,OAAOC,SAAS9c,GAC3B8O,KAAM9O,EACNwO,MAAO+L,EAAYqf,EAAKnrB,MACxBE,OAAQgrB,EAAIlrB,aAKXgrB,GAGTD,EAAAr7B,UAAAgf,eAAA,SAAenV,OAAEwG,EAAAxG,EAAAwG,MAAOM,EAAA9G,EAAA8G,KACtB,MAAO,uCACyB0L,EAFJxS,EAAA2G,QAEuB,MAAM6L,EAAYhM,GAAM,4CAC7CM,EAAKuD,iBAAgB,iBAIrDmnB,EAAAr7B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAK6mB,aAGd0D,EAAAr7B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IApEV/P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAbU6tB,EAAuBz6B,EAAA,CA5BnC2J,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAU,ivBAwBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BytB,qBC6Cb,SAAAK,IAAA,IAAApyB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAQzBjiB,EAAAqyB,aAAkC,EAClCryB,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAgQ,iBAA2B,EAI3BhQ,EAAA+V,cAAuB,GAEtB/V,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAe9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAErB1hB,EAAAiE,UAAoB,WA6NtB,OA5QsC3N,EAAA87B,EAAAxvB,GAiDpCwvB,EAAA17B,UAAA4M,OAAA,WA0BE,GAzBAV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKqQ,cAELrQ,KAAK8mB,QAAU9mB,KAAK+mB,aACpB/mB,KAAKqvB,QAAUrvB,KAAKsvB,aACpBtvB,KAAKm2B,YAAcn2B,KAAKs1B,iBAExBt1B,KAAKyN,UAAYqgB,GAAa9tB,KAAKm2B,aAAa,GAEhDn2B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKyN,UACjBge,eAAgBzrB,KAAKyrB,iBAGA,WAAnBzrB,KAAKyN,UAAwB,CAC/B,IAAIsH,EAAM/U,KAAK+U,IACXzC,EAAMtS,KAAKsS,IACVtS,KAAK+U,MACRA,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAA,CAAK,GAAMtC,KAAKm2B,eAEvBn2B,KAAKsS,MACRA,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQtC,KAAKm2B,eAEzBn2B,KAAKm2B,YAAc,CAACphB,EAAKzC,GAG3BtS,KAAKqe,OAASre,KAAKgnB,YACnBhnB,KAAKye,OAASze,KAAKyvB,YAEnBzvB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,IACnE7R,KAAK87B,MAAQ97B,KAAK+7B,YAGpBH,EAAA17B,UAAA6mB,WAAA,mBACQxR,EAAS,OACf,IAAoB,IAAAkB,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAA7B,IAAMijB,EAAK7T,EAAAnP,MACTwT,EAAOiS,SAASzC,EAAMvU,OACzB+E,EAAOnT,KAAK2iB,EAAMvU,wGAItB,OAAO+E,GAGTqmB,EAAA17B,UAAAovB,WAAA,uBACQ/Z,EAAS,OAEf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAuO,OAAA,EAAAp0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEkR,OACrB+E,EAAOnT,KAAK9C,EAAEkR,2MAKpB,OAAO+E,GAGTqmB,EAAA17B,UAAAo1B,eAAA,uBACQ/f,EAAS,OAEf,IAAoB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA7B,IAAMijB,EAAK3T,EAAArP,UACd,IAAgB,IAAAulB,GAAAwO,OAAA,EAAAr0B,EAAAsjB,EAAMrU,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAAzB,IAAMxC,EAACioB,EAAAxlB,MACLwT,EAAOiS,SAASloB,EAAEyC,QACrBwT,EAAOnT,KAAK9C,EAAEyC,4MAKpB,OAAOwT,GAaTqmB,EAAA17B,UAAA87B,aAAA,SAAaj6B,EAAiD+mB,EAAWmT,EAAWC,GAalF,YAb4D,IAAApT,IAAAA,EAAA,GACvC,iBAAV/mB,IACTA,EAAQA,EACLya,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbA,QAAQ,KAAM,IAEdA,QAAQ,IAAK,KAENgL,SAAS,OACjBzlB,EAAQA,EAAMo6B,MAAM,MAGpBx8B,MAAMigB,QAAQ7d,IAA2B,iBAAV+mB,EAC1B9oB,KAAKg8B,aAAaj6B,EAAM+mB,GAAQ,KAAMmT,EAAGC,GAE7B,iBAAVn6B,GAAsBA,EAAMylB,SAAS,MACtCzlB,EAAMya,QAAQ,IAAK,IAAM,IAE5Byf,GAAKC,GAAKn6B,EAAQ,IAG3B65B,EAAA17B,UAAA8mB,UAAA,WACE,IAAMoV,EAAIp8B,KAAKg8B,aAAah8B,KAAK67B,aAAc,EAAG77B,KAAK8mB,QAAQnmB,OAAQX,KAAKgQ,KAAKtI,OACjF,OAAOslB,EAAAA,YACJ2H,WAAW,CAAC,EAAG30B,KAAKgQ,KAAKtI,QACzB6N,OAAOvV,KAAK8mB,SACZ1G,aAAagc,IAGlBR,EAAA17B,UAAAuvB,UAAA,WACE,IAAM2M,EAAIp8B,KAAKg8B,aAAah8B,KAAK67B,aAAc,EAAG77B,KAAKqvB,QAAQ1uB,OAAQX,KAAKgQ,KAAKzI,QACjF,OAAOylB,EAAAA,YACJ2H,WAAW,CAAC30B,KAAKgQ,KAAKzI,OAAQ,IAC9BgO,OAAOvV,KAAKqvB,SACZjP,aAAagc,IAGlBR,EAAA17B,UAAA67B,SAAA,WAAA,IAAAvyB,EAAAxJ,KACQ87B,EAAQ,GAed,OAbA97B,KAAK8mB,QAAQ9O,KAAI,SAAA8M,GACftb,EAAK6lB,QAAQrX,KAAI,SAAAqkB,GACfP,EAAM15B,KAAK,CACTgQ,EAAG5I,EAAK6U,OAAOyG,GACf5S,EAAG1I,EAAKiV,OAAO4d,GACfC,GAAI,EACJ50B,MAAO8B,EAAK6U,OAAO7J,YACnBjN,OAAQiC,EAAKiV,OAAOjK,YACpBwB,KAAM,iCAKL8lB,GAGTF,EAAA17B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB+qB,EAAA17B,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKyN,UAAWzN,KAAKm2B,cAGlEyF,EAAA17B,UAAA0vB,iBAAA,WACE,MAAO,CACLniB,UAAWzN,KAAKyN,UAChB8H,OAAQvV,KAAKm2B,YACbvX,OAA2B,YAAnB5e,KAAKyN,UAA0BzN,KAAK4e,OAAS5e,KAAK4e,OAAO5K,MACjEgI,MAA0B,YAAnBhc,KAAKyN,UAA0BzN,KAAKkuB,iBAAclqB,EACzDsF,SAAUtJ,KAAKyrB,iBAInBmQ,EAAA17B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGP8uB,EAAA17B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGP8uB,EAAA17B,UAAA0xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtB,IAAMkY,EAAQ1oB,KAAK8P,QAChBkI,KAAI,SAAA1H,GAAK,OAAAA,EAAEI,UACXulB,OACA7O,QAAO,SAAA5mB,GACN,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,KAEjBhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,UAIvD1Q,KAAKuf,cAAajd,EAAOomB,GACzB1oB,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGlDqc,EAAA17B,UAAA4xB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAOxR,OAAOa,OAAO,GAAIyb,GAC3BiJ,IACF/T,EAAKN,OAASqU,EAAMvU,MAGtBxQ,KAAKuf,cAAgBvf,KAAKuf,cAAc6H,QAAO,SAAA5mB,GAC7C,OAAIs0B,EACKt0B,EAAE+P,QAAUS,EAAKR,OAEfhQ,EAAEgQ,OAASQ,EAAKR,MAAQhQ,EAAEkQ,SAAWM,EAAKN,WAIvD1Q,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAzQ3Cze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DA9BH6J,EAAgB96B,EAAA,CArE5B2J,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAU,qhEA+DViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtB8wB,IAAyB1sB,iBC3EtC,SAAAqtB,KAA4B,OAAfA,EAAaz7B,EAAA,CALzB8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACqiB,GAAsBG,GAAyBK,IAC9D5iB,QAAS,CAACoiB,GAAsBG,GAAyBK,OAE9CW,oBC4CX,SAAAC,EAAoBh5B,GAAAxD,KAAAwD,QAAAA,EARXxD,KAAAgW,KAAe,OACfhW,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAEvBzM,KAAA+gB,aAAuB,EA0BzB,OArBEyb,EAAAt8B,UAAA0M,YAAA,SAAYC,GACL7M,KAAK+gB,YAIR/gB,KAAKohB,gBAHLphB,KAAK+gB,aAAc,EACnB/gB,KAAKy8B,YAAcz8B,KAAKyhB,OAM5B+a,EAAAt8B,UAAAkhB,aAAA,WACE,IAAMG,EAAOhS,EAAAA,OAAOvP,KAAKwD,QAAQC,eAAe8L,OAAO,SAEnDvP,KAAKuM,WACPgV,EACGvT,aACApH,SAAS,KACT4a,KAAK,IAAKxhB,KAAKyhB,MAElBF,EAAKC,KAAK,IAAKxhB,KAAKyhB,gDApBKtX,EAAAA,cAXpBrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAPU8uB,EAAa17B,EAAA,CA9BzB2J,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAU,0MAUViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJyuB,gBAAiB,IACjBC,iBAAkB,MAEpBxuB,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJ0uB,iBAAkB,aAOjBH,qBCoIb,SAAAI,IAAA,IAAApzB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAUzBjiB,EAAA2J,eAAyB,EACzB3J,EAAA4kB,MAAaC,EAAAA,YACb7kB,EAAA+V,cAAuB,GAGvB/V,EAAA8kB,gBAA0B,EAC1B9kB,EAAA+kB,gBAA0B,EAC1B/kB,EAAAglB,kBAA4B,EAC5BhlB,EAAAilB,mBAA6B,GAC7BjlB,EAAAklB,mBAA6B,GAK7BllB,EAAAmlB,cAAwB,EACxBnlB,EAAAgQ,iBAA2B,EAC3BhQ,EAAA4N,cAAwB,EAExB5N,EAAA2N,eAAyB,EAMxB3N,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAmB9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,EAKrB1hB,EAAAolB,eAAyB,GAKzBplB,EAAAqlB,gBAA0B,KAuQ5B,OA7UwC/uB,EAAA88B,EAAAxwB,GAwEtCwwB,EAAA18B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGnBzrB,KAAKmvB,WACPnvB,KAAKgQ,KAAKzI,QAAUvH,KAAK4uB,eAAiB5uB,KAAK6R,OAAO,GAAK7R,KAAK6uB,iBAGlE7uB,KAAK8mB,QAAU9mB,KAAK+mB,aAChB/mB,KAAKovB,iBACPpvB,KAAK8mB,QAAU9mB,KAAKovB,gBAGtBpvB,KAAKqvB,QAAUrvB,KAAKsvB,aACpBtvB,KAAKuvB,aAAevvB,KAAKwvB,kBAEzBxvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,OACrD1H,KAAKye,OAASze,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAKgQ,KAAKzI,QAErDvH,KAAK0vB,iBAEL1vB,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,IAEnE7R,KAAK6vB,WAAa,OAAS5S,KAAKtI,WAChC3U,KAAK8vB,SAAW,QAAQ9vB,KAAK6vB,WAAU,KAGzC+M,EAAA18B,UAAAwvB,eAAA,WACM1vB,KAAKmvB,WACPnvB,KAAK+vB,cAAgB/vB,KAAKgQ,KAAKtI,MAC/B1H,KAAKgwB,gBAAkBhwB,KAAK+mB,aAC5B/mB,KAAKiwB,eAAiBjwB,KAAKgnB,UAAUhnB,KAAKgwB,gBAAiBhwB,KAAK+vB,eAChE/vB,KAAKkwB,eAAiBlwB,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAK4uB,gBACxD5uB,KAAKmwB,kBAAoB,aAAanwB,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,MAI/E+qB,EAAA18B,UAAA6mB,WAAA,WACE,IAAIM,EAASkG,GAAuBvtB,KAAK8P,SAEzC9P,KAAKyN,UAAYqgB,GAAazG,GAC9B,IAMItS,EACAzC,EAPAiD,EAAS,GAgCb,MA9BuB,WAAnBvV,KAAKyN,YACP4Z,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,OAKX,SAAnBnlB,KAAKyN,WAA2C,WAAnBzN,KAAKyN,YACpCsH,EAAM/U,KAAKowB,UAAYpwB,KAAKowB,UAAY/iB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAEpD/U,EAAMtS,KAAKqwB,UAAYrwB,KAAKqwB,UAAYhjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,KAG/B,SAAnBrnB,KAAKyN,WACP8H,EAAS,CAAC,IAAIlP,KAAK0O,GAAM,IAAI1O,KAAKiM,IAClCtS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAC/B,IAAMixB,EAAQD,EAAEE,UACVC,EAAQnxB,EAAEkxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnBxwB,KAAKyN,WACd8H,EAAS,CAACR,EAAKzC,GAEftS,KAAK0lB,KAAOpjB,EAAI+kB,GAAQiJ,MAAK,SAACC,EAAGhxB,GAAM,OAAAgxB,EAAIhxB,OAE3CgW,EAAS8R,EACTrnB,KAAK0lB,KAAO2B,GAGP9R,GAGTqnB,EAAA18B,UAAAovB,WAAA,uBACQ/Z,EAAS,OACf,IAAsB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAnW,OAAA,EAAA1P,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACNwT,EAAO3J,QAAQtM,EAAEyC,OAAS,GAC5BwT,EAAOnT,KAAK9C,EAAEyC,YAEFiC,IAAV1E,EAAEyV,MACJ/U,KAAK68B,UAAW,EACZtnB,EAAO3J,QAAQtM,EAAEyV,KAAO,GAC1BQ,EAAOnT,KAAK9C,EAAEyV,WAGJ/Q,IAAV1E,EAAEgT,MACJtS,KAAK68B,UAAW,EACZtnB,EAAO3J,QAAQtM,EAAEgT,KAAO,GAC1BiD,EAAOnT,KAAK9C,EAAEgT,2MAMtB,IAAM+U,EAAM/kB,EAAOiT,GASnB,OARKvV,KAAK2wB,WACRtJ,EAAOjlB,KAAK,GAOP,CAJKpC,KAAK4wB,UAAY5wB,KAAK4wB,UAAYvjB,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IAE9CrnB,KAAK6wB,UAAY7wB,KAAK6wB,UAAYxjB,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,MAK5DuV,EAAA18B,UAAAsvB,gBAAA,WACE,OAAOxvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjCosB,EAAA18B,UAAA8mB,UAAA,SAAUzR,EAAQ7N,GAChB,IAAIsM,EAqBJ,MAnBuB,SAAnBhU,KAAKyN,UACPuG,EAAQyT,EAAAA,YACL9I,MAAM,CAAC,EAAGjX,IACV6N,OAAOA,GACkB,WAAnBvV,KAAKyN,WACduG,EAAQ0T,EAAAA,cACL/I,MAAM,CAAC,EAAGjX,IACV6N,OAAOA,GAENvV,KAAK2uB,eACP3a,EAAQA,EAAM8c,SAEY,YAAnB9wB,KAAKyN,YACduG,EAAQ2T,EAAAA,aACLhJ,MAAM,CAAC,EAAGjX,IACVwO,QAAQ,IACRX,OAAOA,IAGLvB,GAGT4oB,EAAA18B,UAAAuvB,UAAA,SAAUla,EAAQhO,GAChB,IAAMyM,EAAQ0T,EAAAA,cACX/I,MAAM,CAACpX,EAAQ,IACfgO,OAAOA,GAEV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5C4oB,EAAA18B,UAAAkxB,aAAA,SAAa7b,GACXvV,KAAKovB,eAAiB7Z,EACtBvV,KAAK8mB,QAAU9mB,KAAKovB,eACpBpvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS9mB,KAAKgQ,KAAKtI,QAGvDk1B,EAAA18B,UAAAmxB,sBAAA,SAAsBrgB,GACpBhR,KAAKsxB,gBAAkBtgB,EAAKjP,MAC5B/B,KAAKuxB,iBAIPqL,EAAA18B,UAAAsxB,YAAA,WACExxB,KAAKsxB,gBAAkB,KACvBtxB,KAAKuxB,iBAGPqL,EAAA18B,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB+rB,EAAA18B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MAGdosB,EAAA18B,UAAAyvB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApBvV,KAAKsP,WACEtP,KAAKuvB,aAELvvB,KAAKqvB,QAGhBrvB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3E2Q,EAAA18B,UAAA0vB,iBAAA,WACE,IAAM6B,EAAO,CACXhkB,UAAWzN,KAAKsP,WAChBsP,YAAQ5a,EACRuR,OAAQ,GACRyG,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,gBAUjB,MARuB,YAAnBgG,EAAKhkB,WACPgkB,EAAKlc,OAASvV,KAAKuvB,aACnBkC,EAAK7S,OAAS5e,KAAK4e,OACnB6S,EAAKzV,MAAQhc,KAAKkuB,cAElBuD,EAAKlc,OAASvV,KAAKqvB,QACnBoC,EAAK7S,OAAS5e,KAAK4e,OAAO5K,OAErByd,GAGTmL,EAAA18B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGP8vB,EAAA18B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGP8vB,EAAA18B,UAAA0xB,WAAA,SAAW5gB,GACThR,KAAKuxB,gBAEOvxB,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,UAEvC,IAIX/B,KAAKuf,cAAgB,CAACvO,GACtBhR,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlDqd,EAAA18B,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,SAGlD/B,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpDqd,EAAA18B,UAAAqxB,cAAA,mBACEvxB,KAAKuf,cAAajd,EAAOtC,KAAKuf,mBAC9B,IAAoB,IAAA9I,EAAAhV,EAAAzB,KAAKuf,eAAarO,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAnC,IAAMwd,EAAKpO,EAAAnP,MACd/B,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOud,EAAOuS,QAAS,uGAEhD7xB,KAAKuf,cAAgB,IA1Udze,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DACyBjxB,EAAA,CAAtCixB,EAAAA,aAAa,sEA+MdjxB,EAAA,CADC0J,EAAAA,aAAa,+CAvPHoyB,EAAkB97B,EAAA,CA1J9B2J,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAU,2hJAsIVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,8mDAOR0uB,IAA2B1tB,iBCpHxC,SAAA4tB,IAUW98B,KAAAuM,YAAsB,EA2IjC,OA/HEuwB,EAAA58B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPgwB,EAAA58B,UAAA4M,OAAA,WACE9M,KAAK+8B,kBAEL,IAAMlsB,EAAO7Q,KAAKg9B,SAASh9B,KAAK6Q,KAAKH,QAE/BusB,EAAUj9B,KAAKk9B,mBACrBl9B,KAAKyhB,KAAOwb,EAAQpsB,IAAS,GAE7B,IAAMssB,EAAUn9B,KAAKo9B,mBAGrB,GAFAp9B,KAAKqhB,SAAW8b,EAAQtsB,IAAS,GAE7B7Q,KAAK68B,SAAU,CACjB,IAAMle,EAAQ3e,KAAKq9B,oBACnBr9B,KAAKs9B,UAAY3e,EAAM9N,IAAS,GAGlC,GAAI7Q,KAAKghB,YAAa,CACpBhhB,KAAKiW,OAASjW,KAAKq7B,YACnB,IAAMhU,EAASrnB,KAAK6Q,KAAKH,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SACrCuQ,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,IAEpB/U,IADQjF,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,MAEtBrnB,KAAKiW,OAASjW,KAAK4e,OAAOC,SAASvM,SAGrCtS,KAAKiW,OAASjW,KAAK4e,OAAOC,SAAS7e,KAAK6Q,KAAKL,OAIjDssB,EAAA58B,UAAAg9B,iBAAA,WAAA,IAAA1zB,EAAAxJ,KACE,OAAOu9B,EAAAA,OACJnrB,GAAE,SAAA9S,GACD,IAAMiR,EAAQjR,EAAEkR,KAShB,MAPuB,SAAnBhH,EAAKiE,UACCjE,EAAK6U,OAAO9N,GACQ,WAAnB/G,EAAKiE,UACNjE,EAAK6U,OAAOC,OAAO/N,IAEnB/G,EAAK6U,OAAO9N,MAIvB2B,GAAE,SAAA5S,GAAK,OAAAkK,EAAKiV,OAAOnf,EAAEyC,UACrBqsB,MAAMpuB,KAAKouB,QAGhB0O,EAAA58B,UAAAm9B,kBAAA,WAAA,IAAA7zB,EAAAxJ,KACE,OAAOqzB,EAAAA,OACJjhB,GAAE,SAAA9S,GACD,IAAMiR,EAAQjR,EAAEkR,KAShB,MAPuB,SAAnBhH,EAAKiE,UACCjE,EAAK6U,OAAO9N,GACQ,WAAnB/G,EAAKiE,UACNjE,EAAK6U,OAAOC,OAAO/N,IAEnB/G,EAAK6U,OAAO9N,MAIvB+iB,IAAG,SAAAh0B,GAAK,OAAAkK,EAAKiV,OAAwB,iBAAVnf,EAAEyV,IAAmBzV,EAAEyV,IAAMzV,EAAEyC,UAC1D4V,IAAG,SAAArY,GAAK,OAAAkK,EAAKiV,OAAwB,iBAAVnf,EAAEgT,IAAmBhT,EAAEgT,IAAMhT,EAAEyC,UAC1DqsB,MAAMpuB,KAAKouB,QAGhB0O,EAAA58B,UAAAk9B,iBAAA,WAAA,IAAA5zB,EAAAxJ,KAME,OAAOqzB,EAAAA,OACJjhB,GANe,SAAA9S,GAChB,IAAMiR,EAAQjR,EAAEkR,KAChB,OAAOhH,EAAK6U,OAAO9N,MAKlB+iB,IAAG,WAAM,OAAA9pB,EAAKiV,OAAOE,QAAQ,MAC7BhH,IAAG,SAAArY,GAAK,OAAAkK,EAAKiV,OAAOnf,EAAEyC,UACtBqsB,MAAMpuB,KAAKouB,QAGhB0O,EAAA58B,UAAA88B,SAAA,SAASnsB,GASP,OAPEA,EADqB,WAAnB7Q,KAAKyN,UACA4kB,GAAWxhB,EAAM,QACI,SAAnB7Q,KAAKyN,UACPmlB,GAAW/hB,EAAM,QAEjB0hB,GAAa1hB,EAAM,OAAQ,MAAO7Q,KAAKqe,OAAO9I,WAMzDunB,EAAA58B,UAAA68B,gBAAA,WACE,GAA8B,WAA1B/8B,KAAK4e,OAAOnR,UAAwB,CACtCzN,KAAKghB,aAAc,EACnBhhB,KAAK0d,WAAa,OAAST,KAAKtI,WAChC3U,KAAKq7B,YAAc,QAAQr7B,KAAK0d,WAAU,IAC1C,IAAM2J,EAASrnB,KAAK6Q,KAAKH,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SACrCuQ,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,IAClBtS,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IACxBrnB,KAAKgf,cAAgBhf,KAAK4e,OAAOkO,uBAAuBxa,EAAKyC,GAC7D/U,KAAKw9B,kBAAoBx9B,KAAK4e,OAAOkO,uBAAuBxa,QAE5DtS,KAAKghB,aAAc,EACnBhhB,KAAKgf,mBAAgBhb,EACrBhE,KAAKw9B,uBAAoBx5B,GAI7B84B,EAAA58B,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SAK5BssB,EAAA58B,UAAAuzB,WAAA,SAAWnU,GACT,SAAKtf,KAAKuf,eAA+C,IAA9Bvf,KAAKuf,cAAc5e,cAI9BqD,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SAhJnB1P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CAVUyyB,EAAmBh8B,EAAA,CArD/B2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,41CAiDViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BgvB,oBChDb,SAAAW,KAA8B,OAAjBA,EAAe38B,EAAA,CAL3B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACyjB,GAAeI,GAAoBE,IAClD9jB,QAAS,CAACwjB,GAAeI,GAAoBE,OAElCW,MCSb,IAAMC,GAAQ,EAAIrwB,KAAK8H,GAkHvBwoB,GAAA,SAAAvxB,GAAA,SAAAuxB,IAAA,IAAAn0B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QAQzBjiB,EAAA2J,eAAyB,EACzB3J,EAAA4kB,MAAawP,EAAAA,oBACbp0B,EAAA+V,cAAuB,GAEvB/V,EAAAq0B,iBAA2B,IAC3Br0B,EAAA+kB,gBAA0B,EAC1B/kB,EAAAklB,mBAA6B,GAG7BllB,EAAAmlB,cAAwB,EACxBnlB,EAAAgQ,iBAA2B,EAC3BhQ,EAAAs0B,mBAA6B,EAC7Bt0B,EAAAsX,UAAoB,EACpBtX,EAAAu0B,cAAwB,EACxBv0B,EAAAw0B,WAAqB,EACrBx0B,EAAAy0B,cAAwB,GAEvBz0B,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAoB9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBrI,EAAAyhB,YAAsB,EACtBzhB,EAAA0hB,WAAqB,IAqSvB,OAxVyCprB,EAAA69B,EAAAvxB,GA0DvCuxB,EAAAz9B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKk+B,UAELl+B,KAAK85B,YACL95B,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B5vB,KAAKm+B,YAGPR,EAAAz9B,UAAAg+B,QAAA,WACEl+B,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdkZ,UAAW/qB,KAAK8uB,MAChB9D,UAAWhrB,KAAK+uB,MAChB9D,YAAajrB,KAAKirB,YAClBC,WAAYlrB,KAAKkrB,WACjBC,WAAYnrB,KAAKgvB,eACjB3D,WAAYrrB,KAAKivB,eACjB3iB,WAAYtM,KAAKkvB,OACjBliB,WAAYhN,KAAKsP,WACjBmc,eAAgBzrB,KAAKyrB,iBAGvB,IAAM2S,EAAY/wB,KAAKC,MAAMtN,KAAKgQ,KAAKtI,MAAQ,GACzC22B,EAAahxB,KAAKC,MAAMtN,KAAKgQ,KAAKzI,OAAS,GAE3C+2B,EAAet+B,KAAKs+B,YAAcjxB,KAAK0H,IAAIspB,EAAa,IAAKD,EAAY,KAEzEG,EAAUlxB,KAAKiF,IAAI,EAAG+rB,EAAaC,GAEzCt+B,KAAKw+B,UAASp+B,EAAAA,EAAA,GACTJ,KAAKgQ,MAAI,CACZtI,MAAO02B,IAGTp+B,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,KAAK5rB,KAAK6R,OAAO,GAAE,IAClE7R,KAAKy+B,eAAiB,gBAAgBF,EAAO,IAC7Cv+B,KAAK+V,YAAc/V,KAAKgQ,KAAKzI,OAAS,GACtCvH,KAAK0+B,cAAgB,aAAaN,EAAS,KAAKC,EAAU,KAG5DV,EAAAz9B,UAAA45B,UAAA,WACE,IAAM6E,EAAU3+B,KAAK4+B,aACrB5+B,KAAKyN,UAAYqgB,GAAa6Q,GAC9B3+B,KAAK8mB,QAAU9mB,KAAKovB,gBAAkBpvB,KAAK+mB,WAAW4X,GAEtD3+B,KAAKqvB,QAAUrvB,KAAKsvB,aACpBtvB,KAAKuvB,aAAevvB,KAAKwvB,kBAEzBxvB,KAAKqe,OAASre,KAAKgnB,UAAUhnB,KAAK8mB,QAAS4W,IAC3C19B,KAAKye,OAASze,KAAKyvB,UAAUzvB,KAAKqvB,QAASrvB,KAAKs+B,aAChDt+B,KAAK6+B,WAAa7+B,KAAKyvB,UAAUzvB,KAAKqvB,QAAQ5F,UAAWzpB,KAAKs+B,cAGhEX,EAAAz9B,UAAAi+B,SAAA,WAAA,IACMhqB,EADN3K,EAAAxJ,KAGImU,EADEnU,KAAK8+B,oBACM9+B,KAAK8+B,oBACT9+B,KAAKqe,OAAOlK,WACRnU,KAAKqe,OAAOlK,WAAWtT,MAAMb,KAAKqe,OAAQ,CAAC,IAE3C,SAAA/e,GACX,OCnQeyC,EDmQJzC,EClQe,kBAAzBqV,SAAS/T,KAAKmB,GDmQNzC,EAAEmR,qBAEJnR,EAAE8U,qBCtQMrS,GD0QnB,IAAMu8B,EAAct+B,KAAKs+B,YAGzBt+B,KAAK++B,WAAa/+B,KAAK8mB,QAAQ9O,KAAI,SAAA1Y,GACjC,IAAM0/B,EAAax1B,EAAK6U,OAAO/e,GACzB2/B,EAJE,IAIOX,GAAeU,EAAa3xB,KAAK8H,IAAM,EAAI,GACpD5E,EAAQ4D,EAAW7U,GAEnB4/B,EAAW,CAACZ,EAAcjxB,KAAK8xB,IAAIH,IAAcV,EAAcjxB,KAAK6H,IAAI8pB,IAE9E,MAAO,CACLI,YAAa,EACbd,YAAWA,EACXU,WAAUA,EACVK,SAAUL,EACVj9B,MAAOu8B,EACP/tB,MAAKA,EACL2uB,SAAQA,EACRI,IATU,CAACL,EARL,IAQaC,EAAS,QAgBhC,IAHA,IAGS1+B,EAAI,EAAGA,EAAIR,KAAK++B,WAAWp+B,OAAS,EAAGH,IAG9C,IAFA,IAAM+vB,EAAIvwB,KAAK++B,WAAWv+B,GAEjBmQ,EAAInQ,EAAI,EAAGmQ,EAAI3Q,KAAK++B,WAAWp+B,OAAQgQ,IAAK,CACnD,IAAMpR,EAAIS,KAAK++B,WAAWpuB,GAE1B,GAAIpR,EAAE+/B,IAAI,GAAK/O,EAAE+O,IAAI,GAAK,EAAG,CAE3B,IAAM59B,EAXQ,GAWU2L,KAAK2V,IAAIzjB,EAAE+/B,IAAI,GAAK/O,EAAE+O,IAAI,IAC9C59B,EAAI,IAENnC,EAAE+/B,IAAI,IAAMjyB,KAAKiK,KAAK/X,EAAE+/B,IAAI,IAAM59B,IAM1C1B,KAAKu/B,YAAcv/B,KAAK6+B,WAAWnsB,MAAMrF,KAAKC,MAAMtN,KAAKgQ,KAAKzI,OAAS,KAAKyQ,KAAI,SAAA1Y,GAAK,OAAAkK,EAAKiV,OAAOnf,OAGnGq+B,EAAAz9B,UAAA0+B,WAAA,uBACQvX,EAAS,OACf,IAAsB,IAAAnW,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAnW,OAAA,EAAA1P,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACLslB,EAAOG,SAASloB,EAAEkR,OACrB6W,EAAOjlB,KAAK9C,EAAEkR,2MAIpB,OAAO6W,GAGTsW,EAAAz9B,UAAA6mB,WAAA,SAAWM,GACT,YADS,IAAAA,IAAAA,EAASrnB,KAAK4+B,cACA,SAAnB5+B,KAAKyN,UAGA,CAFKJ,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IACZha,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,KAEI,WAAnBrnB,KAAKyN,WACd4Z,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,MAGzB,CAFK9X,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IACZha,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,MAGnBA,GAGTsW,EAAAz9B,UAAAs/B,WAAA,uBACQjqB,EAAS,OAEf,IAAsB,IAAArE,EAAAzP,EAAAzB,KAAK8P,SAAOsB,EAAAF,EAAApP,QAAAsP,EAAApP,KAAAoP,EAAAF,EAAApP,OAAE,CAA/B,IAAMgO,EAAOsB,EAAArP,UAChB,IAAgB,IAAAulB,GAAAgT,OAAA,EAAA74B,EAAAqO,EAAQY,SAAM6W,EAAAD,EAAAxlB,QAAAylB,EAAAvlB,KAAAulB,EAAAD,EAAAxlB,OAAE,CAA3B,IAAMxC,EAACioB,EAAAxlB,MACNwT,EAAO3J,QAAQtM,EAAEyC,OAAS,GAC5BwT,EAAOnT,KAAK9C,EAAEyC,YAEFiC,IAAV1E,EAAEyV,KACAQ,EAAO3J,QAAQtM,EAAEyV,KAAO,GAC1BQ,EAAOnT,KAAK9C,EAAEyV,UAGJ/Q,IAAV1E,EAAEgT,KACAiD,EAAO3J,QAAQtM,EAAEgT,KAAO,GAC1BiD,EAAOnT,KAAK9C,EAAEgT,0MAKtB,OAAOiD,GAGTooB,EAAAz9B,UAAAovB,WAAA,SAAW/Z,QAAA,IAAAA,IAAAA,EAASvV,KAAKw/B,cACvB,IAAIzqB,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQiT,IAChBjD,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAA,CAAKtC,KAAK+9B,eAAkBxoB,IAO5C,OALAR,EAAM1H,KAAKiF,IAAI,EAAGyC,GACb/U,KAAK2wB,YACR5b,EAAM1H,KAAK0H,IAAI,EAAGA,IAGb,CAACA,EAAKzC,IAGfqrB,EAAAz9B,UAAAsvB,gBAAA,WACE,OAAOxvB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjCmtB,EAAAz9B,UAAA8mB,UAAA,SAAUzR,EAAQ7N,GAChB,OAAQ1H,KAAKyN,WACX,IAAK,OACH,OAAOga,EAAAA,YACJ9I,MAAM,CAAC,EAAGjX,IACV6N,OAAOA,GACZ,IAAK,SACH,IAAMvB,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAGjX,IACV6N,OAAOA,GACV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,EAC5C,QACE,OAAO2T,EAAAA,aACJhJ,MAAM,CAAC,EAAGjX,EAAQg2B,GAAQnoB,EAAO5U,SACjCuV,QAAQ,GACRX,OAAOA,KAIhBooB,EAAAz9B,UAAAuvB,UAAA,SAAUla,EAAQhO,GAChB,IAAMyM,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAGpX,IACVgO,OAAOA,GAEV,OAAOvV,KAAK2uB,aAAe3a,EAAM8c,OAAS9c,GAG5C2pB,EAAAz9B,UAAAkf,QAAA,SAAQvO,EAAMH,GACRA,IACFG,EAAKH,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKkC,IAGnB8sB,EAAAz9B,UAAAyvB,UAAA,WACE,IAAMpa,EAA6B,YAApBvV,KAAKsP,WAA2BtP,KAAKuvB,aAAevvB,KAAKqvB,QAAQ5F,UAChFzpB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQrP,KAAKsP,WAAYiG,EAAQvV,KAAKisB,eAG3E0R,EAAAz9B,UAAA0vB,iBAAA,WACE,MAAwB,YAApB5vB,KAAKsP,WACA,CACL7B,UAAWzN,KAAKsP,WAChBsP,OAAQ5e,KAAK4e,OACbrJ,OAAQvV,KAAKuvB,aACbvT,MAAOhc,KAAKkuB,YACZ5kB,SAAUtJ,KAAKyrB,gBAGZ,CACLhe,UAAWzN,KAAKsP,WAChBsP,OAAQ5e,KAAK4e,OAAO5K,MACpBuB,OAAQvV,KAAKqvB,QACbrT,WAAOhY,EACPsF,SAAUtJ,KAAKyrB,iBAInBkS,EAAAz9B,UAAAwxB,iBAAA,SAAiB3nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKkrB,WAAaxjB,EAClB1H,KAAK8M,UAGP6wB,EAAAz9B,UAAAyxB,kBAAA,SAAkB5nB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKirB,YAAc1jB,EACnBvH,KAAK8M,UAGP6wB,EAAAz9B,UAAA0xB,WAAA,SAAW5gB,GACGhR,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,UAEvC,IAGX/B,KAAKuf,cAAgBvf,KAAK89B,kBAAiBx7B,EAAA,CAAI0O,GAAShR,KAAKuf,eAAiBvf,KAAKuf,cACnFvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlDoe,EAAAz9B,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,SAGlD/B,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpDoe,EAAAz9B,UAAAqxB,cAAA,mBACEvxB,KAAKuf,cAAajd,EAAOtC,KAAKuf,mBAC9B,IAAoB,IAAA9I,EAAAhV,EAAAzB,KAAKuf,eAAarO,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAnC,IAAMwd,EAAKpO,EAAAnP,MACd/B,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOud,EAAOuS,QAAS,uGAEhD7xB,KAAKuf,cAAgB,IAGvBoe,EAAAz9B,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKR,MArVL1P,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,iDACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DA/BH4L,EAAmB78B,EAAA,CAhH/B2J,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAU,ijGA4FVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,i4EAORyvB,GAAb,CAAyCzuB,iBEnEzC,SAAAuwB,IAUWz/B,KAAAwZ,iBAA2B,EAE3BxZ,KAAA8gB,UAAoB,EAEpB9gB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aAI3BzM,KAAA0/B,aAAuB,EAoIzB,OAtHED,EAAAv/B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP2yB,EAAAv/B,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEA,KAAK+8B,kBAEL,IAAMQ,EAAOv9B,KAAKk9B,mBAEZrsB,EAAO7Q,KAAKg9B,SAASh9B,KAAK6Q,KAAKH,QAE/ByN,EAAane,KAAK6Q,KAAKL,KACvBmvB,EAA4C,WAA1B3/B,KAAK4e,OAAOnR,UAC9BsH,EAAM/U,KAAKye,OAAOlJ,SAAS,GACjCvV,KAAK4/B,YAAc5/B,KAAK4e,OAAOC,SAAS8gB,EAAkB5qB,EAAMoJ,GAEhEne,KAAKyhB,KAAO8b,EAAK1sB,IAAS,GAE1B7Q,KAAK26B,QAAU9pB,EAAKmH,KAAI,SAAA1Y,GACtB,IAAMixB,EAAI/mB,EAAKq2B,SAASvgC,GAClB8B,EAAIoI,EAAK2qB,UAAU70B,GACnByC,EAAQzC,EAAEyC,MAEVwc,EAAQ/U,EAAKoV,OAAOC,SAAS8gB,EAAkBtyB,KAAK2V,IAAIjhB,GAASoc,GAQvE,MAAO,CACLtN,KAPYrR,OAAOa,OAAO,GAAIf,EAAG,CACjCoR,OAAQyN,EACRpc,MAAKA,EACLyO,KAAMlR,EAAEkR,OAKR0N,GAAI9c,EAAIiM,KAAK8xB,IAAI5O,GACjB/R,IAAKpd,EAAIiM,KAAK6H,IAAIqb,GAClBxuB,MAAKA,EACLwc,MAAKA,EACLhO,MAAOjR,EAAEkR,SAIbxQ,KAAK8/B,OAAS9/B,KAAKqf,SAASrf,KAAK6Q,MACjC7Q,KAAK+/B,SAAW//B,KAAKyzB,WAAWzzB,KAAK6Q,MACrC7Q,KAAK63B,YAAc73B,KAAK63B,aAAW,SAAK12B,GAAK,OAAAqI,EAAKw2B,mBAAmB7+B,KAGvEs+B,EAAAv/B,UAAA2/B,SAAA,SAASvgC,GACP,IAAMiR,EAAQjR,EAAEkR,KAChB,MAAuB,SAAnBxQ,KAAKyN,UACAzN,KAAKqe,OAAO9N,GACS,WAAnBvQ,KAAKyN,UACPzN,KAAKqe,OAAOC,OAAO/N,IAErBvQ,KAAKqe,OAAO9N,IAGrBkvB,EAAAv/B,UAAAi0B,UAAA,SAAU70B,GACR,OAAOU,KAAKye,OAAOnf,EAAEyC,QAGvB09B,EAAAv/B,UAAAg9B,iBAAA,WAAA,IAAA1zB,EAAAxJ,KACE,OAAOigC,EAAAA,aACJ5rB,OAAM,SAAA/U,GAAK,OAAAkK,EAAKq2B,SAASvgC,MACzByf,QAAO,SAAAzf,GAAK,OAAAkK,EAAK2qB,UAAU70B,MAC3B8uB,MAAMpuB,KAAKouB,QAGhBqR,EAAAv/B,UAAA88B,SAAA,SAASnsB,GACP,MAAuB,WAAnB7Q,KAAKyN,UACA4kB,GAAWxhB,EAAM,QACI,SAAnB7Q,KAAKyN,UACPmlB,GAAW/hB,EAAM,QAEnB0hB,GAAa1hB,EAAM,OAAQ,MAAO7Q,KAAKqe,OAAO9I,WAGvDkqB,EAAAv/B,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SAK5BivB,EAAAv/B,UAAAuzB,WAAA,SAAWnU,GACT,SAAKtf,KAAKuf,eAA+C,IAA9Bvf,KAAKuf,cAAc5e,cAI9BqD,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,SAK5BivB,EAAAv/B,UAAA8/B,mBAAA,SAAmBj2B,OAAEwG,EAAAxG,EAAAwG,MAAOxO,EAAAgI,EAAAhI,MAC1B,MAAO,uCACyBwa,EAAYvc,KAAK6Q,KAAKL,MAAK,MAAM+L,EAAYhM,GAAM,4CACrDxO,EAAMqS,iBAAgB,iBAItDqrB,EAAAv/B,UAAA68B,gBAAA,WAGE,GAFA/8B,KAAKghB,YAAchhB,KAAK8gB,UAAsC,WAA1B9gB,KAAK4e,OAAOnR,UAE3CzN,KAAKghB,YAOV,GAHAhhB,KAAK0d,WAAa,OAAST,KAAKtI,WAChC3U,KAAKq7B,YAAc,QAAQr7B,KAAK0d,WAAU,IAEZ,WAA1B1d,KAAK4e,OAAOnR,UAAwB,CACtC,IAAM4Z,EAASrnB,KAAK6Q,KAAKH,OAAOsH,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SACrCuQ,EAAMjF,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,IAClBtS,EAAM1H,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IACxBrnB,KAAKgf,cAAgBhf,KAAK4e,OAAOkO,uBAAuBxa,EAAKyC,QAE7D/U,KAAKgf,mBAAgBhb,GAtJhBlD,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAlBU+xB,EAAoB3+B,EAAA,CAnDhC2J,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAU,g/CA+CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B2xB,qBCHb,SAAAS,IAAA,IAAA12B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA+V,cAAuB,GACvB/V,EAAAgQ,iBAA2B,EAE3BhQ,EAAA+G,MAAgB,QAEf/G,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAY9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,MAgFxB,OApG+C/R,EAAAogC,EAAA9zB,GA0B7C8zB,EAAAhgC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAqB,EAAb1H,KAAK0H,MAAa,GAC1BH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,SAGhB7R,KAAKqQ,cAELrQ,KAAKuV,OAASvV,KAAKk5B,YACnBl5B,KAAK2vB,YAEL,IAAM/D,EAAU5rB,KAAKgQ,KAAKtI,MAAQ,EAC5B62B,EAAUv+B,KAAK6R,OAAO,GAAK7R,KAAKgQ,KAAKzI,OAAS,EACpDvH,KAAKwN,YAAcxN,KAAK0H,MAAQ1H,KAAKgQ,KAAKtI,MAAQ1H,KAAK6R,OAAO,GAE9D7R,KAAKs+B,YAAcjxB,KAAK0H,IAAI/U,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,QAAU,IACjEvH,KAAKo/B,YAAiC,IAAnBp/B,KAAKs+B,YAExBt+B,KAAKgS,UAAY,aAAa4Z,EAAO,MAAM2S,EAAO,KAGpD2B,EAAAhgC,UAAAg5B,UAAA,WACE,OAAOl5B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEiR,UAGjC2vB,EAAAhgC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBqvB,EAAAhgC,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQ,UAAWrP,KAAKuV,OAAQvV,KAAKisB,eAG1EiU,EAAAhgC,UAAA0xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAIfxQ,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,WAElE,IAIX1Q,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlD2gB,EAAAhgC,UAAA4xB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAI3B,IAAM7E,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,UAG7E1Q,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAjG3Cze,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,qCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAYLjxB,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,oDAxBU61B,EAAyBp/B,EAAA,CAhDrC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,ssDA2CVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,8sDAE9BoyB,IAAkChxB,iBCjB7C,SAAAixB,IATSngC,KAAAuM,YAAsB,EACtBvM,KAAAg+B,WAAqB,EACrBh+B,KAAAi+B,cAAwB,GAKhBj+B,KAAAogC,KAAO,uBAAuBC,KAAKC,UAAUC,WAG5DvgC,KAAKqS,UAAYA,EAwDrB,OArDE8tB,EAAAjgC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPqzB,EAAAjgC,UAAA4M,OAAA,WACE,IAAI0zB,EAAcxgC,KAAK+e,OACnB/e,KAAKygC,gBACPD,EAAexgC,KAAK+e,OAAS/e,KAAK+B,MAAS/B,KAAKsS,KAGlD,IAKMouB,EALWC,EAAAA,MACdvB,YAAYoB,GACZlC,YAAYkC,GAGWI,SAAS5gC,KAAK6Q,MAEpCmD,EAAQhU,KAAK6Q,KAAKyuB,IAAI,GAAKoB,EAAS,GACf,IAArB1gC,KAAK6Q,KAAKyuB,IAAI,IAA4B,IAAhBoB,EAAS,KACrC1sB,EAAQ,GAEV,IAAM6sB,EAAW,CAAC7sB,EAAQ0sB,EAAS,GAAI1sB,EAAQ0sB,EAAS,IAExD1gC,KAAKu9B,KAAO,IAAImD,EAAQ,IAAIG,EAAQ,IAAI7gC,KAAK6Q,KAAKyuB,KAGpD9/B,OAAAgC,eAAI2+B,EAAAjgC,UAAA,QAAK,KAAT,WACE,OAAOF,KAAK6Q,KAAKyuB,IAAI,oCAGvB9/B,OAAAgC,eAAI2+B,EAAAjgC,UAAA,QAAK,KAAT,WACE,OAAOF,KAAK6Q,KAAKyuB,IAAI,oCAGvB9/B,OAAAgC,eAAI2+B,EAAAjgC,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKogC,KAAO,KAAO,eAAepgC,KAAK8gC,MAAK,MAAM9gC,KAAK+gC,MAAK,0CAGrEvhC,OAAAgC,eAAI2+B,EAAAjgC,UAAA,gBAAa,KAAjB,WACE,OAAQF,KAAKogC,KAAc,aAAapgC,KAAK8gC,MAAK,IAAI9gC,KAAK+gC,MAAK,IAA5C,sCAGtBvhC,OAAAgC,eAAI2+B,EAAAjgC,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKogC,OAASpgC,KAAKuM,WAAa,KAAO,mDAGhD4zB,EAAAjgC,UAAA6R,WAAA,WACE,OAAO/R,KAAKghC,SAAShhC,KAAK6Q,MAAQxD,KAAK8H,GAAK,QAAU,OAGxDgrB,EAAAjgC,UAAA8gC,SAAA,SAAS1hC,GACP,OAAOA,EAAE0/B,YAAc1/B,EAAE+/B,SAAW//B,EAAE0/B,YAAc,GAvE7Cl+B,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CAVU81B,EAAiBr/B,EAAA,CAzB7B2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,8nBAqBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BqyB,oBC8CX,SAAAc,EAAYz9B,GA5BHxD,KAAAg/B,WAAqB,EACrBh/B,KAAAq/B,SAA6B,EAAVhyB,KAAK8H,GAGxBnV,KAAAkhC,aAAuB,EAIvBlhC,KAAAygC,eAAyB,EACzBzgC,KAAA8gB,UAAoB,EACpB9gB,KAAAmO,SAAmB,EACnBnO,KAAAmhC,eAAyB,EACzBnhC,KAAAqf,UAAoB,EAEnBrf,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aACjBzM,KAAAohC,SAAW,IAAI30B,EAAAA,aAQzBzM,KAAA+gB,aAAuB,EAIrB/gB,KAAKwD,QAAUA,EAAQC,cA+G3B,OA5GEw9B,EAAA/gC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPm0B,EAAA/gC,UAAAihB,YAAA,WACE,OAAOnhB,KAAK8gB,SAAW9gB,KAAK2d,aAAe3d,KAAKgW,MAGlDirB,EAAA/gC,UAAAmhC,iBAAA,WACE,OAAOrhC,KAAKmhC,cAAgB,OAAS,QAGvCF,EAAA/gC,UAAA4M,OAAA,WACE,IAAMw0B,EAAOthC,KAAKuhC,eAClBvhC,KAAK4gB,aAAe,GACpB5gB,KAAKwhC,iBAAmB,aAAevkB,KAAKtI,WAC5C3U,KAAK2d,aAAe,QAAQ3d,KAAKwhC,iBAAgB,IAE7CxhC,KAAKmO,QACHnO,KAAK+gB,YACP/gB,KAAKyhC,mBAELzhC,KAAKihB,gBACLjhB,KAAK+gB,aAAc,GAGrB/gB,KAAKyhB,KAAO6f,EAAKtC,WAAWh/B,KAAKg/B,YAAYK,SAASr/B,KAAKq/B,SAA/CiC,IAIhBL,EAAA/gC,UAAAqhC,aAAA,WACE,IAAIjD,EAAct+B,KAAKs+B,YAKvB,OAJIt+B,KAAKygC,eAAsC,IAArBzgC,KAAKo/B,cAC7Bd,EAAet+B,KAAKs+B,YAAct+B,KAAK+B,MAAS/B,KAAKsS,KAGhDquB,EAAAA,MACJvB,YAAYp/B,KAAKo/B,aACjBd,YAAYA,GACZ4C,aAAalhC,KAAKkhC,eAGvBD,EAAA/gC,UAAA+gB,cAAA,WACE,IAAMM,EAAOhS,EAAAA,OAAOvP,KAAKwD,SACtBk+B,UAAU,QACV7wB,KAAK,CAAC,CAAEmuB,WAAYh/B,KAAKg/B,WAAYK,SAAUr/B,KAAKq/B,YAEjDiC,EAAOthC,KAAKuhC,eAElBhgB,EACGvT,aACA2zB,UAAU,KAAK,SAASriC,GACjBU,KAAM4hC,SAAiB5hC,KAAM4hC,UAAYtiC,EAC/C,IAAMuiC,EAAUriC,OAAOa,OAAO,GAAIf,GAClCuiC,EAAQxC,SAAWwC,EAAQ7C,WAC3B,IAAM8C,EAAeC,EAAAA,YAAYF,EAASA,GAE1C,OADM7hC,KAAM4hC,SAAWE,EAAa,GAC7B,SAASxhC,GACd,OAAOghC,EAAKQ,EAAaxhC,QAG5B0N,aACApH,SAAS,KACT+6B,UAAU,KAAK,SAASriC,GACjBU,KAAM4hC,SAAiB5hC,KAAM4hC,UAAYtiC,EAC/C,IAAMwiC,EAAeC,EAAAA,YAAkB/hC,KAAM4hC,SAAUtiC,GAEvD,OADMU,KAAM4hC,SAAWE,EAAa,GAC7B,SAASxhC,GACd,OAAOghC,EAAKQ,EAAaxhC,SAKjC2gC,EAAA/gC,UAAAuhC,gBAAA,WACE,IAAMlgB,EAAOhS,EAAAA,OAAOvP,KAAKwD,SACtBk+B,UAAU,QACV7wB,KAAK,CAAC,CAAEmuB,WAAYh/B,KAAKg/B,WAAYK,SAAUr/B,KAAKq/B,YAEjDiC,EAAOthC,KAAKuhC,eAElBhgB,EACGvT,aACApH,SAAS,KACT+6B,UAAU,KAAK,SAASriC,GACjBU,KAAM4hC,SAAiB5hC,KAAM4hC,UAAYtiC,EAC/C,IAAMwiC,EAAeC,EAAAA,YAAkB/hC,KAAM4hC,SAAUtiC,GAEvD,OADMU,KAAM4hC,SAAWE,EAAa,GAC7B,SAASxhC,GACd,OAAOghC,EAAKQ,EAAaxhC,SAKjC2gC,EAAA/gC,UAAAkf,QAAA,WAAA,IAAA5V,EAAAxJ,KACEwG,aAAaxG,KAAKgiC,UAClBhiC,KAAKgiC,SAAWt7B,YAAW,WAAM,OAAA8C,EAAK+F,OAAOZ,KAAKnF,EAAKqH,QAAO,MAGhEowB,EAAA/gC,UAAA+hC,WAAA,SAAWnmB,GACTA,EAAMomB,iBACNpmB,EAAMqmB,kBACN37B,aAAaxG,KAAKgiC,UAElBhiC,KAAKohC,SAASzyB,KAAK,CACjBkC,KAAM7Q,KAAK6Q,KACXuxB,YAAatmB,8CA7GI3R,EAAAA,cA7BZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,yCAnBUuzB,EAAengC,EAAA,CA5B3B2J,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAU,gqBAwBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BmzB,qBCYb,SAAAoB,IAAA,IAAA74B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA84B,QAAS,EACT94B,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QACzBjiB,EAAAi3B,eAAgB,EAChBj3B,EAAA+4B,UAAW,EACX/4B,EAAAg5B,SAAW,IAEXh5B,EAAA+V,cAAuB,GACvB/V,EAAAgQ,iBAA2B,EAE3BhQ,EAAAi5B,YAAsB,EACtBj5B,EAAAk5B,eAAyB,GAExBl5B,EAAA43B,SAAW,IAAI30B,EAAAA,aAGfjD,EAAA+F,OAAS,IAAI9C,EAAAA,aACbjD,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,eA2HhD,OA/IuC3M,EAAAuiC,EAAAj2B,GAiCrCi2B,EAAAniC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAERA,KAAKsiC,QAAUtiC,KAAK2iC,0BACtB3iC,KAAK8qB,QAAU,CAAC,GAAI,GAAI,GAAI,KAClB9qB,KAAKsiC,QAAUtiC,KAAK2iC,4BAE9B3iC,KAAK8qB,QAAU,CAAC,GAAI,GAAI,GAAI,KAG9B9qB,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK8qB,QACdxe,WAAYtM,KAAKkvB,OACjBzD,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKqQ,cAEL,IAAMub,EAAU5rB,KAAK8qB,QAAQ,GAAK9qB,KAAKgQ,KAAKtI,MAAQ,EAC9C62B,EAAUv+B,KAAK8qB,QAAQ,GAAK9qB,KAAKgQ,KAAKzI,OAAS,EACrDvH,KAAK4iC,YAAc,aAAahX,EAAO,KAAK2S,EAAO,IACnDv+B,KAAKs+B,YAAcjxB,KAAK0H,IAAI/U,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,QACnDvH,KAAKsiC,OAEPtiC,KAAKs+B,aAAe,EAEpBt+B,KAAKs+B,aAAe,EAEtBt+B,KAAKo/B,YAAc,EACfp/B,KAAKuiC,WACPviC,KAAKo/B,YAAcp/B,KAAKs+B,aAAe,EAAIt+B,KAAKwiC,WAGlDxiC,KAAKuV,OAASvV,KAAKk5B,YAGnBl5B,KAAK6Q,KAAO7Q,KAAK8P,QAAQwgB,MAAK,SAACC,EAAGhxB,GAChC,OAAOiK,EAAK+L,OAAO3J,QAAQ2kB,EAAE/f,MAAQhH,EAAK+L,OAAO3J,QAAQrM,EAAEiR,SAG7DxQ,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,oBAG5ByS,EAAAniC,UAAAg5B,UAAA,WACE,OAAOl5B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEiR,UAGjC8xB,EAAAniC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBwxB,EAAAniC,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQ,UAAWrP,KAAKuV,OAAQvV,KAAKisB,eAG1EoW,EAAAniC,UAAA0vB,iBAAA,WACE,MAAO,CACLniB,UAAW,UACX8H,OAAQvV,KAAKuV,OACbqJ,OAAQ5e,KAAK4e,OACb5C,MAAOhc,KAAKkuB,YACZ5kB,SAAUtJ,KAAKyrB,iBAInB4W,EAAAniC,UAAA0xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAIfxQ,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,WAElE,IAIX1Q,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlD8iB,EAAAniC,UAAA4xB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAI3B,IAAM7E,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,UAG7E1Q,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAG5C8iB,EAAAniC,UAAAyiC,wBAAR,WACE,OAAQ3iC,KAAK8qB,SAAW9qB,KAAK8qB,QAAQnqB,QAAU,GA5IxCG,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,2CACSvJ,EAAA,CAAT4M,EAAAA,yCAEQ5M,EAAA,CAARuJ,EAAAA,uCACSvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAtBHsQ,EAAiBvhC,EAAA,CA3C7B2J,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAU,oxCAsCVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,6oEAE9Bu0B,IAA0BnzB,YCxDvB2zB,GAAS7yB,EAAM8yB,EAAKC,GAClC,IAAIC,EAAO,EACPC,EAAOH,EACLp7B,EAAQsI,EAAKtI,MAEnB,GAAIA,EAAQq7B,EACV,KAAOr7B,EAAQu7B,EAAOF,GACpBC,GAAQ,EACRC,EAAO51B,KAAK61B,KAAKJ,EAAME,GAI3B,MAAO,CAACC,EAAMD,GAGhB,SAAgBG,GAAWnzB,EAAMa,EAAMkyB,EAAUK,GAU/C,IATA,IAAM/kB,EAAc2O,EAAAA,YACdvO,EAAcuO,EAAAA,YACdtlB,EAAQsI,EAAKtI,MACbH,EAASyI,EAAKzI,OAEdwC,EAAA9H,EAAA4gC,GAAA7yB,EAAAa,EAAAlQ,OAAAoiC,GAAA,GAACpX,EAAA5hB,EAAA,GAASi5B,EAAAj5B,EAAA,GAEV+c,EAAU,GACVuI,EAAU,GACP7uB,EAAI,EAAGA,EAAIwiC,EAAMxiC,IACxB6uB,EAAQjtB,KAAK5B,GAEf,IAASA,EAAI,EAAGA,EAAImrB,EAASnrB,IAC3BsmB,EAAQ1kB,KAAK5B,GAEf6d,EAAO9I,OAAOuR,GACdrI,EAAOlJ,OAAO8Z,GAEdhR,EAAOsW,WAAW,CAAC,EAAGjtB,GAAQ,IAC9B+W,EAAOkW,WAAW,CAAC,EAAGptB,GAAS,IAE/B,IAAM87B,EAAM,GACNhZ,EAAQ+Y,GAA6CvyB,EAwB5CmH,KAAI,SAAA1Y,GAAK,OAACA,EAAIA,EAAEyC,MAAQ,KAAIooB,QAAO,SAACC,EAAKtH,GAAQ,OAAAsH,EAAMtH,IAAK,GAvBrEwgB,EAAYjlB,EAAO7J,YACnB+uB,EAAa9kB,EAAOjK,YAE1B,IAAShU,EAAI,EAAGA,EAAIqQ,EAAKlQ,OAAQH,IAC/B6iC,EAAI7iC,GAAK,GACT6iC,EAAI7iC,GAAGqQ,KAAO,CACZL,KAAMK,EAAKrQ,GAAKqQ,EAAKrQ,GAAGgQ,KAAO,GAC/BzO,MAAO8O,EAAKrQ,GAAKqQ,EAAKrQ,GAAGuB,WAAQiC,EACjCw/B,MAAO3yB,EAAKrQ,GAAKqQ,EAAKrQ,GAAGgjC,WAAQx/B,EACjCuM,MAAOM,EAAKrQ,GAAKqQ,EAAKrQ,GAAG+P,MAAQ,IAEnC8yB,EAAI7iC,GAAG4R,EAAIiM,EAAO7d,EAAImrB,GACtB0X,EAAI7iC,GAAG0R,EAAIuM,EAAOpR,KAAKC,MAAM9M,EAAImrB,IACjC0X,EAAI7iC,GAAGkH,MAAQ47B,EACfD,EAAI7iC,GAAG+G,OAASg8B,EAChBF,EAAI7iC,GAAGqQ,KAAK4yB,QAAUpZ,EAAQ,EAAIgZ,EAAI7iC,GAAGqQ,KAAK9O,MAAQsoB,EAAQ,EAC9DgZ,EAAI7iC,GAAGqQ,KAAKwZ,MAAQA,EAGtB,OAAOgZ,qBC+BT,SAAAK,IAAA,IAAAl6B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAAgQ,iBAA2B,EAE3BhQ,EAAA+G,MAAgB,QAChB/G,EAAAu5B,SAAmB,IACnBv5B,EAAA+V,cAAuB,GAEtB/V,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAQ9CjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,MA0IxB,OA3JsC/R,EAAA4jC,EAAAt3B,GAqBpCs3B,EAAAxjC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,SAGhB7R,KAAKqQ,cAELrQ,KAAKuV,OAASvV,KAAKk5B,YAEnBl5B,KAAK6Q,KAAOsyB,GAAWnjC,KAAKgQ,KAAMhQ,KAAK8P,QAAS9P,KAAK+iC,SAAU/iC,KAAKojC,iBACpEpjC,KAAKgS,UAAY,aAAahS,KAAK6R,OAAO,GAAE,MAAM7R,KAAK6R,OAAO,GAAE,IAEhE7R,KAAK0Q,OAAS1Q,KAAK2jC,YACnB3jC,KAAK2vB,YAEL3vB,KAAK63B,YAAc73B,KAAK63B,aAAe73B,KAAKggC,oBAG9C0D,EAAAxjC,UAAA8/B,mBAAA,SAAmBj2B,OAAE8G,EAAA9G,EAAA8G,KAGnB,MAAO,uCAFOwB,EAAUiK,EAAYzL,EAAKL,OAGJ,4CAFzBK,EAAK9O,MAAMqS,iBAGU,iBAInCsvB,EAAAxjC,UAAAg5B,UAAA,WACE,OAAOl5B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEiR,UAGjCmzB,EAAAxjC,UAAAyjC,UAAA,WAAA,IAAAn6B,EAAAxJ,KACQqqB,EAAQrqB,KAAKojC,gBAAkBpjC,KAAKojC,gBAAkBpjC,KAAKkqB,WAEjE,OAAOlqB,KAAK6Q,KAAKmH,KAAI,SAAA1Y,GACnB,IAEMkR,EAAOlR,EAAEuR,KAAKL,KACdD,EAAQ+L,EAAY9L,GACpBzO,EAAQzC,EAAEuR,KAAK9O,MACfgd,EAAShK,EAAAA,IAAI,CAACzV,EAAEoI,MAJN,GAIuBpI,EAAEiI,OALb,KAK8C,EAAI,EACxE63B,EAAuB,GAATrgB,EAEhB4C,EAAQ,EAaZ,MAAO,CACL3P,UAAW,cAJA1S,EAAE8S,GAAK9S,EAAEoI,MAjBN,IAiByB,GAIX,MAHjBpI,EAAE4S,GAAK5S,EAAEiI,OAnBM,IAmB0B,GAGf,IACrCqX,OAda,WAEb,OAAc,KADd+C,GAAS,GAEA,wBAEAnY,EAAK6iB,WAAWxN,SAAStO,IAUlC6uB,YAAWA,EACXd,YAAavf,EACbvO,KAAIA,EACJD,MAAO8B,EAAU9B,GACjB8Z,MAAOtoB,EACPA,MAAKA,EACL0hC,QAASG,EAAAA,OAAO,MAAPA,CAActkC,EAAEuR,KAAK4yB,SAC9B5yB,KAAM,CACJvR,EACA,CACEuR,KAAM,CACJgzB,OAAO,EACP9hC,MAAOsoB,EAAQtoB,EACfyO,KAAMlR,EAAEuR,KAAKL,aAQzBkzB,EAAAxjC,UAAAgqB,SAAA,WACE,OAAOlqB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACC,EAAK9qB,GAAM,OAAA8qB,EAAM9qB,IAAG,IAGpEokC,EAAAxjC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB6yB,EAAAxjC,UAAAyvB,UAAA,WACE3vB,KAAKqsB,WAAa,IAAIL,GAAYhsB,KAAKqP,OAAQ,UAAWrP,KAAKuV,OAAQvV,KAAKisB,eAG9EyX,EAAAxjC,UAAA0xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAIfxQ,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,WAElE,IAIX1Q,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlDmkB,EAAAxjC,UAAA4xB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOhR,KAAK8P,QAAQ0P,MAAK,SAAAlgB,GACvB,OAAIw1B,EACKx1B,EAAEiR,QAAUS,EAAKR,KAEjBlR,EAAEkR,OAASQ,EAAKR,QAI3B,IAAM7E,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,OAASzC,EAAEoR,SAAWM,EAAKN,UAG7E1Q,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAxJ3Cze,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAUgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAnBH2R,EAAgB5iC,EAAA,CAtE5B2J,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAU,80EAiEVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,isDAE9B41B,IAAyBx0B,iBCtCpC,SAAA40B,EAAYtgC,GAZHxD,KAAAo/B,YAAc,GACdp/B,KAAAs+B,YAAc,GACdt+B,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aAOzBzM,KAAKwD,QAAUA,EAAQC,cAoD3B,OAjDEqgC,EAAA5jC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPg3B,EAAA5jC,UAAA4M,OAAA,WACE9M,KAAK+jC,OAASC,EAAAA,MACXjiC,OAAM,SAAAzC,GAAK,OAAAA,EAAEuR,KAAK9O,SAClBuuB,KAAK,MAERtwB,KAAKikC,KAAOjkC,KAAKkkC,WAGnBJ,EAAA5jC,UAAAgkC,QAAA,WAAA,IAAA16B,EAAAxJ,KACE,OAAOA,KAAK+jC,OAAO/jC,KAAK6Q,MAAMmH,KAAI,SAAC2oB,EAAK7X,GACtC,IAAMvY,EAAQowB,EAAI9vB,KAAKA,KAAKL,KACtBqzB,EAAQlD,EAAI9vB,KAAKA,KAAKgzB,MAEd,IAAV/a,IACF6X,EAAI3B,WAAa,GAGnB,IAAMzgB,EAAQ/U,EAAKoV,OAAOrO,GAC1B,MAAO,CACLM,KAAM8vB,EAAI9vB,KAAKA,KACfwP,MAAO,UAAiByI,EACxB9S,KAAMuI,EACNygB,WAAY6E,EAAQ,EAAIlD,EAAI3B,WAC5BK,SAAUsB,EAAItB,SACdlxB,QAAS3E,EAAK+C,aAAes3B,EAC7B1C,eAAgB0C,OAKtBC,EAAA5jC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAK3O,KAAK6Q,KAAK,GAAGA,OAGhCizB,EAAA5jC,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKH,KAAKL,MAGnBszB,EAAA5jC,UAAAqQ,MAAA,SAAMowB,GACJ,OAAOA,EAAI9vB,KAAKL,MAGlBszB,EAAA5jC,UAAAqe,MAAA,SAAMoiB,GACJ,OAAO3gC,KAAK4e,OAAO5e,KAAKuQ,MAAMowB,8CAnDXx2B,EAAAA,cAdZrJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CATUo2B,EAAsBhjC,EAAA,CA1BlC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,iqBAsBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bg2B,oBCyBb,SAAAK,IAEWnkC,KAAA0Q,OAAc,GAEd1Q,KAAAo/B,YAAc,GACdp/B,KAAAs+B,YAAc,GAMdt+B,KAAAyiC,YAAsB,EACtBziC,KAAA0iC,eAAyB,GAEzB1iC,KAAAwZ,iBAA2B,EAE3BxZ,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aACjBzM,KAAAohC,SAAW,IAAI30B,EAAAA,aAwH3B,OAnHE03B,EAAAjkC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPq3B,EAAAjkC,UAAA4M,OAAA,WACE,IAIMs3B,EAJeJ,EAAAA,MAClBjiC,OAAM,SAAAzC,GAAK,OAAAA,EAAEyC,SACbuuB,KAAK,KAEQ+T,CAAarkC,KAAK0Q,QAElC1Q,KAAKsS,IAAMA,EAAAA,IAAI8xB,GAAS,SAAA9kC,GACtB,OAAOA,EAAEyC,SAGX/B,KAAK6Q,KAAO7Q,KAAKskC,wBAAwBF,GACzCpkC,KAAK63B,YAAc73B,KAAK63B,aAAe73B,KAAKggC,oBAG9CmE,EAAAjkC,UAAA8gC,SAAA,SAAS1hC,GACP,OAAOA,EAAE0/B,YAAc1/B,EAAE+/B,SAAW//B,EAAE0/B,YAAc,GAGtDmF,EAAAjkC,UAAAqkC,SAAA,WAGE,OAAO5D,EAAAA,MACJvB,YAHY,IAGAp/B,KAAKs+B,aACjBA,YAJY,IAIAt+B,KAAKs+B,cAGtB6F,EAAAjkC,UAAAokC,wBAAA,SAAwBE,GAAxB,IAAAh7B,EAAAxJ,KAGQykC,EAAiBD,EAEvBC,EAAe/a,SAAQ,SAAApqB,GACrBA,EAAEggC,IAAM91B,EAAK+6B,WAAW3D,SAASthC,GACjCA,EAAEggC,IAAI,GANO,IAMO91B,EAAK80B,aAAe90B,EAAKw3B,SAAS1hC,GAAK+N,KAAK8H,GAAK,GAAK,MAG5E,IAAK,IAAI3U,EAAI,EAAGA,EAAIikC,EAAe9jC,OAAS,EAAGH,IAAK,CAClD,IAAM+vB,EAAIkU,EAAejkC,GACzB,GAAKR,KAAK0kC,aAAanU,GAIvB,IAAK,IAAI5f,EAAInQ,EAAI,EAAGmQ,EAAI8zB,EAAe9jC,OAAQgQ,IAAK,CAClD,IAAMpR,EAAIklC,EAAe9zB,GACzB,GAAK3Q,KAAK0kC,aAAanlC,IAInBA,EAAE+/B,IAAI,GAAK/O,EAAE+O,IAAI,GAAK,EAAG,CAE3B,IAAM59B,EAtBQ,GAsBU2L,KAAK2V,IAAIzjB,EAAE+/B,IAAI,GAAK/O,EAAE+O,IAAI,IAC9C59B,EAAI,IAENnC,EAAE+/B,IAAI,IAAMjyB,KAAKiK,KAAK/X,EAAE+/B,IAAI,IAAM59B,KAM1C,OAAO+iC,GAGTN,EAAAjkC,UAAAwkC,aAAA,SAAaC,GACX,OAAO3kC,KAAK4kC,YAAcD,EAAMtF,SAAWsF,EAAM3F,WAAa3xB,KAAK8H,GAAK,IAG1EgvB,EAAAjkC,UAAA2kC,gBAAA,SAAgBtU,GACd,OAAOvwB,KAAKic,qBAAkBjY,EAAYhE,KAAK63B,YAAYtH,IAG7D4T,EAAAjkC,UAAA4kC,UAAA,SAAUH,GACR,OAAI3kC,KAAK8pB,gBACA9pB,KAAK8pB,gBAAgB6a,EAAM9zB,KAAKL,MAElCxQ,KAAKuQ,MAAMo0B,IAGpBR,EAAAjkC,UAAAqQ,MAAA,SAAMo0B,GACJ,OAAOroB,EAAYqoB,EAAM9zB,KAAKL,OAGhC2zB,EAAAjkC,UAAA8/B,mBAAA,SAAmB2E,GACjB,IAAMp0B,EAAQvQ,KAAKuQ,MAAMo0B,GACnB7hB,EAAMxG,EAAYqoB,EAAM9zB,KAAK9O,OAEnC,MAAO,uCACyBwa,EAAYhM,GAAM,4CACpBuS,EAAG,iBAInCqhB,EAAAjkC,UAAAqe,MAAA,SAAMomB,GACJ,OAAO3kC,KAAK4e,OAAOC,SAAS7e,KAAKuQ,MAAMo0B,KAGzCR,EAAAjkC,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKH,KAAKL,MAGnB2zB,EAAAjkC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBszB,EAAAjkC,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,MAAQ8O,EAAM5O,SAAWpR,EAAEoR,WAxI9C5P,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,yCArBUy2B,EAAkBrjC,EAAA,CAhD9B2J,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAU,s3CA4CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq2B,oBChCb,SAAAY,KAA6B,OAAhBA,EAAcjkC,EAAA,CArB1B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CACZmnB,GACAC,GACAc,GACAoB,GACAqB,GACAI,GACAK,IAEFnrB,QAAS,CACPknB,GACAC,GACAc,GACAoB,GACAqB,GACAI,GACAK,OAGSY,oBCnBb,SAAAC,KAA+B,OAAlBA,EAAgBlkC,EAAA,CAL5B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,GAAmBma,GAAgBtH,IAC7C1kB,aAAc,CAAC4kB,GAAqB8B,IACpCzmB,QAAS,CAAC2kB,GAAqB8B,OAEpBuF,oBC6FX,SAAAC,EAAYzhC,EAA6B4L,EAA+Bf,GAA/BrO,KAAAoP,GAAAA,EAA+BpP,KAAAqO,KAAAA,EAzB/DrO,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAKvBzM,KAAA+B,MAAgB,GAMhB/B,KAAAklC,aAAuB,GACvBllC,KAAAyU,cAAwB,GACxBzU,KAAA+gB,aAAuB,EAGvB/gB,KAAAmlC,WAAqB,GAErBnlC,KAAAolC,YAAc,CAAC,GAAI,GAAI,EAAG,IAC1BplC,KAAAqlC,cAAgB,GAKdrlC,KAAKwD,QAAUA,EAAQC,cAgH3B,OA7GEwhC,EAAA/kC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPm4B,EAAA/kC,UAAAyP,YAAA,WACEiU,qBAAqB5jB,KAAK6jB,eAG5BohB,EAAA/kC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEA,KAAKqO,KAAKK,KAAI,WACZ,IAAM42B,EAAW97B,EAAKqH,WAAmC,IAApBrH,EAAKqH,KAAK9O,MACzC+hB,EAAkBta,EAAKsa,iBAAe,SAAKyhB,GAAQ,OAAAA,EAAKxjC,MAAMqS,kBAC9D0V,EAAkBtgB,EAAKsgB,iBAAe,SAAKyb,GAAQ,OAAAhpB,EAAYlK,EAAUkzB,EAAKh1B,MAAO,MAE3F/G,EAAKwI,UAAY,aAAaxI,EAAK4I,EAAC,MAAM5I,EAAK0I,EAAC,IAEhD1I,EAAKg8B,UAAYn4B,KAAKiF,IAAI,EAAG9I,EAAK9B,OAAS8B,EAAK47B,YAAY,GAAK57B,EAAK47B,YAAY,GAClF57B,EAAK85B,UAAYj2B,KAAKiF,IAAI,EAAG9I,EAAK9B,OAClC8B,EAAK+5B,WAAal2B,KAAKiF,IAAI,EAAG9I,EAAKjC,QAEnCiC,EAAK+G,MAAQ/G,EAAK+G,MAAQ/G,EAAK+G,MAAQ/G,EAAKqH,KAAKL,KAEjD,IAAMi1B,EAAW,CACfl1B,MAAO/G,EAAK+G,MACZM,KAAMrH,EAAKqH,KACX9O,MAAOyH,EAAKqH,KAAK9O,OAGnByH,EAAKmf,eAAiBmB,EAAgB2b,GACtCj8B,EAAKk8B,cAAgB,kBAAiBl8B,EAAK+5B,WAAa/5B,EAAK27B,YAAU,IAEvE,IAAMpjC,EAAQujC,EAAWxhB,EAAgB2hB,GAAY,GAErDj8B,EAAKzH,MAAQyH,EAAKm8B,YAAY5jC,GAC9ByH,EAAKo8B,aAELp8B,EAAKq8B,SAAWvvB,EAAY,EAAG,EAAG9M,EAAK85B,UAAW95B,EAAK27B,WAAY,EAAG,EAAC,GAAO,GAAO,GAAM,IAE3Fz+B,YAAW,WACT8C,EAAKs8B,YACLt8B,EAAKzH,MAAQA,EACTujC,IAAa97B,EAAKuX,aACpBra,YAAW,WAAM,OAAA8C,EAAKu8B,eAAc,MAErC,OAIPd,EAAA/kC,UAAAylC,YAAA,SAAY5jC,GAIV,OAHI/B,KAAKgmC,YAAchmC,KAAKgmC,WAAajkC,EAAMpB,SAC7CoB,GAAS,IAASkkC,OAAOjmC,KAAKgmC,WAAajkC,EAAMpB,SAE5CoB,GAGTkjC,EAAA/kC,UAAA6lC,WAAA,WAAA,IAAAv8B,EAAAxJ,KACE,IAAKA,KAAK+gB,aAAe/gB,KAAKuM,WAAY,CACxCqX,qBAAqB5jB,KAAK6jB,cAE1B,IAAMqiB,EAAMlmC,KAAK6Q,KAAK9O,MAChBokC,EAAOpjB,GAAemjB,GACtBE,EAAkBpmC,KAAK8jB,iBAAe,SAAKyhB,GAAQ,OAAAA,EAAKxjC,MAAMqS,kBAapEpU,KAAK6jB,aAAelC,GAAM,EAAGukB,EAAKC,EAAM,GAXvB,SAACp8B,OAAEhI,EAAAgI,EAAAhI,MAAO8gB,EAAA9Y,EAAA8Y,SACzBrZ,EAAK6E,KAAKK,KAAI,WACZ3M,EAAQ8gB,EAAWqjB,EAAMnkC,EACzByH,EAAKzH,MAAQqkC,EAAgB,CAAE71B,MAAO/G,EAAK+G,MAAOM,KAAMrH,EAAKqH,KAAM9O,MAAKA,IACnE8gB,IACHrZ,EAAKzH,MAAQyH,EAAKm8B,YAAYn8B,EAAKzH,QAErCyH,EAAK4F,GAAGc,qBAKZlQ,KAAK+gB,aAAc,IAIvBkkB,EAAA/kC,UAAA4lC,UAAA,WAAA,IAAAt8B,EAAAxJ,KACEA,KAAKqO,KAAKK,KAAI,WACN,IAAA3E,EAAAP,EAAA68B,OAAA5iC,cAAAkG,wBAAEjC,EAAAqC,EAAArC,MAAOH,EAAAwC,EAAAxC,OACf,GAAc,IAAVG,GAA0B,IAAXH,EAAnB,CAIA,IAAM69B,EAAe57B,EAAK47B,YAAY,GAAK57B,EAAK47B,YAAY,GAAK57B,EAAK85B,UAAY,EAC5EgD,EAAiB98B,EAAK85B,UAAY,EAAI8B,EACtCmB,EAAkB/8B,EAAK+5B,WAAa,EAEpCiD,EAAcn5B,KAAK0H,IAAIuxB,EAAiB5+B,EAAO6+B,EAAkBh/B,GACvEiC,EAAK07B,aAAe73B,KAAKC,MAAM9D,EAAK07B,aAAesB,GACnDh9B,EAAK67B,cAAgBh4B,KAAK0H,IAAIvL,EAAK07B,aAAc,IAEjD17B,EAAKo8B,aACLp8B,EAAK4F,GAAGc,oBAIZ+0B,EAAA/kC,UAAA0lC,WAAA,WACE5lC,KAAKolC,YAAY,GAAKplC,KAAKolC,YAAY,GAAKplC,KAAKsjC,UAAY,EAC7D,IAAMptB,EAAUlW,KAAKujC,WAAa,EAClCvjC,KAAKolC,YAAY,GAAKlvB,EAAUlW,KAAKklC,aAAellC,KAAKqlC,cAAgB,EACzErlC,KAAKolC,YAAY,GAAKlvB,EAAUlW,KAAKqlC,eAGvCJ,EAAA/kC,UAAAkf,QAAA,WACEpf,KAAKuP,OAAOZ,KAAK3O,KAAK6Q,gDA/GH1G,EAAAA,kBAAwBuH,EAAAA,yBAAiC1C,EAAAA,UAtCrElO,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAEQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAEuC5M,EAAA,CAAvCwJ,EAAAA,UAAU,SAAU,CAAEkc,QAAQ,kCAlBpBye,EAAankC,EAAA,CA/CzB2J,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAU,s0CA2CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bm3B,MChDb,SAAgBwB,GAAY1kC,GAC1B,IAAMwc,EAAQmoB,EAAAA,IAAa3kC,GACnBX,EAAAmd,EAAAnd,EAAGkP,EAAAiO,EAAAjO,EAAG/Q,EAAAgf,EAAAhf,EACd,OAAgB,IADCgf,EAAArQ,QAERqQ,EAAM5J,WAKRgyB,GAAcpoB,GAHJ,IAAJnd,EAAc,IAAJkP,EAAc,IAAJ/Q,GAAW,KACvB,KAAO,GAAM,IAYpC,SAAgBonC,GAAc58B,EAAa05B,OAAXriC,EAAA2I,EAAA3I,EAAGkP,EAAAvG,EAAAuG,EAAG/Q,EAAAwK,EAAAxK,EAC9Be,EAAImjC,EAAU,EAAI,EAAI,IACtB7jC,EAAI6jC,EAAU,GAAe,EAAXA,EAAeA,EAMvC,MAAO,QAJPriC,EAAIiM,KAAKuV,OAAOtiB,EAAIc,GAAKxB,GAAKwB,GAIf,MAHfkP,EAAIjD,KAAKuV,OAAOtiB,EAAIgQ,GAAK1Q,GAAK0Q,GAGT,MAFrB/Q,EAAI8N,KAAKuV,OAAOtiB,EAAIf,GAAKK,GAAKL,GAEH,sBCY7B,SAAAqnC,IAKW5mC,KAAA67B,aAAe,GAIf77B,KAAA6mC,WAAa,mBAIb7mC,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aA0EzB,OApEEm6B,EAAA1mC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP85B,EAAA1mC,UAAA4M,OAAA,WACE,GAAI9M,KAAK6Q,KAAKlQ,OAAS,EAAG,CACxB,IAAMylC,EAAkBpmC,KAAK8jB,iBAAe,SAAKyhB,GAAQ,OAAAA,EAAKxjC,MAAMqS,kBAE9D0yB,EAAgB9mC,KAAK6Q,KACxBmH,KAAI,SAAA1Y,GAEH,OADiBA,GAAKA,EAAEuR,WAAgC,IAAjBvR,EAAEuR,KAAK9O,OAA0C,OAAjBzC,EAAEuR,KAAK9O,MAE1EqkC,EAAgB,CACdv1B,KAAMvR,EAAEuR,KACRN,MAAOjR,EAAIA,EAAEuR,KAAKL,KAAO,GACzBzO,MAAOzC,GAAKA,EAAEuR,KAAOvR,EAAEuR,KAAK9O,MAAQ,KACnCpB,OACH,KAEL2vB,MAAK,SAACC,EAAGhxB,GAAM,OAAAA,EAAIgxB,KAChB5kB,EAAM0B,KAAK61B,KAAKljC,KAAK6Q,KAAKlQ,OAAS,GACzCX,KAAKgmC,WAAac,EAAcn7B,GAGlC,IAAMo7B,EAAQ/mC,KAAKgnC,WACnBhnC,KAAK+mC,MAAQA,EAAM3f,QAAO,SAAA9nB,GAAK,OAAiB,OAAjBA,EAAEuR,KAAK9O,SACtC/B,KAAKinC,WAAaF,EAAM3f,QAAO,SAAA9nB,GAAK,OAAiB,OAAjBA,EAAEuR,KAAK9O,UAG7C6kC,EAAA1mC,UAAA8mC,SAAA,WAAA,IAAAx9B,EAAAxJ,KACQknC,EACyB,iBAAtBlnC,KAAK67B,aAA4B77B,KAAK67B,aAAe77B,KAAK67B,aAAa,GAAK77B,KAAK67B,aAAa,GACjGsL,EACyB,iBAAtBnnC,KAAK67B,aAA4B77B,KAAK67B,aAAe77B,KAAK67B,aAAa,GAAK77B,KAAK67B,aAAa,GAEvG,OAAO77B,KAAK6Q,KAAKmH,KAAI,SAAC1Y,EAAGwpB,GACvB,IAAIvY,EAAQjR,EAAEuR,KAAKL,KAEjBD,EADEA,GAAoC,SAA3BA,EAAMtQ,YAAYuQ,KACrBD,EAAME,qBAENF,EAAQA,EAAM6D,iBAAmB7D,EAG3C,IAAMxO,EAAQzC,EAAEuR,KAAK9O,MACfqlC,EAAa72B,EAAQ/G,EAAKoV,OAAOC,SAAStO,GAAS/G,EAAKq9B,WACxDtoB,EAAQ/U,EAAK69B,WAAaD,GAAc,OAC9C,MAAO,CACLh1B,EAAG9S,EAAE8S,EACLF,EAAG5S,EAAE4S,EACLxK,MAAOpI,EAAEoI,MAAQy/B,EACjB5/B,OAAQjI,EAAEiI,OAAS2/B,EACnB3oB,MAAKA,EACL+oB,UAAW99B,EAAK89B,WAAaF,EAC7BG,UAAW/9B,EAAK+9B,WAAad,GAAYloB,GACzChO,MAAKA,EACLM,KAAMvR,EAAEuR,KACRgnB,YAAgBtnB,EAAK,KAAKxO,OAKhC6kC,EAAA1mC,UAAA2oB,QAAA,SAAQC,EAAOyc,GACb,OAAOA,EAAKh1B,OAGdq2B,EAAA1mC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAtFV/P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,4CAEQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAfUk5B,EAAmB9lC,EAAA,CAnC/B2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,4wBA+BViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B84B,qBCxBb,SAAAY,IAAA,IAAAh+B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAGWwJ,EAAAq9B,WAAqB,mBACrBr9B,EAAAqyB,aAAe,GAYxBryB,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,MA+CxB,OA/DyC/R,EAAA0nC,EAAAp7B,GAoBvC5M,OAAAgC,eAAIgmC,EAAAtnC,UAAA,YAAS,KAAb,WACE,QAASF,KAAKuP,OAAOk4B,UAAU9mC,wCAGjC6mC,EAAAtnC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,SAGhB7R,KAAKqQ,cAELrQ,KAAKuV,OAASvV,KAAKk5B,YAEnBl5B,KAAK2vB,YACL3vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,IAOnE,IALA,IAAMgjB,EAAOgO,GAAS7iC,KAAKgQ,KAAMhQ,KAAK8P,QAAQnP,OAAQ,KAChDs7B,EAAIpH,EAAK,GAAKA,EAAK,GAEnBhkB,EAAO7Q,KAAK8P,QAAQ0C,QAEnB3B,EAAKlQ,OAASs7B,GACnBprB,EAAKzO,KAAK,CAAEL,MAAO,OAGrB/B,KAAK6Q,KAAOsyB,GAAWnjC,KAAKgQ,KAAMa,EAAM,IAAK7Q,KAAKojC,kBAGpDoE,EAAAtnC,UAAAg5B,UAAA,WACE,OAAOl5B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEiR,UAGjCi3B,EAAAtnC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB22B,EAAAtnC,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQ,UAAWrP,KAAKuV,OAAQvV,KAAKisB,eA5DjEnrB,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CARUm9B,EAAmB1mC,EAAA,CA3B/B2J,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAU,iuBAsBVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,wjEAE9B05B,IAA4Bt4B,iBCtBzC,SAAAw4B,KAA+B,OAAlBA,EAAgB5mC,EAAA,CAL5B8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACksB,GAAe2B,GAAqBY,IACnDxuB,QAAS,CAACisB,GAAe2B,GAAqBY,OAEnCE,oBCsEX,SAAAC,EAAYnkC,GAfHxD,KAAA8gB,UAAoB,EACpB9gB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAUvBzM,KAAA+gB,aAAuB,EAGrB/gB,KAAKwD,QAAUA,EAAQC,cAyF3B,OAtFEkkC,EAAAznC,UAAA0M,YAAA,WACE5M,KAAK8M,SAEL9M,KAAK8jB,gBAAkB9jB,KAAK8jB,iBAAe,SAAK/hB,GAAS,OAAAA,EAAMqS,kBAC/D,IAAM0V,EAAkB9pB,KAAK8pB,iBAAe,SAAK6R,GAAQ,OAAApf,EAAYlK,EAAUspB,EAAKprB,MAAO,MAErFq3B,EAAW,CACf/2B,KAAM7Q,KAAK6Q,KACXN,MAAOvQ,KAAKuQ,MACZxO,MAAO/B,KAAK+B,OAGd/B,KAAK6nC,eAAiB7nC,KAAK8jB,gBAAgB8jB,EAAS7lC,OACpD/B,KAAK2oB,eAAiBmB,EAAgB8d,GAEtC5nC,KAAK0d,WAAa,OAAST,KAAKtI,WAChC3U,KAAKq7B,YAAc,QAAQr7B,KAAK0d,WAAU,IAC1C1d,KAAKgf,cAAgBhf,KAAKif,oBAG5B0oB,EAAAznC,UAAA4M,OAAA,WACM9M,KAAK+gB,YACP/gB,KAAKs7B,wBAEDt7B,KAAKuM,YACPvM,KAAKihB,gBAEPjhB,KAAK+gB,aAAc,IAIvB4mB,EAAAznC,UAAA+gB,cAAA,WACe1R,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SAGtCiS,KAAK,UAAW,GAChBA,KAAK,IAAKxhB,KAAKoS,GACfoP,KAAK,IAAKxhB,KAAKkS,GAElBlS,KAAKs7B,wBAGPqM,EAAAznC,UAAA4nC,aAAA,WACE,OAAOrB,GAAYzmC,KAAKgW,OAG1B2xB,EAAAznC,UAAAo7B,qBAAA,WACE,IAAM/Z,EAAOhS,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SAErCvP,KAAKuM,WACPgV,EACGvT,aACApH,SAAS,KACT4a,KAAK,UAAW,GAChBA,KAAK,IAAKxhB,KAAKoS,GACfoP,KAAK,IAAKxhB,KAAKkS,GACfsP,KAAK,QAASxhB,KAAK0H,OACnB8Z,KAAK,SAAUxhB,KAAKuH,QAEvBga,EACGC,KAAK,UAAW,GAChBA,KAAK,IAAKxhB,KAAKoS,GACfoP,KAAK,IAAKxhB,KAAKkS,GACfsP,KAAK,QAASxhB,KAAK0H,OACnB8Z,KAAK,SAAUxhB,KAAKuH,SAI3BogC,EAAAznC,UAAAkf,QAAA,WACEpf,KAAKuP,OAAOZ,KAAK3O,KAAK6Q,OAGxB82B,EAAAznC,UAAA+e,iBAAA,WACE,MAAO,CACL,CACE9M,OAAQ,EACRoM,MAAOve,KAAKgW,KACZ9H,QAAS,IAEX,CACEiE,OAAQ,IACRoM,MAAOve,KAAKgW,KACZ9H,QAAS,8CAtFM/D,EAAAA,cA1BZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAfUi6B,EAAoB7mC,EAAA,CA9ChC2J,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAU,y1CA0CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B65B,oBCXb,SAAAI,IAMW/nC,KAAA8gB,UAAoB,EACpB9gB,KAAAwZ,iBAA2B,EAE3BxZ,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aA4CzB,OAxCEs7B,EAAA7nC,UAAA0M,YAAA,SAAYC,GACV7M,KAAKw7B,MAAQx7B,KAAKy7B,YAGpBsM,EAAA7nC,UAAAu7B,SAAA,WAAA,IAAAjyB,EAAAxJ,KACE,OAAOA,KAAK6Q,KAAKm3B,SACd5gB,QAAO,SAAA9nB,GACN,OAAmB,IAAZA,EAAE2oC,SAEVjwB,KAAI,SAAC1Y,EAAGwpB,GACP,IAAMvY,EAAQjR,EAAE2d,GAEhB,MAAO,CACLpM,KAAMvR,EAAEuR,KACRuB,EAAG9S,EAAE4oC,GACLh2B,EAAG5S,EAAEg0B,GACL5rB,MAAOpI,EAAEwY,GAAKxY,EAAE4oC,GAChB3gC,OAAQjI,EAAEqY,GAAKrY,EAAEg0B,GACjBtd,KAAMxM,EAAKoV,OAAOC,SAAStO,GAC3BA,MAAKA,EACLxO,MAAOzC,EAAEyC,MACTomC,UAAW7oC,EAAE6oC,eAKrBJ,EAAA7nC,UAAAgf,eAAA,SAAenV,OAAEwG,EAAAxG,EAAAwG,MAAOxO,EAAAgI,EAAAhI,MACtB,MAAO,uCACyBwa,EAAYhM,GAAM,4CACpBxO,EAAMqS,iBAAgB,iBAItD2zB,EAAA7nC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBk3B,EAAA7nC,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKT,OApDLzP,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAXUq6B,EAA0BjnC,EAAA,CA/BtC2J,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAU,yxBA2BViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi6B,qBCFb,SAAAK,IAAA,IAAA5+B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAAgQ,iBAA2B,EAG3BhQ,EAAAsX,UAAoB,EAEnBtX,EAAA+F,OAAS,IAAI9C,EAAAA,aAUvBjD,EAAAqI,OAAS,CAAC,GAAI,GAAI,GAAI,MAqDxB,OAtEsC/R,EAAAsoC,EAAAh8B,GAmBpCg8B,EAAAloC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,SAGhB7R,KAAKuV,OAASvV,KAAKk5B,YAEnBl5B,KAAKqoC,QAAUA,EAAAA,UAAexT,KAAK,CAAC70B,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,SAE/D,IAMM0b,EAAOqlB,EAAAA,WACVrrB,IAAG,SAAA3d,GACF,IAAIiR,EAAQjR,EAAEkR,KAOd,OAJED,EAD6B,SAA3BA,EAAMtQ,YAAYuQ,KACZD,EAAME,qBAENF,EAAM6D,oBAIjBm0B,UAAS,SAAAjpC,GAAK,OAACA,EAAEkpC,OAAS,KAAO,SAXvBF,CAW+BhmC,EAAA,CAjB3B,CACfkO,KAAM,OACNzO,MAAO,EACPymC,QAAQ,IAciDxoC,KAAK8P,UAC7Dsa,KAAI,SAAA9qB,GAAK,OAAAA,EAAEyC,SAEd/B,KAAK6Q,KAAO7Q,KAAKqoC,QAAQplB,GAEzBjjB,KAAK2vB,YAEL3vB,KAAKgS,UAAY,aAAahS,KAAKgQ,KAAK4b,QAAO,MAAM5rB,KAAK6R,OAAO,GAAE,KAGrEu2B,EAAAloC,UAAAg5B,UAAA,WACE,OAAOl5B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjC43B,EAAAloC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnBu3B,EAAAloC,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQ,UAAWrP,KAAKuV,OAAQvV,KAAKisB,eAnEjEnrB,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCAESvJ,EAAA,CAAT4M,EAAAA,uCAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DATHqW,EAAgBtnC,EAAA,CAzB5B2J,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAU,ipBAoBVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,0MAE9Bs6B,IAAyBl5B,iBC9BtC,SAAAu5B,KAA4B,OAAfA,EAAa3nC,EAAA,CALzB8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAAC4uB,GAAsBI,GAA4BK,IACjEpvB,QAAS,CAAC2uB,GAAsBI,GAA4BK,OAEjDK,qBCsFb,SAAAC,IAAA,IAAAl/B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAAuL,IAAc,EACdvL,EAAA8I,IAAc,IACd9I,EAAAzH,MAAgB,EAczByH,EAAAqI,OAAgB,CAAC,GAAI,GAAI,GAAI,IAG7BrI,EAAAm/B,iBAA2B,EAC3Bn/B,EAAAo/B,iBAA2B,EAC3Bp/B,EAAAq/B,mBAA6B,GAC7Br/B,EAAAs/B,eAAyB,GACzBt/B,EAAAu/B,mBAA6B,GAC7Bv/B,EAAAw/B,eAAyB,KA8G3B,OAvI0ClpC,EAAA4oC,EAAAt8B,GA6BxCs8B,EAAAxoC,UAAAmJ,gBAAA,WAAA,IAAAG,EAAAxJ,KACEoM,EAAAlM,UAAMmJ,gBAAezI,KAAAZ,MACrB0G,YAAW,WACT8C,EAAKs8B,UAAU,SACft8B,EAAKs8B,UAAU,aAInB4C,EAAAxoC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKipC,sBAA0CjlC,IAAvBhE,KAAKkpC,cAC7BlpC,KAAKsS,IAAMjF,KAAKiF,IAAItS,KAAKsS,IAAKtS,KAAK+B,OACnC/B,KAAK+U,IAAM1H,KAAK0H,IAAI/U,KAAK+U,IAAK/U,KAAK+B,OAC/B/B,KAAKipC,mBACPjpC,KAAKsS,IAAMjF,KAAKiF,IAAItS,KAAKsS,IAAKtS,KAAKkpC,eACnClpC,KAAK+U,IAAM1H,KAAK0H,IAAI/U,KAAK+U,IAAK/U,KAAKkpC,gBAGrClpC,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,SAGhB7R,KAAKm2B,YAAcn2B,KAAKs1B,iBACxBt1B,KAAKysB,WAAazsB,KAAK21B,gBACvB31B,KAAKmpC,aAAenpC,KAAKopC,kBAEzBppC,KAAK2vB,YAEL,IAAM/D,EAAU5rB,KAAK6R,OAAO,GAAK7R,KAAKgQ,KAAKtI,MAAQ,EAC7C62B,EAAUv+B,KAAK6R,OAAO,GAAK7R,KAAKgQ,KAAKzI,OAAS,EAEpDvH,KAAKgS,UAAY,aAAa4Z,EAAO,KAAK2S,EAAO,IACjDv+B,KAAKqpC,cAAgB,cAAarpC,KAAK6R,OAAO,GAAK7R,KAAKysB,WAAWzsB,KAAKkpC,gBAAc,KAAK3K,EAAO,IAClGv+B,KAAK8oC,eAAiB,oBACtB9oC,KAAKgpC,eAAiB,mBACtBtiC,YAAW,WAAM,OAAA8C,EAAKs8B,UAAU,WAAU,IAC1Cp/B,YAAW,WAAM,OAAA8C,EAAKs8B,UAAU,WAAU,KAG5C4C,EAAAxoC,UAAAo1B,eAAA,WACE,MAAO,CAACt1B,KAAK+U,IAAK/U,KAAKsS,MAGzBo2B,EAAAxoC,UAAAy1B,cAAA,WACE,OAAOjO,EAAAA,cACJ/I,MAAM,CAAC,EAAG3e,KAAKgQ,KAAKtI,QACpB6N,OAAOvV,KAAKm2B,cAGjBuS,EAAAxoC,UAAAkpC,gBAAA,WACE,OAAIppC,KAAK8jB,gBACA9jB,KAAK8jB,gBAAgB9jB,KAAK+B,OAE5B/B,KAAK+B,MAAMqS,kBAGpBs0B,EAAAxoC,UAAA4lC,UAAA,SAAUtiC,EAASyiC,GAAnB,IACMqD,EACA9C,EAFNh9B,EAAAxJ,UAAmB,IAAAimC,IAAAA,GAAA,GAGD,UAAZziC,GACF8lC,EAAKtpC,KAAKupC,YACV/C,EAAcxmC,KAAK2oC,mBAEnBW,EAAKtpC,KAAKwpC,YACVhD,EAAcxmC,KAAK4oC,kBAGf,IAAA7+B,EAAAu/B,EAAA7lC,cAAAkG,wBAAEjC,EAAAqC,EAAArC,MAAOH,EAAAwC,EAAAxC,OACf,GAAc,IAAVG,GAA0B,IAAXH,EAAnB,CACA,IAAMkiC,EAAWjD,EACXF,EAAiBtmC,KAAKgQ,KAAKtI,MAC3B6+B,EAAkBl5B,KAAKiF,IAAItS,KAAKgQ,KAAKzI,OAAS,EAAI,GAAI,GACtDmiC,EAAmBr8B,KAAKC,MAAOg5B,GAAkB5+B,EAAQ8+B,GAAgB,KAAO,IAChFmD,EAAoBt8B,KAAKC,MAAOi5B,GAAmBh/B,EAASi/B,GAAgB,KAAO,KACzFA,EAAcn5B,KAAK0H,IAAI40B,EAAmBD,MAEtBD,IACF,UAAZjmC,GACFxD,KAAK2oC,iBAAmBnC,EACxBxmC,KAAK6oC,mBAAqB,SAASrC,EAAW,KAAKA,EAAW,MAE9DxmC,KAAK4oC,iBAAmBpC,EACxBxmC,KAAK+oC,mBAAqB,SAASvC,EAAW,KAAKA,EAAW,KAEhExmC,KAAKoP,GAAGc,eACJ+1B,GACFv/B,YAAW,WACT8C,EAAKs8B,UAAUtiC,GAAS,KACvB,OAKTklC,EAAAxoC,UAAAkf,QAAA,WACEpf,KAAKuP,OAAOZ,KAAK,CACf6B,KAAM,QACNzO,MAAO/B,KAAK+B,SAIhB2mC,EAAAxoC,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQ,UAAW,CAACrP,KAAK+B,OAAQ/B,KAAKisB,eApIlEnrB,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CAEyBvJ,EAAA,CAAzBwJ,EAAAA,UAAU,kDACexJ,EAAA,CAAzBwJ,EAAAA,UAAU,kDATAo+B,EAAoB5nC,EAAA,CAlFhC2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,krEA6EVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,kuDAE9B46B,IAA6Bx5B,kBCf1C,SAAA06B,IAAA,IAAApgC,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA0lB,QAAS,EACT1lB,EAAA0kB,YAAsB,SACtB1kB,EAAAiiB,eAAyB,QACzBjiB,EAAAuL,IAAc,EACdvL,EAAA8I,IAAc,IAGd9I,EAAAqgC,YAAsB,GACtBrgC,EAAAsgC,cAAwB,EAExBtgC,EAAAugC,UAAoB,EACpBvgC,EAAAw1B,YAAsB,IACtBx1B,EAAAwgC,UAAoB,IACpBxgC,EAAA+V,cAAuB,GAEvB/V,EAAAgQ,iBAA2B,EAE3BhQ,EAAAygC,UAAoB,EAKnBzgC,EAAA8T,SAA8B,IAAI7Q,EAAAA,aAClCjD,EAAA+T,WAAgC,IAAI9Q,EAAAA,aAgB9CjD,EAAAg9B,YAAsB,EACtBh9B,EAAA0gC,SAAmB,GACnB1gC,EAAAiL,cAAwB,cACxBjL,EAAA03B,aAAuB,KAiOzB,OA5QoCphC,EAAA8pC,EAAAx9B,GAgDlCw9B,EAAA1pC,UAAAmJ,gBAAA,WAAA,IAAAG,EAAAxJ,KACEoM,EAAAlM,UAAMmJ,gBAAezI,KAAAZ,MACrB0G,YAAW,WAAM,OAAA8C,EAAKs8B,gBAGxB8D,EAAA1pC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK+pC,SAKH/pC,KAAK6R,SACR7R,KAAK6R,OAAS,CAAC,GAAI,IAAK,GAAI,MALzB7R,KAAK6R,SACR7R,KAAK6R,OAAS,CAAC,GAAI,GAAI,GAAI,KAS3B7R,KAAKg/B,WAAa,IACpBh/B,KAAKg/B,WAAch/B,KAAKg/B,WAAa,IAAO,KAG9Ch/B,KAAKgqC,UAAY38B,KAAK0H,IAAI/U,KAAKgqC,UAAW,KAE1ChqC,KAAKgQ,KAAO6a,GAAwB,CAClCnjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACbujB,QAAS9qB,KAAK6R,OACdvF,WAAYtM,KAAKkvB,OACjBzD,eAAgBzrB,KAAKyrB,iBAGvBzrB,KAAKuV,OAASvV,KAAKk5B,YACnBl5B,KAAKm2B,YAAcn2B,KAAKs1B,iBACxBt1B,KAAKysB,WAAazsB,KAAK21B,gBACvB31B,KAAKmpC,aAAenpC,KAAKopC,kBAEzBppC,KAAKs+B,YAAcjxB,KAAK0H,IAAI/U,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,QAAU,EAEjEvH,KAAKikC,KAAOjkC,KAAKkkC,UAEjBlkC,KAAK2vB,YACL3vB,KAAKkN,cAAgBlN,KAAK4vB,mBAE1B,IAAMhE,EAAU5rB,KAAK6R,OAAO,GAAK7R,KAAKgQ,KAAKtI,MAAQ,EAC7C62B,EAAUv+B,KAAK6R,OAAO,GAAK7R,KAAKgQ,KAAKzI,OAAS,EAEpDvH,KAAKgS,UAAY,aAAa4Z,EAAO,KAAK2S,EAAO,IACjDv+B,KAAKkqC,SAAW,UAAUlqC,KAAKg/B,WAAU,IACzCt4B,YAAW,WAAM,OAAA8C,EAAKs8B,cAAa,KAGrC8D,EAAA1pC,UAAAgkC,QAAA,mBACQD,EAAO,GAEPkG,EAAqC,GAAnBnqC,KAAKs+B,YAEvB8L,EAAe/8B,KAAK0H,IAAIo1B,EAAkBnqC,KAAK8P,QAAQnP,OAAQ,IAC/D6hC,EAA0B,GAAf4H,EACjBpqC,KAAKqqC,WAAarqC,KAAKs+B,YAAct+B,KAAK8P,QAAQnP,OAASypC,EAC3DpqC,KAAKkhC,aAAe7zB,KAAKC,MAAMk1B,EAAW,GAE1C,IAAIhiC,EAAI,MACR,IAAgB,IAAAiW,EAAAhV,EAAAzB,KAAK8P,SAAOoB,EAAAuF,EAAA3U,QAAAoP,EAAAlP,KAAAkP,EAAAuF,EAAA3U,OAAE,CAAzB,IAAMxC,EAAC4R,EAAAnP,MACJu8B,EAAct+B,KAAKs+B,YAAc99B,EAAI4pC,EACrChL,EAAcd,EAAckE,EAsB5B7B,EAAM,CACV2J,cArBoB,CACpBjL,SAAWr/B,KAAKgqC,UAAY38B,KAAK8H,GAAM,IACvCiqB,YAAWA,EACXd,YAAWA,EACXztB,KAAM,CACJ9O,MAAO/B,KAAKsS,IACZ9B,KAAMlR,EAAEkR,OAgBV+5B,SAZe,CACflL,SAAWhyB,KAAK0H,IAAI/U,KAAKysB,WAAWntB,EAAEyC,OAAQ/B,KAAKgqC,WAAa38B,KAAK8H,GAAM,IAC3EiqB,YAAWA,EACXd,YAAWA,EACXztB,KAAM,CACJ9O,MAAOzC,EAAEyC,MACTyO,KAAMlR,EAAEkR,QASZyzB,EAAK7hC,KAAKu+B,GACVngC,sGAGF,OAAOyjC,GAGT2F,EAAA1pC,UAAAg5B,UAAA,WACE,OAAOl5B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEkR,SAGjCo5B,EAAA1pC,UAAAo1B,eAAA,WACE,IAAMjO,EAASrnB,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SACjCyoC,EAAUn9B,KAAK0H,IAAGlU,MAARwM,KAAI/K,EAAQ+kB,IACtBojB,EAAUp9B,KAAKiF,IAAGzR,MAARwM,KAAI/K,EAAQ+kB,IAc5B,YAZiBrjB,IAAbhE,KAAK+U,IACP/U,KAAK+U,IAAM1H,KAAK0H,IAAI/U,KAAK+U,IAAKy1B,GAE9BxqC,KAAK+U,IAAMy1B,OAGIxmC,IAAbhE,KAAKsS,IACPtS,KAAKsS,IAAMjF,KAAKiF,IAAItS,KAAKsS,IAAKm4B,GAE9BzqC,KAAKsS,IAAMm4B,EAGN,CAACzqC,KAAK+U,IAAK/U,KAAKsS,MAGzBs3B,EAAA1pC,UAAAy1B,cAAA,WACE,OAAOjO,EAAAA,cACJ/I,MAAM,CAAC,EAAG3e,KAAKgqC,YACflZ,OACAvb,OAAOvV,KAAKm2B,cAGjByT,EAAA1pC,UAAAkpC,gBAAA,WACE,IAAMrnC,EAAQ/B,KAAK8P,QAAQkI,KAAI,SAAA1Y,GAAK,OAAAA,EAAEyC,SAAOooB,QAAO,SAACoG,EAAGhxB,GAAM,OAAAgxB,EAAIhxB,IAAG,GAErE,OAAIS,KAAK0qC,WAAa,IAAM1qC,KAAK0qC,UAAU/pC,OAClCX,KAAK0qC,UAAUt2B,iBAGpBpU,KAAK8jB,gBACA9jB,KAAK8jB,gBAAgB/hB,GAGvBA,EAAMqS,kBAGfw1B,EAAA1pC,UAAA4lC,UAAA,SAAUG,GAAV,IAAAz8B,EAAAxJ,KACE,QADQ,IAAAimC,IAAAA,GAAA,GACHjmC,KAAKiqC,SAAV,CAGQ,IAAAviC,EAAA1H,KAAAqmC,OAAA5iC,cAAAkG,wBAAAjC,MACF+hC,EAAWzpC,KAAKwmC,YAEtB,GAAc,IAAV9+B,EACF1H,KAAKwmC,YAAc,MACd,CACL,IAAMmE,EAAiB3qC,KAAKqqC,WAC5BrqC,KAAKwmC,YAAcn5B,KAAKC,MAAOq9B,GAAkBjjC,EAAQ1H,KAAKwmC,aAAgB,KAAO,IAGnFxmC,KAAKwmC,cAAgBiD,IACvBzpC,KAAKyU,cAAgB,SAASzU,KAAKwmC,YAAW,KAAKxmC,KAAKwmC,YAAW,IACnExmC,KAAKoP,GAAGc,eACJ+1B,GACFv/B,YAAW,WAAM,OAAA8C,EAAKs8B,WAAU,KAAQ,OAK9C8D,EAAA1pC,UAAAkf,QAAA,SAAQvO,GACN7Q,KAAKuP,OAAOZ,KAAKkC,IAGnB+4B,EAAA1pC,UAAA0vB,iBAAA,WACE,MAAO,CACLniB,UAAW,UACXmR,OAAQ5e,KAAK4e,OACbrJ,OAAQvV,KAAKuV,OACbyG,MAAOhc,KAAKkuB,YACZ5kB,SAAUtJ,KAAKyrB,iBAInBme,EAAA1pC,UAAAyvB,UAAA,WACE3vB,KAAK4e,OAAS,IAAIoN,GAAYhsB,KAAKqP,OAAQ,UAAWrP,KAAKuV,OAAQvV,KAAKisB,eAG1E2d,EAAA1pC,UAAA0xB,WAAA,SAAW5gB,GACGhR,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,UAEvC,IAIX/B,KAAKuf,cAAajd,EAAA,CAAI0O,GAAShR,KAAKuf,eACpCvf,KAAKsd,SAAS3O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,kBAGlDqqB,EAAA1pC,UAAA4xB,aAAA,SAAa9gB,GACX,IAAMrF,EAAM3L,KAAKuf,cAAcxB,WAAU,SAAAze,GACvC,OAAOA,EAAEkR,OAASQ,EAAKR,MAAQlR,EAAEyC,QAAUiP,EAAKjP,SAGlD/B,KAAKuf,cAAc1T,OAAOF,EAAK,GAC/B3L,KAAKuf,cAAajd,EAAOtC,KAAKuf,eAE9Bvf,KAAKud,WAAW5O,KAAK,CAAE5M,MAAOiP,EAAM6gB,QAAS7xB,KAAKuf,iBAGpDqqB,EAAA1pC,UAAAmf,SAAA,SAASC,GACP,QAAKtf,KAAKuf,oBAIMvb,IAHHhE,KAAKuf,cAAcC,MAAK,SAAAlgB,GACnC,OAAOggB,EAAM9O,OAASlR,EAAEkR,MAAQ8O,EAAM5O,SAAWpR,EAAEoR,WAKvDk5B,EAAA1pC,UAAA2oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKu5B,SAAS15B,KAAKL,MAzQnB1P,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCAGQvJ,EAAA,CAARuJ,EAAAA,sCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCixB,EAAAA,aAAa,0DAEOjxB,EAAA,CAApBwJ,EAAAA,UAAU,wCA5BAs/B,EAAc9oC,EAAA,CA/D1B2J,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAU,+4DA0DVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,k2DAE9B87B,IAAuB16B,iBCtCpC,SAAA07B,IAKW5qC,KAAAqf,UAAoB,EACpBrf,KAAAwZ,iBAA2B,EAG3BxZ,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAAsd,SAAW,IAAI7Q,EAAAA,aACfzM,KAAAud,WAAa,IAAI9Q,EAAAA,aAiB7B,OAfEm+B,EAAA1qC,UAAA23B,YAAA,SAAY8I,GACV,IACI7d,EADEvS,EAAQ+L,EAAYqkB,EAAI9vB,KAAKL,MASnC,OALEsS,EADE9iB,KAAK8jB,gBACD9jB,KAAK8jB,gBAAgB6c,EAAI9vB,KAAK9O,OAE9Bua,EAAYqkB,EAAI9vB,KAAK9O,OAGtB,uCACyBwa,EAAYhM,GAAM,4CACpBuS,EAAG,iBA1B1BhiB,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAbUk9B,EAAiB9pC,EAAA,CAxC7B2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,8pCAoCViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B88B,oBClBb,SAAAC,IAaE7qC,KAAA8qC,OAAiB,GAkGnB,OAhGED,EAAA3qC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP+9B,EAAA3qC,UAAA4M,OAAA,WACE9M,KAAK+qC,eAAiB,GAAK/qC,KAAKg/B,WAChCh/B,KAAK8qC,OAAS,UAAU9qC,KAAK+qC,cAAa,IAC1C/qC,KAAK0S,MAAQ1S,KAAKiU,YAGpB42B,EAAA3qC,UAAA+T,SAAA,WAYE,IAXA,IAAM+2B,EAAiBhrC,KAAKgqC,UAAYhqC,KAAK6pC,YACvCoB,EAAmBD,EAAiBhrC,KAAK8pC,cAEzCp3B,EAAQ,CACZw4B,IAAK,GACLC,MAAO,IAGHC,EAAgBprC,KAAK+e,OAAS,GAC9BssB,EAAWD,EAPE,GAO2B,GAErC5qC,EAAI,EAAGA,GAAKR,KAAK6pC,YAAarpC,IAAK,CAC1C,IAAM8qC,EAAW9qC,EAAIwqC,EACf32B,EAASi3B,EAAWj+B,KAAK8H,GAAM,IAE/BpD,EAAa/R,KAAKurC,cAAcD,GAElCE,GAAO,EAKX,GAJU,IAANhrC,GAA8B,MAAnBR,KAAKgqC,YAClBwB,GAAO,IAGJA,EAAM,CACT,IAAIC,EAAOntB,OAAOoF,WAAW1jB,KAAKysB,WAAWvE,OAAOojB,GAAU32B,YAAYP,iBACtEpU,KAAKkU,iBACPu3B,EAAOzrC,KAAKkU,eAAeu3B,IAE7B/4B,EAAMw4B,IAAI9oC,KAAK,CACbm7B,KAAMv9B,KAAK0rC,YAAYN,EA1BV,GA0BqC/2B,GAClDtC,WAAUA,EACV05B,KAAIA,EACJh3B,cAAe,2BACD42B,EAAWh+B,KAAK6H,IAAIb,GAAM,KAAKg3B,EAAWh+B,KAAK8xB,IAAI9qB,GAAM,aAAarU,KAAK+qC,cAAa,kBAK1G,GAAIvqC,IAAMR,KAAK6pC,YAIf,IAAK,IAAIl5B,EAAI,EAAGA,GAAK3Q,KAAK8pC,cAAen5B,IAAK,CAC5C,IACMg7B,GADgBL,EAAW36B,EAAIs6B,GACD59B,KAAK8H,GAAM,IAE/CzC,EAAMy4B,MAAM/oC,KAAK,CACfm7B,KAAMv9B,KAAK0rC,YAAYN,EAAex2B,GAAgB+2B,MAK5D,OAAOj5B,GAGTm4B,EAAA3qC,UAAAqrC,cAAA,SAAcl3B,GAOZ,IAAItC,EAAa,SAMjB,OAPAsC,GAASrU,KAAKg/B,WAAa3qB,GAAS,KAExB,IAAMA,GAAS,IACzBtC,EAAa,QACJsC,EAAQ,KAAOA,GAAS,MACjCtC,EAAa,OAERA,GAGT84B,EAAA3qC,UAAAwrC,YAAA,SAAYN,EAAex2B,EAAYP,GACrC,IAAMsD,EAAKyzB,EAAgB/9B,KAAK8xB,IAAI9qB,GAC9BqD,GAAM0zB,EAAgBx2B,GAAcvH,KAAK8xB,IAAI9qB,GAI7CmY,EAAS,CACb,CAAEpa,EAJOg5B,EAAgB/9B,KAAK6H,IAAIb,GAIzBnC,EAAGyF,GACZ,CAAEvF,GAJQg5B,EAAgBx2B,GAAcvH,KAAK6H,IAAIb,GAIxCnC,EAAGwF,IAKd,OAHsB6lB,EAAAA,OACnBnrB,GAAE,SAAA9S,GAAK,OAAAA,EAAE8S,KACTF,GAAE,SAAA5S,GAAK,OAAAA,EAAE4S,IACL05B,CAAcpf,IA5Gd1rB,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CATUwgC,EAAkB/pC,EAAA,CAvB9B2J,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAU,ipBAmBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B+8B,oBCZb,SAAAgB,KAA0B,OAAbA,EAAW/qC,EAAA,CALvB8X,EAAAA,SAAS,CACRC,QAAS,CAAC+R,GAAmBma,GAAgB9L,IAC7ClgB,aAAc,CAAC2vB,GAAsBkB,GAAgBgB,GAAmBC,IACxE7xB,QAAS,CAAC0vB,GAAsBkB,GAAgBgB,GAAmBC,OAExDgB,wBCgBX,SAAAC,IC1B0B,oBAAfC,iBAAuE,IAAlCA,WAAW7rC,UAAUgb,WACnE6wB,WAAW7rC,UAAUgb,SAAW8wB,eAAe9rC,UAAUgb,UD4B7D,OAJa4wB,EAAehrC,EAAA,CAf3B8X,EAAAA,SAAS,CACRI,QAAS,CACP4R,GACA8I,GACAuF,GACAkC,GACAoB,GACAkB,GACAuH,GACA0C,GACA3C,GACA0D,GACAoD,OAGSC,wrEbtBb,SAAyB/pC,GAEvB,OAAO2kC,EAAAA,IAAa3kC,sKePKkqC,EAAWC,GACpC,OAAO,SAAS37B,GACd,MAAc,aAAVA,GAAkC,UAAVA,EACnBA,EAES,SAAd07B,GAAwC,YAAhBC,EACRC,EAAAA,WAAW,aACtBC,CAAe77B,GAGjBA,EAAMoE","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  ViewContainerRef,\r\n  EmbeddedViewRef,\r\n  Type\r\n} from '@angular/core';\r\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\r\n\r\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\r\n  return x.element;\r\n}\r\n\r\n/**\r\n * Injection service is a helper to append components\r\n * dynamically to a known location in the DOM, most\r\n * noteably for dialogs/tooltips appending to body.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class InjectionService {\r\n  static globalRootViewContainer: ViewContainerRef = null;\r\n\r\n  /**\r\n   * Sets a default global root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   */\r\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\r\n    InjectionService.globalRootViewContainer = container;\r\n  }\r\n\r\n  private _container: ViewContainerRef;\r\n\r\n  constructor(\r\n    private applicationRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  /**\r\n   * Gets the root view container to inject the component to.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\r\n    if (this._container) return this._container;\r\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\r\n\r\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\r\n\r\n    throw new Error(\r\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Overrides the default root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  setRootViewContainer(container: ViewContainerRef): void {\r\n    this._container = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the html element for a component ref.\r\n   *\r\n   * @param componentRef\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    if (isViewContainerRef(component)) {\r\n      return component.element.nativeElement;\r\n    }\r\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\r\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n    }\r\n\r\n    // the top most component root node has no `hostView`\r\n    return component.location.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Gets the root component container html element.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    return this.getComponentRootNode(component);\r\n  }\r\n\r\n  /**\r\n   * Projects the bindings onto the component\r\n   *\r\n   * @param component\r\n   * @param options\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\r\n    if (bindings) {\r\n      if (bindings.inputs !== undefined) {\r\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\r\n        for (const bindingName of bindingKeys) {\r\n          component.instance[bindingName] = bindings.inputs[bindingName];\r\n        }\r\n      }\r\n\r\n      if (bindings.outputs !== undefined) {\r\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\r\n        for (const eventName of eventKeys) {\r\n          component.instance[eventName] = bindings.outputs[eventName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return component;\r\n  }\r\n\r\n  /**\r\n   * Appends a component to a adjacent location\r\n   *\r\n   * @param componentClass\r\n   * @param [options={}]\r\n   * @param [location]\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\r\n    if (!location) location = this.getRootViewContainer();\r\n    const appendLocation = this.getComponentRootNode(location);\r\n\r\n    const portalHost = new DomPortalHost(\r\n      appendLocation,\r\n      this.componentFactoryResolver,\r\n      this.applicationRef,\r\n      this.injector\r\n    );\r\n\r\n    const portal = new ComponentPortal(componentClass);\r\n\r\n    const componentRef = portalHost.attach(portal);\r\n    this.projectComponentBindings(componentRef, bindings);\r\n    return componentRef;\r\n  }\r\n}\r\n","export enum PlacementTypes {\r\n  top = 'top' as any,\r\n  bottom = 'bottom' as any,\r\n  left = 'left' as any,\r\n  right = 'right' as any\r\n}\r\n","/**\r\n * Throttle a function\r\n *\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context;\r\n  let args;\r\n  let result;\r\n  let timeout = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function() {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target, key, descriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { PlacementTypes } from './placement.type';\r\n\r\nconst caretOffset = 7;\r\n\r\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'top') {\r\n    return elDimensions.top - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'bottom') {\r\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'left') {\r\n    return elDimensions.left - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'right') {\r\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Position helper for the popover directive.\r\n *\r\n * @export\r\n */\r\nexport class PositionHelper {\r\n  /**\r\n   * Calculate vertical alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.height > window.innerHeight) {\r\n      result = window.innerHeight - popoverDimensions.height;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate vertical caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'top') {\r\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'bottom') {\r\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\r\n    }\r\n\r\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\r\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.width > window.innerWidth) {\r\n      result = window.innerWidth - popoverDimensions.width;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'left') {\r\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'right') {\r\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\r\n    }\r\n\r\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\r\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Checks if the element's position should be flipped\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\r\n    let flip = false;\r\n\r\n    if (placement === 'right') {\r\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'left') {\r\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'top') {\r\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'bottom') {\r\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    return flip;\r\n  }\r\n\r\n  /**\r\n   * Position caret\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = -7;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = elmDim.width;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = elmDim.height;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = -7;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Position content\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = hostDim.left + hostDim.width + spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = hostDim.left - elmDim.width - spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = hostDim.top - elmDim.height - spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = hostDim.top + hostDim.height + spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Determine placement based on flip\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\r\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\r\n\r\n    if (shouldFlip) {\r\n      if (placement === PlacementTypes.right) {\r\n        return PlacementTypes.left;\r\n      } else if (placement === PlacementTypes.left) {\r\n        return PlacementTypes.right;\r\n      } else if (placement === PlacementTypes.top) {\r\n        return PlacementTypes.bottom;\r\n      } else if (placement === PlacementTypes.bottom) {\r\n        return PlacementTypes.top;\r\n      }\r\n    }\r\n\r\n    return placement;\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ViewChild,\r\n  HostBinding,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\nimport { throttleable } from '../../utils/throttle';\r\nimport { PositionHelper, PlacementTypes } from './position';\r\n\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\n\r\n@Component({\r\n  selector: 'ngx-tooltip-content',\r\n  template: `\r\n    <div>\r\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\r\n      <div class=\"tooltip-content\">\r\n        <span *ngIf=\"!title\">\r\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\r\n        </span>\r\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipContentComponent implements AfterViewInit {\r\n  @Input() host: any;\r\n  @Input() showCaret: boolean;\r\n  @Input() type: StyleTypes;\r\n  @Input() placement: PlacementTypes;\r\n  @Input() alignment: AlignmentTypes;\r\n  @Input() spacing: number;\r\n  @Input() cssClass: string;\r\n  @Input() title: string;\r\n  @Input() template: any;\r\n  @Input() context: any;\r\n\r\n  @ViewChild('caretElm') caretElm;\r\n\r\n  @HostBinding('class')\r\n  get cssClasses(): string {\r\n    let clz = 'ngx-charts-tooltip-content';\r\n    clz += ` position-${this.placement}`;\r\n    clz += ` type-${this.type}`;\r\n    clz += ` ${this.cssClass}`;\r\n    return clz;\r\n  }\r\n\r\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(this.position.bind(this));\r\n  }\r\n\r\n  position(): void {\r\n    const nativeElm = this.element.nativeElement;\r\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\r\n\r\n    // if no dims were found, never show\r\n    if (!hostDim.height && !hostDim.width) return;\r\n\r\n    const elmDim = nativeElm.getBoundingClientRect();\r\n    this.checkFlip(hostDim, elmDim);\r\n    this.positionContent(nativeElm, hostDim, elmDim);\r\n\r\n    if (this.showCaret) {\r\n      this.positionCaret(hostDim, elmDim);\r\n    }\r\n\r\n    // animate its entry\r\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\r\n  }\r\n\r\n  positionContent(nativeElm, hostDim, elmDim): void {\r\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\r\n\r\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\r\n  }\r\n\r\n  positionCaret(hostDim, elmDim): void {\r\n    const caretElm = this.caretElm.nativeElement;\r\n    const caretDimensions = caretElm.getBoundingClientRect();\r\n    const { top, left } = PositionHelper.positionCaret(\r\n      this.placement,\r\n      elmDim,\r\n      hostDim,\r\n      caretDimensions,\r\n      this.alignment\r\n    );\r\n\r\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\r\n  }\r\n\r\n  checkFlip(hostDim, elmDim): void {\r\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  @throttleable(100)\r\n  onWindowResize(): void {\r\n    this.position();\r\n  }\r\n}\r\n","import { ComponentRef, Type } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\n\r\nexport interface PartialBindings {\r\n  inputs?: object;\r\n  outputs?: object;\r\n}\r\n\r\nexport abstract class InjectionRegisteryService<T = any> {\r\n  protected abstract type: Type<T>;\r\n\r\n  protected defaults: PartialBindings = {};\r\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\r\n\r\n  constructor(public injectionService: InjectionService) {}\r\n\r\n  getByType(type: Type<T> = this.type) {\r\n    return this.components.get(type);\r\n  }\r\n\r\n  create(bindings: object): ComponentRef<T> {\r\n    return this.createByType(this.type, bindings);\r\n  }\r\n\r\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    bindings = this.assignDefaults(bindings);\r\n\r\n    const component = this.injectComponent(type, bindings);\r\n    this.register(type, component);\r\n\r\n    return component;\r\n  }\r\n\r\n  destroy(instance: ComponentRef<T>): void {\r\n    const compsByType = this.components.get(instance.componentType);\r\n\r\n    if (compsByType && compsByType.length) {\r\n      const idx = compsByType.indexOf(instance);\r\n\r\n      if (idx > -1) {\r\n        const component = compsByType[idx];\r\n        component.destroy();\r\n        compsByType.splice(idx, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  destroyAll(): void {\r\n    this.destroyByType(this.type);\r\n  }\r\n\r\n  destroyByType(type: Type<T>): void {\r\n    const comps = this.components.get(type);\r\n\r\n    if (comps && comps.length) {\r\n      let i = comps.length - 1;\r\n      while (i >= 0) {\r\n        this.destroy(comps[i--]);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    return this.injectionService.appendComponent(type, bindings);\r\n  }\r\n\r\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\r\n    const inputs = { ...this.defaults.inputs };\r\n    const outputs = { ...this.defaults.outputs };\r\n\r\n    if (!bindings.inputs && !bindings.outputs) {\r\n      bindings = { inputs: bindings };\r\n    }\r\n\r\n    if (inputs) {\r\n      bindings.inputs = { ...inputs, ...bindings.inputs };\r\n    }\r\n\r\n    if (outputs) {\r\n      bindings.outputs = { ...outputs, ...bindings.outputs };\r\n    }\r\n\r\n    return bindings;\r\n  }\r\n\r\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\r\n    if (!this.components.has(type)) {\r\n      this.components.set(type, []);\r\n    }\r\n\r\n    const types = this.components.get(type);\r\n    types.push(component);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { InjectionRegisteryService } from './injection-registery.service';\r\n@Injectable()\r\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\r\n  type: any = TooltipContentComponent;\r\n\r\n  constructor(injectionService: InjectionService) {\r\n    super(injectionService);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { TooltipService } from '../tooltip/tooltip.service';\r\n\r\n@Component({\r\n  providers: [TooltipService],\r\n  selector: 'ngx-charts-chart',\r\n  template: `\r\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\r\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\r\n        <ng-content></ng-content>\r\n      </svg>\r\n      <ngx-charts-scale-legend\r\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [valueRange]=\"legendOptions.domain\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n      >\r\n      </ngx-charts-scale-legend>\r\n      <ngx-charts-legend\r\n        *ngIf=\"showLegend && legendType === 'legend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [data]=\"legendOptions.domain\"\r\n        [title]=\"legendOptions.title\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n        [activeEntries]=\"activeEntries\"\r\n        (labelClick)=\"legendLabelClick.emit($event)\"\r\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\r\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\r\n      >\r\n      </ngx-charts-legend>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\r\n    ])\r\n  ]\r\n})\r\nexport class ChartComponent implements OnChanges {\r\n  @Input() view;\r\n  @Input() showLegend = false;\r\n  @Input() legendOptions: any;\r\n\r\n  // remove\r\n  @Input() data;\r\n  @Input() legendData;\r\n  @Input() legendType: any;\r\n  @Input() colors: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  chartWidth: any;\r\n  title: any;\r\n  legendWidth: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let legendColumns = 0;\r\n    if (this.showLegend) {\r\n      this.legendType = this.getLegendType();\r\n\r\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\r\n        if (this.legendType === 'scaleLegend') {\r\n          legendColumns = 1;\r\n        } else {\r\n          legendColumns = 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    const chartColumns = 12 - legendColumns;\r\n\r\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\r\n    this.legendWidth =\r\n      !this.legendOptions || this.legendOptions.position === 'right'\r\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\r\n        : this.chartWidth;\r\n  }\r\n\r\n  getLegendType(): string {\r\n    if (this.legendOptions.scaleType === 'linear') {\r\n      return 'scaleLegend';\r\n    } else {\r\n      return 'legend';\r\n    }\r\n  }\r\n}\r\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer\r\n */\r\n@Directive({\r\n  selector: 'visibility-observer'\r\n})\r\nexport class VisibilityObserver {\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n  isVisible: boolean = false;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {\r\n    this.runCheck();\r\n  }\r\n\r\n  destroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      if (!this.element) {\r\n        return;\r\n      }\r\n\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 100);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.timeout = setTimeout(() => check());\r\n    });\r\n  }\r\n}\r\n","import {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\n\n\nimport { VisibilityObserver } from '../utils/visibility-observer';\n\n@Component({\n  selector: 'base-chart',\n  template: `\n    <div></div>\n  `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    // const source = observableFromEvent(window, 'resize');\n    // const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n    //   this.update();\n    //   if (this.cd) {\n    //     this.cd.markForCheck();\n    //   }\n    // });\n    // this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-axis-label]',\r\n  template: `\r\n    <svg:text\r\n      [attr.stroke-width]=\"strokeWidth\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n    >\r\n      {{ label }}\r\n    </svg:text>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AxisLabelComponent implements OnChanges {\r\n  @Input() orient;\r\n  @Input() label;\r\n  @Input() offset;\r\n  @Input() width;\r\n  @Input() height;\r\n\r\n  x: any;\r\n  y: any;\r\n  transform: any;\r\n  strokeWidth: any;\r\n  textAnchor: any;\r\n  element: ElementRef;\r\n  textHeight = 25;\r\n  margin = 5;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.strokeWidth = '0.01';\r\n    this.textAnchor = 'middle';\r\n    this.transform = '';\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'bottom':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'left':\r\n        this.y = -(this.offset + this.textHeight + this.margin);\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      case 'right':\r\n        this.y = this.offset + this.margin;\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n}\r\n","export function trimLabel(s, max = 16): string {\r\n  if (typeof s !== 'string') {\r\n    if (typeof s === 'number') {\r\n      return s + '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  s = s.trim();\r\n  if (s.length <= max) {\r\n    return s;\r\n  } else {\r\n    return `${s.slice(0, max)}...`;\r\n  }\r\n}\r\n","export function reduceTicks(ticks, maxTicks) {\r\n  if (ticks.length > maxTicks) {\r\n    const reduced = [];\r\n    const modulus = Math.floor(ticks.length / maxTicks);\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      if (i % modulus === 0) {\r\n        reduced.push(ticks[i]);\r\n      }\r\n    }\r\n    ticks = reduced;\r\n  }\r\n\r\n  return ticks;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [attr.transform]=\"textTransform\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineHeight;\r\n  @Input() width;\r\n  @Input() rotateTicks: boolean = true;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  verticalSpacing: number = 20;\r\n  rotateLabels: boolean = false;\r\n  innerTickSize: number = 6;\r\n  outerTickSize: number = 6;\r\n  tickPadding: number = 3;\r\n  textAnchor: string = 'middle';\r\n  maxTicksLength: number = 0;\r\n  maxAllowedLength: number = 16;\r\n  adjustedScale: any;\r\n  textTransform: any;\r\n  ticks: any;\r\n  tickFormat: (o: any) => any;\r\n  height: number = 0;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\r\n    if (height !== this.height) {\r\n      this.height = height;\r\n      this.dimensionsChanged.emit({ height });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    const scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function(d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\r\n\r\n    this.adjustedScale = this.scale.bandwidth\r\n      ? function(d) {\r\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\r\n        }\r\n      : this.scale;\r\n\r\n    this.textTransform = '';\r\n    if (angle && angle !== 0) {\r\n      this.textTransform = `rotate(${angle})`;\r\n      this.textAnchor = 'end';\r\n      this.verticalSpacing = 10;\r\n    } else {\r\n      this.textAnchor = 'middle';\r\n    }\r\n\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  getRotationAngle(ticks): number {\r\n    let angle = 0;\r\n    this.maxTicksLength = 0;\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      const tick = this.tickFormat(ticks[i]).toString();\r\n      let tickLength = tick.length;\r\n      if (this.trimTicks) {\r\n        tickLength = this.tickTrim(tick).length;\r\n      }\r\n\r\n      if (tickLength > this.maxTicksLength) {\r\n        this.maxTicksLength = tickLength;\r\n      }\r\n    }\r\n\r\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\r\n    const charWidth = 8; // need to measure this\r\n    const wordWidth = len * charWidth;\r\n\r\n    let baseWidth = wordWidth;\r\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\r\n\r\n    // calculate optimal angle\r\n    while (baseWidth > maxBaseWidth && angle > -90) {\r\n      angle -= 30;\r\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  getTicks() {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(100);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickWidth: number): number {\r\n    return Math.floor(this.width / tickWidth);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(0,${-this.verticalSpacing - 5})`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-x-axis-ticks\r\n        *ngIf=\"xScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [rotateTicks]=\"rotateTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"xScale\"\r\n        [orient]=\"xOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineHeight]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n        [tickValues]=\"ticks\"\r\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"'bottom'\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisComponent implements OnChanges {\r\n  @Input() xScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() rotateTicks: boolean = true;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() ticks: any[];\r\n  @Input() xAxisTickInterval;\r\n  @Input() xAxisTickCount: any;\r\n  @Input() xOrient: string = 'bottom';\r\n  @Input() xAxisOffset: number = 0;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  xAxisClassName: string = 'x axis';\r\n\r\n  tickArguments: any;\r\n  transform: any;\r\n  labelOffset: number = 0;\r\n  fill: string = 'none';\r\n  stroke: string = 'stroke';\r\n  tickStroke: string = '#ccc';\r\n  strokeWidth: string = 'none';\r\n  padding: number = 5;\r\n\r\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\r\n\r\n    if (typeof this.xAxisTickCount !== 'undefined') {\r\n      this.tickArguments = [this.xAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksHeight({ height }): void {\r\n    const newLabelOffset = height + 25 + 5;\r\n    if (newLabelOffset !== this.labelOffset) {\r\n      this.labelOffset = newLabelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ height });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Generates a rounded rectanglar path\r\n *\r\n * @export\r\n * @param x, y, w, h, r, tl, tr, bl, br\r\n */\r\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\r\n  let retval = '';\r\n\r\n  w = Math.floor(w);\r\n  h = Math.floor(h);\r\n\r\n  w = w === 0 ? 1 : w;\r\n  h = h === 0 ? 1 : h;\r\n\r\n  retval = `M${[x + r, y]}`;\r\n  retval += `h${w - 2 * r}`;\r\n\r\n  if (tr) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\r\n  } else {\r\n    retval += `h${r}v${r}`;\r\n  }\r\n\r\n  retval += `v${h - 2 * r}`;\r\n\r\n  if (br) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\r\n  } else {\r\n    retval += `v${r}h${-r}`;\r\n  }\r\n\r\n  retval += `h${2 * r - w}`;\r\n\r\n  if (bl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\r\n  } else {\r\n    retval += `h${-r}v${-r}`;\r\n  }\r\n\r\n  retval += `v${2 * r - h}`;\r\n\r\n  if (tl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\r\n  } else {\r\n    retval += `v${-r}h${r}`;\r\n  }\r\n\r\n  retval += `z`;\r\n\r\n  return retval;\r\n}\r\n","export enum StyleTypes {\r\n  popover = 'popover' as any,\r\n  tooltip = 'tooltip' as any\r\n}\r\n","export enum AlignmentTypes {\r\n  left = 'left' as any,\r\n  center = 'center' as any,\r\n  right = 'right' as any\r\n}\r\n","export enum ShowTypes {\r\n  all = 'all' as any,\r\n  focus = 'focus' as any,\r\n  mouseover = 'mouseover' as any\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\nimport { roundedRect } from '../../common/shape.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.dy]=\"dy\"\r\n          [attr.x]=\"x1\"\r\n          [attr.y]=\"y1\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:path\r\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\r\n      class=\"reference-area\"\r\n      [attr.d]=\"referenceAreaPath\"\r\n      [attr.transform]=\"gridLineTransform()\"\r\n    />\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line\r\n          *ngIf=\"orient === 'left'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n        />\r\n        <svg:line\r\n          *ngIf=\"orient === 'right'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"-gridLineWidth\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g *ngFor=\"let refLine of referenceLines\">\r\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\r\n        <svg:line\r\n          class=\"refline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n          [attr.transform]=\"gridLineTransform()\"\r\n        />\r\n        <svg:g *ngIf=\"showRefLabels\">\r\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\r\n          <svg:text\r\n            class=\"refline-label\"\r\n            [attr.dy]=\"dy\"\r\n            [attr.y]=\"-6\"\r\n            [attr.x]=\"gridLineWidth\"\r\n            [attr.text-anchor]=\"textAnchor\"\r\n          >\r\n            {{ refLine.name }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineWidth;\r\n  @Input() height;\r\n  @Input() referenceLines;\r\n  @Input() showRefLabels: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  innerTickSize: any = 6;\r\n  tickPadding: any = 3;\r\n  tickSpacing: any;\r\n  verticalSpacing: number = 20;\r\n  textAnchor: any = 'middle';\r\n  dy: any;\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n  adjustedScale: any;\r\n  transform: (o: any) => string;\r\n  tickFormat: (o: any) => string;\r\n  ticks: any;\r\n  width: number = 0;\r\n  outerTickSize: number = 6;\r\n  rotateLabels: boolean = false;\r\n  refMax: number;\r\n  refMin: number;\r\n  referenceLineLength: number = 0;\r\n  referenceAreaPath: string;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\r\n    if (width !== this.width) {\r\n      this.width = width;\r\n      this.dimensionsChanged.emit({ width });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    let scale;\r\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\r\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\r\n\r\n    scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function(d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    this.adjustedScale = scale.bandwidth\r\n      ? function(d) {\r\n          return scale(d) + scale.bandwidth() * 0.5;\r\n        }\r\n      : scale;\r\n\r\n    if (this.showRefLines && this.referenceLines) {\r\n      this.setReferencelines();\r\n    }\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.transform = function(tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'bottom':\r\n        this.transform = function(tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'left':\r\n        this.transform = function(tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'end';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      case 'right':\r\n        this.transform = function(tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'start';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      default:\r\n    }\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  setReferencelines(): void {\r\n    this.refMin = this.adjustedScale(\r\n      Math.min.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.refMax = this.adjustedScale(\r\n      Math.max.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.referenceLineLength = this.referenceLines.length;\r\n\r\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ]);\r\n  }\r\n\r\n  getTicks(): any {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(50);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickHeight: number): number {\r\n    return Math.floor(this.height / tickHeight);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(5,0)`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-y-axis-ticks\r\n        *ngIf=\"yScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickValues]=\"ticks\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"yScale\"\r\n        [orient]=\"yOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineWidth]=\"dims.width\"\r\n        [referenceLines]=\"referenceLines\"\r\n        [showRefLines]=\"showRefLines\"\r\n        [showRefLabels]=\"showRefLabels\"\r\n        [height]=\"dims.height\"\r\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\r\n      />\r\n\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"yOrient\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisComponent implements OnChanges {\r\n  @Input() yScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() ticks: any[];\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() yAxisTickInterval;\r\n  @Input() yAxisTickCount: any;\r\n  @Input() yOrient: string = 'left';\r\n  @Input() referenceLines;\r\n  @Input() showRefLines;\r\n  @Input() showRefLabels;\r\n  @Input() yAxisOffset: number = 0;\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  yAxisClassName: string = 'y axis';\r\n  tickArguments: any;\r\n  offset: any;\r\n  transform: any;\r\n  labelOffset: number = 15;\r\n  fill: string = 'none';\r\n  stroke: string = '#CCC';\r\n  tickStroke: string = '#CCC';\r\n  strokeWidth: number = 1;\r\n  padding: number = 5;\r\n\r\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.offset = -(this.yAxisOffset + this.padding);\r\n    if (this.yOrient === 'right') {\r\n      this.labelOffset = 65;\r\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\r\n    } else {\r\n      this.offset = this.offset;\r\n      this.transform = `translate(${this.offset} , 0)`;\r\n    }\r\n\r\n    if (this.yAxisTickCount !== undefined) {\r\n      this.tickArguments = [this.yAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksWidth({ width }): void {\r\n    if (width !== this.labelOffset && this.yOrient === 'right') {\r\n      this.labelOffset = width + this.labelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    } else if (width !== this.labelOffset) {\r\n      this.labelOffset = width;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AxisLabelComponent } from './axis-label.component';\r\nimport { XAxisComponent } from './x-axis.component';\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\nimport { YAxisComponent } from './y-axis.component';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\r\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\r\n})\r\nexport class AxesModule {}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewContainerRef,\r\n  Renderer2,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { PlacementTypes } from './position';\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\nimport { ShowTypes } from './show.type';\r\n\r\nimport { TooltipService } from './tooltip.service';\r\n\r\n@Directive({ selector: '[ngx-tooltip]' })\r\nexport class TooltipDirective implements OnDestroy {\r\n  @Input() tooltipCssClass: string = '';\r\n  @Input() tooltipTitle: string = '';\r\n  @Input() tooltipAppendToBody: boolean = true;\r\n  @Input() tooltipSpacing: number = 10;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipShowCaret: boolean = true;\r\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\r\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\r\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\r\n  @Input() tooltipCloseOnClickOutside: boolean = true;\r\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\r\n  @Input() tooltipHideTimeout: number = 300;\r\n  @Input() tooltipShowTimeout: number = 100;\r\n  @Input() tooltipTemplate: any;\r\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\r\n  @Input() tooltipContext: any;\r\n  @Input() tooltipImmediateExit: boolean = false;\r\n\r\n  @Output() show = new EventEmitter();\r\n  @Output() hide = new EventEmitter();\r\n\r\n  private get listensForFocus(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\r\n  }\r\n\r\n  private get listensForHover(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\r\n  }\r\n\r\n  private component: any;\r\n  private timeout: any;\r\n  private mouseLeaveContentEvent: any;\r\n  private mouseEnterContentEvent: any;\r\n  private documentClickEvent: any;\r\n\r\n  constructor(\r\n    private tooltipService: TooltipService,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.hideTooltip(true);\r\n  }\r\n\r\n  @HostListener('focusin')\r\n  onFocus(): void {\r\n    if (this.listensForFocus) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    if (this.listensForFocus) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    if (this.listensForHover) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event.target'])\r\n  onMouseLeave(target): void {\r\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\r\n      clearTimeout(this.timeout);\r\n\r\n      if (this.component) {\r\n        const contentDom = this.component.instance.element.nativeElement;\r\n        const contains = contentDom.contains(target);\r\n        if (contains) return;\r\n      }\r\n\r\n      this.hideTooltip(this.tooltipImmediateExit);\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  onMouseClick() {\r\n    if (this.listensForHover) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  showTooltip(immediate?: boolean): void {\r\n    if (this.component || this.tooltipDisabled) return;\r\n\r\n    const time = immediate ? 0 : this.tooltipShowTimeout;\r\n\r\n    clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(() => {\r\n      this.tooltipService.destroyAll();\r\n\r\n      const options = this.createBoundOptions();\r\n      this.component = this.tooltipService.create(options);\r\n\r\n      // add a tiny timeout to avoid event re-triggers\r\n      setTimeout(() => {\r\n        if (this.component) {\r\n          this.addHideListeners(this.component.instance.element.nativeElement);\r\n        }\r\n      }, 10);\r\n\r\n      this.show.emit(true);\r\n    }, time);\r\n  }\r\n\r\n  addHideListeners(tooltip): void {\r\n    // on mouse enter, cancel the hide triggered by the leave\r\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\r\n      clearTimeout(this.timeout);\r\n    });\r\n\r\n    // content mouse leave listener\r\n    if (this.tooltipCloseOnMouseLeave) {\r\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\r\n        this.hideTooltip(this.tooltipImmediateExit);\r\n      });\r\n    }\r\n\r\n    // content close on click outside\r\n    if (this.tooltipCloseOnClickOutside) {\r\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\r\n        const contains = tooltip.contains(event.target);\r\n        if (!contains) this.hideTooltip();\r\n      });\r\n    }\r\n  }\r\n\r\n  hideTooltip(immediate: boolean = false): void {\r\n    if (!this.component) return;\r\n\r\n    const destroyFn = () => {\r\n      // remove events\r\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\r\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\r\n      if (this.documentClickEvent) this.documentClickEvent();\r\n\r\n      // emit events\r\n      this.hide.emit(true);\r\n\r\n      // destroy component\r\n      this.tooltipService.destroy(this.component);\r\n      this.component = undefined;\r\n    };\r\n\r\n    clearTimeout(this.timeout);\r\n    if (!immediate) {\r\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\r\n    } else {\r\n      destroyFn();\r\n    }\r\n  }\r\n\r\n  private createBoundOptions(): any {\r\n    return {\r\n      title: this.tooltipTitle,\r\n      template: this.tooltipTemplate,\r\n      host: this.viewContainerRef.element,\r\n      placement: this.tooltipPlacement,\r\n      alignment: this.tooltipAlignment,\r\n      type: this.tooltipType,\r\n      showCaret: this.tooltipShowCaret,\r\n      cssClass: this.tooltipCssClass,\r\n      spacing: this.tooltipSpacing,\r\n      context: this.tooltipContext\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TooltipDirective } from './tooltip.directive';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { TooltipService } from './tooltip.service';\r\n\r\nimport { InjectionService } from './injection.service';\r\n\r\n@NgModule({\r\n  declarations: [TooltipContentComponent, TooltipDirective],\r\n  providers: [InjectionService, TooltipService],\r\n  exports: [TooltipContentComponent, TooltipDirective],\r\n  imports: [CommonModule],\r\n  entryComponents: [TooltipContentComponent]\r\n})\r\nexport class TooltipModule {}\r\n","/**\r\n * Formats a label given a date, number or string.\r\n *\r\n * @export\r\n */\r\nexport function formatLabel(label: any): string {\r\n  if (label instanceof Date) {\r\n    label = label.toLocaleDateString();\r\n  } else {\r\n    label = label.toLocaleString();\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\n/**\r\n * Escapes a label.\r\n *\r\n * @export\r\n */\r\nexport function escapeLabel(label: any): string {\r\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\r\n    return {\r\n      '&': '&amp;',\r\n      // tslint:disable-next-line: quotemark\r\n      \"'\": '&#x27;',\r\n      '`': '&#x60;',\r\n      '\"': '&quot;',\r\n      '<': '&lt;',\r\n      '>': '&gt;'\r\n    }[match];\r\n  });\r\n}\r\n","const cache = {};\r\n\r\n/**\r\n * Generates a short id.\r\n *\r\n * Description:\r\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\r\n *   This should only be used for JavaScript specific models.\r\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n *\r\n *   Example: `ebgf`\r\n */\r\nexport function id(): string {\r\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n\r\n  // append a 'a' because neo gets mad\r\n  newId = `a${newId}`;\r\n\r\n  // ensure not already used\r\n  if (!cache[newId]) {\r\n    cache[newId] = true;\r\n    return newId;\r\n  }\r\n\r\n  return id();\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle-series]',\r\n  template: `\r\n    <svg:g *ngIf=\"circle\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"circle.gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:rect\r\n        *ngIf=\"barVisible && type === 'standard'\"\r\n        [@animationState]=\"'active'\"\r\n        [attr.x]=\"circle.cx - circle.radius\"\r\n        [attr.y]=\"circle.cy\"\r\n        [attr.width]=\"circle.radius * 2\"\r\n        [attr.height]=\"circle.height\"\r\n        [attr.fill]=\"gradientFill\"\r\n        class=\"tooltip-bar\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circle.radius\"\r\n        [fill]=\"circle.color\"\r\n        [class.active]=\"isActive({ name: circle.seriesName })\"\r\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\r\n        [data]=\"circle.value\"\r\n        [classNames]=\"circle.classNames\"\r\n        (select)=\"onClick(circle.data)\"\r\n        (activate)=\"activateCircle()\"\r\n        (deactivate)=\"deactivateCircle()\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 1 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class CircleSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() type = 'standard';\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors: ColorHelper;\r\n  @Input() scaleType;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circle: any; // active circle\r\n  barVisible: boolean = false;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n\r\n  ngOnInit() {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circle = this.getActiveCircle();\r\n  }\r\n\r\n  getActiveCircle(): {} {\r\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\r\n      const label = d.name;\r\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\r\n    });\r\n\r\n    if (indexActiveDataPoint === -1) {\r\n      // No valid point is 'active/hovered over' at this moment.\r\n      return undefined;\r\n    }\r\n\r\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\r\n  }\r\n\r\n  mapDataPointToCircle(d: any, i: number): any {\r\n    const seriesName = this.data.name;\r\n\r\n    const value = d.value;\r\n    const label = d.name;\r\n    const tooltipLabel = formatLabel(label);\r\n\r\n    let cx;\r\n    if (this.scaleType === 'time') {\r\n      cx = this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      cx = this.xScale(Number(label));\r\n    } else {\r\n      cx = this.xScale(label);\r\n    }\r\n\r\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\r\n    const radius = 5;\r\n    const height = this.yScale.range()[0] - cy;\r\n    const opacity = 1;\r\n\r\n    let color;\r\n    if (this.colors.scaleType === 'linear') {\r\n      if (this.type === 'standard') {\r\n        color = this.colors.getColor(value);\r\n      } else {\r\n        color = this.colors.getColor(d.d1);\r\n      }\r\n    } else {\r\n      color = this.colors.getColor(seriesName);\r\n    }\r\n\r\n    const data = Object.assign({}, d, {\r\n      series: seriesName,\r\n      value,\r\n      name: label\r\n    });\r\n\r\n    return {\r\n      classNames: [`circle-data-${i}`],\r\n      value,\r\n      label,\r\n      data,\r\n      cx,\r\n      cy,\r\n      radius,\r\n      height,\r\n      tooltipLabel,\r\n      color,\r\n      opacity,\r\n      seriesName,\r\n      gradientStops: this.getGradientStops(color),\r\n      min: d.min,\r\n      max: d.max\r\n    };\r\n  }\r\n\r\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} â¢ ${escapeLabel(tooltipLabel)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\r\n    `;\r\n  }\r\n\r\n  getTooltipMinMaxText(min: any, max: any) {\r\n    if (min !== undefined || max !== undefined) {\r\n      let result = ' (';\r\n      if (min !== undefined) {\r\n        if (max === undefined) {\r\n          result += 'â¥';\r\n        }\r\n        result += min.toLocaleString();\r\n        if (max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (max !== undefined) {\r\n        result += 'â¤';\r\n      }\r\n      if (max !== undefined) {\r\n        result += max.toLocaleString();\r\n      }\r\n      result += ')';\r\n      return result;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  getGradientStops(color) {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color,\r\n        opacity: 0.2\r\n      },\r\n      {\r\n        offset: 100,\r\n        color,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activateCircle(): void {\r\n    this.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(): void {\r\n    this.barVisible = false;\r\n    this.circle.opacity = 0;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle]',\r\n  template: `\r\n    <svg:circle\r\n      [attr.cx]=\"cx\"\r\n      [attr.cy]=\"cy\"\r\n      [attr.r]=\"r\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      [attr.opacity]=\"circleOpacity\"\r\n      [attr.class]=\"classNames\"\r\n      [attr.pointer-events]=\"pointerEvents\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CircleComponent implements OnChanges {\r\n  @Input() cx;\r\n  @Input() cy;\r\n  @Input() r;\r\n  @Input() fill;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() classNames;\r\n  @Input() circleOpacity;\r\n  @Input() pointerEvents;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\r\n    this.classNames += 'circle';\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel]',\r\n  template: `\r\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelComponent {\r\n  @Input() path;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() x;\r\n  @Input() y;\r\n}\r\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-grid-panel\r\n      *ngFor=\"let gridPanel of gridPanels\"\r\n      [height]=\"gridPanel.height\"\r\n      [width]=\"gridPanel.width\"\r\n      [x]=\"gridPanel.x\"\r\n      [y]=\"gridPanel.y\"\r\n      [class.grid-panel]=\"true\"\r\n      [class.odd]=\"gridPanel.class === 'odd'\"\r\n      [class.even]=\"gridPanel.class === 'even'\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelSeriesComponent implements OnChanges {\r\n  gridPanels: any[];\r\n\r\n  @Input()\r\n  data;\r\n\r\n  @Input()\r\n  dims;\r\n\r\n  @Input()\r\n  xScale;\r\n\r\n  @Input()\r\n  yScale;\r\n\r\n  @Input()\r\n  orient;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gridPanels = this.getGridPanels();\r\n  }\r\n\r\n  getGridPanels(): any[] {\r\n    return this.data.map(d => {\r\n      let offset;\r\n      let width;\r\n      let height;\r\n      let x;\r\n      let y;\r\n      let className = 'odd';\r\n\r\n      if (this.orient === 'vertical') {\r\n        const position: number = this.xScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\r\n        width = this.xScale.bandwidth() + offset;\r\n        height = this.dims.height;\r\n        x = this.xScale(d.name) - offset / 2;\r\n        y = 0;\r\n      } else if (this.orient === 'horizontal') {\r\n        const position = this.yScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\r\n\r\n        width = this.dims.width;\r\n        height = this.yScale.bandwidth() + offset;\r\n        x = 0;\r\n        y = this.yScale(d.name) - offset / 2;\r\n      }\r\n\r\n      return {\r\n        name: d.name,\r\n        class: className,\r\n        height,\r\n        width,\r\n        x,\r\n        y\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-linear-gradient]',\r\n  template: `\r\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:linearGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgLinearGradientComponent implements OnChanges {\r\n  @Input() orientation = 'vertical';\r\n  @Input() name;\r\n  @Input() stops: any[];\r\n\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.x1 = '0%';\r\n    this.x2 = '0%';\r\n    this.y1 = '0%';\r\n    this.y2 = '0%';\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x2 = '100%';\r\n    } else if (this.orientation === 'vertical') {\r\n      this.y1 = '100%';\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-radial-gradient]',\r\n  template: `\r\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:radialGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgRadialGradientComponent implements OnChanges {\r\n  @Input() color: string;\r\n  @Input() name: string;\r\n  @Input() startOpacity: number;\r\n  @Input() endOpacity = 1;\r\n  @Input() cx: number = 0;\r\n  @Input() cy: number = 0;\r\n\r\n  @Input()\r\n  get stops(): any[] {\r\n    return this.stopsInput || this.stopsDefault;\r\n  }\r\n\r\n  set stops(value: any[]) {\r\n    this.stopsInput = value;\r\n  }\r\n\r\n  r: string;\r\n\r\n  private stopsInput: any[];\r\n  private stopsDefault: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.r = '30%';\r\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\r\n      this.stopsDefault = [\r\n        {\r\n          offset: 0,\r\n          color: this.color,\r\n          opacity: this.startOpacity\r\n        },\r\n        {\r\n          offset: 100,\r\n          color: this.color,\r\n          opacity: this.endOpacity\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area]',\r\n  template: `\r\n    <svg:defs *ngIf=\"gradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() path;\r\n  @Input() startingPath;\r\n  @Input() fill;\r\n  @Input() opacity = 1;\r\n  @Input() startOpacity = 0.5;\r\n  @Input() endOpacity = 1;\r\n  @Input() activeLabel;\r\n  @Input() gradient: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n  areaPath: string;\r\n  initialized: boolean = false;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.loadAnimation();\r\n      this.initialized = true;\r\n    } else {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.areaPath = this.startingPath;\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.area');\r\n\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(750)\r\n        .attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: this.endOpacity\r\n      }\r\n    ];\r\n  }\r\n}\r\n","// Robert Penner's easeOutExpo\r\nfunction easeOutExpo(t, b, c, d) {\r\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\r\n}\r\n\r\n/**\r\n * Counts from a number to the end incrementally.\r\n */\r\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\r\n  const startVal = Number(countFrom);\r\n  const endVal = Number(countTo);\r\n  const countDown = startVal > endVal;\r\n  const decimals = Math.max(0, countDecimals);\r\n  const dec = Math.pow(10, decimals);\r\n  const duration = Number(countDuration) * 1000;\r\n  let startTime;\r\n\r\n  function runCount(timestamp) {\r\n    let frameVal;\r\n    const progress = timestamp - startTime;\r\n\r\n    if (countDown) {\r\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\r\n    } else {\r\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\r\n    }\r\n\r\n    if (countDown) {\r\n      frameVal = frameVal < endVal ? endVal : frameVal;\r\n    } else {\r\n      frameVal = frameVal > endVal ? endVal : frameVal;\r\n    }\r\n\r\n    frameVal = Math.round(frameVal * dec) / dec;\r\n\r\n    const tick = progress < duration;\r\n    callback({\r\n      value: frameVal,\r\n      progress,\r\n      timestamp,\r\n      finished: !tick\r\n    });\r\n\r\n    if (tick) {\r\n      return requestAnimationFrame(val => runCount(val));\r\n    }\r\n  }\r\n\r\n  return requestAnimationFrame(timestamp => {\r\n    startTime = timestamp;\r\n    return runCount(timestamp);\r\n  });\r\n}\r\n\r\n/**\r\n * Determine decimals places\r\n *\r\n * @export\r\n */\r\nexport function decimalChecker(countTo) {\r\n  const endVal = Number(countTo);\r\n\r\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\r\n    return 2;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\r\nimport { count, decimalChecker } from './count.helper';\r\n\r\n/**\r\n * Count up component\r\n *\r\n * Loosely inspired by:\r\n *  - https://github.com/izupet/angular2-counto\r\n *  - https://inorganik.github.io/countUp.js/\r\n *\r\n * @export\r\n */\r\n@Component({\r\n  selector: '[ngx-charts-count-up]',\r\n  template: `\r\n    {{ value }}\r\n  `\r\n})\r\nexport class CountUpDirective implements OnDestroy {\r\n  @Input() countDuration: number = 1;\r\n  @Input() countPrefix: string = '';\r\n  @Input() countSuffix: string = '';\r\n  @Input() valueFormatting: any;\r\n\r\n  @Input()\r\n  set countDecimals(val: number) {\r\n    this._countDecimals = val;\r\n  }\r\n\r\n  get countDecimals(): number {\r\n    if (this._countDecimals) return this._countDecimals;\r\n    return decimalChecker(this.countTo);\r\n  }\r\n\r\n  @Input()\r\n  set countTo(val) {\r\n    this._countTo = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countTo(): any {\r\n    return this._countTo;\r\n  }\r\n\r\n  @Input()\r\n  set countFrom(val) {\r\n    this._countFrom = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countFrom(): any {\r\n    return this._countFrom;\r\n  }\r\n\r\n  @Output() countChange = new EventEmitter();\r\n  @Output() countFinish = new EventEmitter();\r\n\r\n  nativeElement: any;\r\n\r\n  value: any = '';\r\n  formattedValue: string;\r\n\r\n  private animationReq: any;\r\n\r\n  private _countDecimals: number = 0;\r\n  private _countTo: number = 0;\r\n  private _countFrom: number = 0;\r\n\r\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\r\n    this.nativeElement = element.nativeElement;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  start(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n\r\n    const valueFormatting =\r\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\r\n\r\n    const callback = ({ value, progress, finished }) => {\r\n      this.value = valueFormatting(value);\r\n      this.cd.markForCheck();\r\n      if (!finished) this.countChange.emit({ value: this.value, progress });\r\n      if (finished) this.countFinish.emit({ value: this.value, progress });\r\n    };\r\n\r\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\r\n  }\r\n}\r\n","declare let global: any;\r\n\r\n// If we don't check whether 'window' and 'global' variables are defined,\r\n// code will fail in browser/node with 'variable is undefined' error.\r\nlet root: any;\r\nif (typeof window !== 'undefined') {\r\n  root = window;\r\n} else if (typeof global !== 'undefined') {\r\n  root = global;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\r\n  prototype?: MouseEvent;\r\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\r\n};\r\n\r\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\r\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\r\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\r\n  if (typeof MouseEvent === 'function') {\r\n    // Sane browsers\r\n    return new MouseEvent(name, { bubbles, cancelable });\r\n  } else {\r\n    // IE\r\n    const event = document.createEvent('MouseEvent');\r\n    event.initEvent(name, bubbles, cancelable);\r\n    return event;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { createMouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tooltip-area]',\r\n  template: `\r\n    <svg:g>\r\n      <svg:rect\r\n        class=\"tooltip-area\"\r\n        [attr.x]=\"0\"\r\n        y=\"0\"\r\n        [attr.width]=\"dims.width\"\r\n        [attr.height]=\"dims.height\"\r\n        style=\"opacity: 0; cursor: 'auto';\"\r\n        (mousemove)=\"mouseMove($event)\"\r\n        (mouseleave)=\"hideTooltip()\"\r\n      />\r\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\r\n        <xhtml:div class=\"area-tooltip-container\">\r\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\r\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\r\n            {{ getToolTipText(tooltipItem) }}\r\n          </xhtml:div>\r\n        </xhtml:div>\r\n      </ng-template>\r\n      <svg:rect\r\n        #tooltipAnchor\r\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\r\n        class=\"tooltip-anchor\"\r\n        [attr.x]=\"anchorPos\"\r\n        y=\"0\"\r\n        [attr.width]=\"1\"\r\n        [attr.height]=\"dims.height\"\r\n        [style.opacity]=\"anchorOpacity\"\r\n        [style.pointer-events]=\"'none'\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'right'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipSpacing]=\"15\"\r\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\r\n        [tooltipContext]=\"anchorValues\"\r\n        [tooltipImmediateExit]=\"true\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition('inactive => active', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 0.7 }))\r\n      ]),\r\n      transition('active => inactive', [\r\n        style({\r\n          opacity: 0.7\r\n        }),\r\n        animate(250, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class TooltipArea {\r\n  anchorOpacity: number = 0;\r\n  anchorPos: number = -1;\r\n  anchorValues: any[] = [];\r\n  lastAnchorPos: number;\r\n\r\n  @Input() dims;\r\n  @Input() xSet;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() results;\r\n  @Input() colors;\r\n  @Input() showPercentage: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() hover = new EventEmitter();\r\n\r\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\r\n\r\n  getValues(xVal): any[] {\r\n    const results = [];\r\n\r\n    for (const group of this.results) {\r\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\r\n      let groupName = group.name;\r\n      if (groupName instanceof Date) {\r\n        groupName = groupName.toLocaleDateString();\r\n      }\r\n\r\n      if (item) {\r\n        const label = item.name;\r\n        let val = item.value;\r\n        if (this.showPercentage) {\r\n          val = (item.d1 - item.d0).toFixed(2) + '%';\r\n        }\r\n        let color;\r\n        if (this.colors.scaleType === 'linear') {\r\n          let v = val;\r\n          if (item.d1) {\r\n            v = item.d1;\r\n          }\r\n          color = this.colors.getColor(v);\r\n        } else {\r\n          color = this.colors.getColor(group.name);\r\n        }\r\n\r\n        const data = Object.assign({}, item, {\r\n          value: val,\r\n          name: label,\r\n          series: groupName,\r\n          min: item.min,\r\n          max: item.max,\r\n          color\r\n        });\r\n\r\n        results.push(data);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  mouseMove(event) {\r\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\r\n\r\n    const closestIndex = this.findClosestPointIndex(xPos);\r\n    const closestPoint = this.xSet[closestIndex];\r\n    this.anchorPos = this.xScale(closestPoint);\r\n    this.anchorPos = Math.max(0, this.anchorPos);\r\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\r\n\r\n    this.anchorValues = this.getValues(closestPoint);\r\n    if (this.anchorPos !== this.lastAnchorPos) {\r\n      const ev = createMouseEvent('mouseleave');\r\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\r\n      this.anchorOpacity = 0.7;\r\n      this.hover.emit({\r\n        value: closestPoint\r\n      });\r\n      this.showTooltip();\r\n\r\n      this.lastAnchorPos = this.anchorPos;\r\n    }\r\n  }\r\n\r\n  findClosestPointIndex(xPos) {\r\n    let minIndex = 0;\r\n    let maxIndex = this.xSet.length - 1;\r\n    let minDiff = Number.MAX_VALUE;\r\n    let closestIndex = 0;\r\n\r\n    while (minIndex <= maxIndex) {\r\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\r\n      const currentElement = this.xScale(this.xSet[currentIndex]);\r\n\r\n      const curDiff = Math.abs(currentElement - xPos);\r\n\r\n      if (curDiff < minDiff) {\r\n        minDiff = curDiff;\r\n        closestIndex = currentIndex;\r\n      }\r\n\r\n      if (currentElement < xPos) {\r\n        minIndex = currentIndex + 1;\r\n      } else if (currentElement > xPos) {\r\n        maxIndex = currentIndex - 1;\r\n      } else {\r\n        minDiff = 0;\r\n        closestIndex = currentIndex;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return closestIndex;\r\n  }\r\n\r\n  showTooltip(): void {\r\n    const event = createMouseEvent('mouseenter');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n  }\r\n\r\n  hideTooltip(): void {\r\n    const event = createMouseEvent('mouseleave');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n    this.anchorOpacity = 0;\r\n    this.lastAnchorPos = -1;\r\n  }\r\n\r\n  getToolTipText(tooltipItem: any): string {\r\n    let result: string = '';\r\n    if (tooltipItem.series !== undefined) {\r\n      result += tooltipItem.series;\r\n    } else {\r\n      result += '???';\r\n    }\r\n    result += ': ';\r\n    if (tooltipItem.value !== undefined) {\r\n      result += tooltipItem.value.toLocaleString();\r\n    }\r\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\r\n      result += ' (';\r\n      if (tooltipItem.min !== undefined) {\r\n        if (tooltipItem.max === undefined) {\r\n          result += 'â¥';\r\n        }\r\n        result += tooltipItem.min.toLocaleString();\r\n        if (tooltipItem.max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (tooltipItem.max !== undefined) {\r\n        result += 'â¤';\r\n      }\r\n      if (tooltipItem.max !== undefined) {\r\n        result += tooltipItem.max.toLocaleString();\r\n      }\r\n      result += ')';\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { brushX } from 'd3-brush';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { select, event as d3event } from 'd3-selection';\r\nimport { id } from '../..//utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-timeline]',\r\n  template: `\r\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\r\n      <svg:filter [attr.id]=\"filterId\">\r\n        <svg:feColorMatrix\r\n          in=\"SourceGraphic\"\r\n          type=\"matrix\"\r\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\r\n        />\r\n      </svg:filter>\r\n      <svg:g class=\"embedded-chart\">\r\n        <ng-content></ng-content>\r\n      </svg:g>\r\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\r\n      <svg:g class=\"brush\"></svg:g>\r\n    </svg:g>\r\n  `,\r\n  styleUrls: ['./timeline.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class Timeline implements OnChanges {\r\n  @Input() view;\r\n  @Input() state;\r\n  @Input() results;\r\n  @Input() scheme;\r\n  @Input() customColors;\r\n  @Input() legend;\r\n  @Input() miniChart;\r\n  @Input() autoScale;\r\n  @Input() scaleType;\r\n  @Input() height: number = 50;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() onDomainChange = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  dims: any;\r\n  xDomain: any[];\r\n  xScale: any;\r\n  brush: any;\r\n  transform: string;\r\n  initialized: boolean = false;\r\n  filterId: any;\r\n  filter: any;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n\r\n    if (!this.initialized) {\r\n      this.addBrush();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.dims = this.getDims();\r\n    this.height = this.dims.height;\r\n    const offsetY = this.view[1] - this.height;\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.xScale = this.getXScale();\r\n\r\n    if (this.brush) {\r\n      this.updateBrush();\r\n    }\r\n\r\n    this.transform = `translate(0 , ${offsetY})`;\r\n\r\n    this.filterId = 'filter' + id().toString();\r\n    this.filter = `url(#${this.filterId})`;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    let domain = [];\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else {\r\n      domain = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getXScale() {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime()\r\n        .range([0, this.dims.width])\r\n        .domain(this.xDomain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear()\r\n        .range([0, this.dims.width])\r\n        .domain(this.xDomain);\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint()\r\n        .range([0, this.dims.width])\r\n        .padding(0.1)\r\n        .domain(this.xDomain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  addBrush(): void {\r\n    if (this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush = brushX()\r\n      .extent([\r\n        [0, 0],\r\n        [width, height]\r\n      ])\r\n      .on('brush end', () => {\r\n        const selection = d3event.selection || this.xScale.range();\r\n        const newDomain = selection.map(this.xScale.invert);\r\n\r\n        this.onDomainChange.emit(newDomain);\r\n        this.cd.markForCheck();\r\n      });\r\n\r\n    select(this.element)\r\n      .select('.brush')\r\n      .call(this.brush);\r\n  }\r\n\r\n  updateBrush(): void {\r\n    if (!this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush.extent([\r\n      [0, 0],\r\n      [width, height]\r\n    ]);\r\n    select(this.element)\r\n      .select('.brush')\r\n      .call(this.brush);\r\n\r\n    // clear hardcoded properties so they can be defined by CSS\r\n    select(this.element)\r\n      .select('.selection')\r\n      .attr('fill', undefined)\r\n      .attr('stroke', undefined)\r\n      .attr('fill-opacity', undefined);\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getDims(): any {\r\n    const width = this.view[0];\r\n\r\n    const dims = {\r\n      width,\r\n      height: this.height\r\n    };\r\n\r\n    return dims;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectorRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend',\r\n  template: `\r\n    <div [style.width.px]=\"width\">\r\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\r\n        <span class=\"legend-title-text\">{{ title }}</span>\r\n      </header>\r\n      <div class=\"legend-wrap\">\r\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\r\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\r\n            <ngx-charts-legend-entry\r\n              [label]=\"entry.label\"\r\n              [formattedLabel]=\"entry.formattedLabel\"\r\n              [color]=\"entry.color\"\r\n              [isActive]=\"isActive(entry)\"\r\n              (select)=\"labelClick.emit($event)\"\r\n              (activate)=\"activate($event)\"\r\n              (deactivate)=\"deactivate($event)\"\r\n            >\r\n            </ngx-charts-legend-entry>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() title;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() activeEntries;\r\n  @Input() horizontal = false;\r\n\r\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendEntries: any[] = [];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cd.markForCheck();\r\n    this.legendEntries = this.getLegendEntries();\r\n  }\r\n\r\n  getLegendEntries(): any[] {\r\n    const items = [];\r\n\r\n    for (const label of this.data) {\r\n      const formattedLabel = formatLabel(label);\r\n\r\n      const idx = items.findIndex(i => {\r\n        return i.label === formattedLabel;\r\n      });\r\n\r\n      if (idx === -1) {\r\n        items.push({\r\n          label,\r\n          formattedLabel,\r\n          color: this.colors.getColor(label)\r\n        });\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.label === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activate(item) {\r\n    this.labelActivate.emit(item);\r\n  }\r\n\r\n  deactivate(item) {\r\n    this.labelDeactivate.emit(item);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend-entry',\r\n  template: `\r\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\r\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\r\n      <span class=\"legend-label-text\">\r\n        {{ trimmedLabel }}\r\n      </span>\r\n    </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendEntryComponent {\r\n  @Input() color: string;\r\n  @Input() label: any;\r\n  @Input() formattedLabel: string;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  get trimmedLabel(): string {\r\n    return this.formattedLabel || '(empty)';\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit({ name: this.label });\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit({ name: this.label });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-scale-legend',\r\n  template: `\r\n    <div\r\n      class=\"scale-legend\"\r\n      [class.horizontal-legend]=\"horizontal\"\r\n      [style.height.px]=\"horizontal ? undefined : height\"\r\n      [style.width.px]=\"width\"\r\n    >\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[1].toLocaleString() }}</span>\r\n      </div>\r\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[0].toLocaleString() }}</span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./scale-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScaleLegendComponent implements OnChanges {\r\n  @Input() valueRange;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() horizontal = false;\r\n\r\n  gradient: any;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\r\n    const direction = this.horizontal ? 'right' : 'bottom';\r\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\r\n  }\r\n\r\n  /**\r\n   * Generates the string used in the gradient stylesheet properties\r\n   * @param colors array of colors\r\n   * @param splits array of splits on a scale of (0, 1)\r\n   */\r\n  gradientString(colors, splits): string {\r\n    // add the 100%\r\n    splits.push(1);\r\n    const pairs = [];\r\n    colors.reverse().forEach((c, i) => {\r\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\r\n    });\r\n\r\n    return pairs.join(', ');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-legend',\r\n  template: `\r\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\r\n      <div\r\n        *ngIf=\"animations\"\r\n        class=\"total-value\"\r\n        ngx-charts-count-up\r\n        [countTo]=\"roundedTotal\"\r\n        [valueFormatting]=\"valueFormatting\"\r\n      ></div>\r\n      <div class=\"total-value\" *ngIf=\"!animations\">\r\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\r\n      </div>\r\n      <div class=\"total-label\">\r\n        {{ label }}\r\n      </div>\r\n      <div class=\"legend-items-container\">\r\n        <div class=\"legend-items\">\r\n          <div\r\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\r\n            tabindex=\"-1\"\r\n            class=\"legend-item\"\r\n            (mouseenter)=\"activate.emit(legendItem.data)\"\r\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\r\n            (click)=\"select.emit(legendItem.data)\"\r\n          >\r\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-value\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem._value\"\r\n              [valueFormatting]=\"valueFormatting\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-value\">\r\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\r\n            </div>\r\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-percent\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem.percentage\"\r\n              [countSuffix]=\"'%'\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./advanced-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedLegendComponent implements OnChanges {\r\n  @Input() width: number;\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() label: string = 'Total';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendItems: any[] = [];\r\n  total: number;\r\n  roundedTotal: number;\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() labelFormatting: (value: string) => any = label => label;\r\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\r\n\r\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getTotal(): number {\r\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  update(): void {\r\n    this.total = this.getTotal();\r\n    this.roundedTotal = this.total;\r\n\r\n    this.legendItems = this.getLegendItems();\r\n  }\r\n\r\n  getLegendItems(): any {\r\n    return this.data.map(d => {\r\n      const label = formatLabel(d.name);\r\n      const value = d.value;\r\n      const color = this.colors.getColor(label);\r\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\r\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\r\n\r\n      return {\r\n        _value: value,\r\n        data: d,\r\n        value,\r\n        color,\r\n        label: formattedLabel,\r\n        displayLabel: trimLabel(formattedLabel, 20),\r\n        origialLabel: d.name,\r\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(item) {\r\n    return item.formattedLabel;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ChartComponent } from './charts/chart.component';\r\nimport { BaseChartComponent } from './base-chart.component';\r\nimport { AxesModule } from './axes/axes.module';\r\nimport { TooltipModule } from './tooltip/tooltip.module';\r\nimport { CircleSeriesComponent } from './circle-series.component';\r\nimport { CircleComponent } from './circle.component';\r\nimport { GridPanelComponent } from './grid-panel.component';\r\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\r\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\r\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\r\nimport { AreaComponent } from './area.component';\r\nimport { CountUpDirective } from './count/count.directive';\r\nimport { TooltipArea } from './tooltip-area.component';\r\nimport { Timeline } from './timeline/timeline.component';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\nimport { LegendComponent } from './legend/legend.component';\r\nimport { LegendEntryComponent } from './legend/legend-entry.component';\r\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\r\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\r\n\r\nconst COMPONENTS = [\r\n  AreaComponent,\r\n  BaseChartComponent,\r\n  CountUpDirective,\r\n  TooltipArea,\r\n  ChartComponent,\r\n  LegendComponent,\r\n  LegendEntryComponent,\r\n  ScaleLegendComponent,\r\n  CircleComponent,\r\n  CircleSeriesComponent,\r\n  GridPanelComponent,\r\n  GridPanelSeriesComponent,\r\n  SvgLinearGradientComponent,\r\n  SvgRadialGradientComponent,\r\n  Timeline,\r\n  AdvancedLegendComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AxesModule, TooltipModule],\r\n  declarations: [...COMPONENTS, VisibilityObserver],\r\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\r\n})\r\nexport class ChartCommonModule {}\r\n","export interface ViewDimensions {\r\n  width: number;\r\n  height: number;\r\n  xOffset: number;\r\n}\r\n\r\nexport function calculateViewDimensions({\r\n  width,\r\n  height,\r\n  margins,\r\n  showXAxis = false,\r\n  showYAxis = false,\r\n  xAxisHeight = 0,\r\n  yAxisWidth = 0,\r\n  showXLabel = false,\r\n  showYLabel = false,\r\n  showLegend = false,\r\n  legendType = 'ordinal',\r\n  legendPosition = 'right',\r\n  columns = 12\r\n}): ViewDimensions {\r\n  let xOffset = margins[3];\r\n  let chartWidth = width;\r\n  let chartHeight = height - margins[0] - margins[2];\r\n\r\n  if (showLegend && legendPosition === 'right') {\r\n    if (legendType === 'ordinal') {\r\n      columns -= 2;\r\n    } else {\r\n      columns -= 1;\r\n    }\r\n  }\r\n\r\n  chartWidth = (chartWidth * columns) / 12;\r\n\r\n  chartWidth = chartWidth - margins[1] - margins[3];\r\n\r\n  if (showXAxis) {\r\n    chartHeight -= 5;\r\n    chartHeight -= xAxisHeight;\r\n\r\n    if (showXLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartHeight -= offset;\r\n    }\r\n  }\r\n\r\n  if (showYAxis) {\r\n    chartWidth -= 5;\r\n    chartWidth -= yAxisWidth;\r\n    xOffset += yAxisWidth;\r\n    xOffset += 10;\r\n\r\n    if (showYLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartWidth -= offset;\r\n      xOffset += offset;\r\n    }\r\n  }\r\n\r\n  chartWidth = Math.max(0, chartWidth);\r\n  chartHeight = Math.max(0, chartHeight);\r\n\r\n  return {\r\n    width: Math.floor(chartWidth),\r\n    height: Math.floor(chartHeight),\r\n    xOffset: Math.floor(xOffset)\r\n  };\r\n}\r\n","export let colorSets = [\r\n  {\r\n    name: 'vivid',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#647c8a',\r\n      '#3f51b5',\r\n      '#2196f3',\r\n      '#00b862',\r\n      '#afdf0a',\r\n      '#a7b61a',\r\n      '#f3e562',\r\n      '#ff9800',\r\n      '#ff5722',\r\n      '#ff4514'\r\n    ]\r\n  },\r\n  {\r\n    name: 'natural',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#bf9d76',\r\n      '#e99450',\r\n      '#d89f59',\r\n      '#f2dfa7',\r\n      '#a5d7c6',\r\n      '#7794b1',\r\n      '#afafaf',\r\n      '#707160',\r\n      '#ba9383',\r\n      '#d9d5c3'\r\n    ]\r\n  },\r\n  {\r\n    name: 'cool',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#a8385d',\r\n      '#7aa3e5',\r\n      '#a27ea8',\r\n      '#aae3f5',\r\n      '#adcded',\r\n      '#a95963',\r\n      '#8796c0',\r\n      '#7ed3ed',\r\n      '#50abcc',\r\n      '#ad6886'\r\n    ]\r\n  },\r\n  {\r\n    name: 'fire',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\r\n  },\r\n  {\r\n    name: 'solar',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#fff8e1',\r\n      '#ffecb3',\r\n      '#ffe082',\r\n      '#ffd54f',\r\n      '#ffca28',\r\n      '#ffc107',\r\n      '#ffb300',\r\n      '#ffa000',\r\n      '#ff8f00',\r\n      '#ff6f00'\r\n    ]\r\n  },\r\n  {\r\n    name: 'air',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e1f5fe',\r\n      '#b3e5fc',\r\n      '#81d4fa',\r\n      '#4fc3f7',\r\n      '#29b6f6',\r\n      '#03a9f4',\r\n      '#039be5',\r\n      '#0288d1',\r\n      '#0277bd',\r\n      '#01579b'\r\n    ]\r\n  },\r\n  {\r\n    name: 'aqua',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e0f7fa',\r\n      '#b2ebf2',\r\n      '#80deea',\r\n      '#4dd0e1',\r\n      '#26c6da',\r\n      '#00bcd4',\r\n      '#00acc1',\r\n      '#0097a7',\r\n      '#00838f',\r\n      '#006064'\r\n    ]\r\n  },\r\n  {\r\n    name: 'flame',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#A10A28',\r\n      '#D3342D',\r\n      '#EF6D49',\r\n      '#FAAD67',\r\n      '#FDDE90',\r\n      '#DBED91',\r\n      '#A9D770',\r\n      '#6CBA67',\r\n      '#2C9653',\r\n      '#146738'\r\n    ]\r\n  },\r\n  {\r\n    name: 'ocean',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#1D68FB',\r\n      '#33C0FC',\r\n      '#4AFFFE',\r\n      '#AFFFFF',\r\n      '#FFFC63',\r\n      '#FDBD2D',\r\n      '#FC8A25',\r\n      '#FA4F1E',\r\n      '#FA141B',\r\n      '#BA38D1'\r\n    ]\r\n  },\r\n  {\r\n    name: 'forest',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#55C22D',\r\n      '#C1F33D',\r\n      '#3CC099',\r\n      '#AFFFFF',\r\n      '#8CFC9D',\r\n      '#76CFFA',\r\n      '#BA60FB',\r\n      '#EE6490',\r\n      '#C42A1C',\r\n      '#FC9F32'\r\n    ]\r\n  },\r\n  {\r\n    name: 'horizon',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2597FB',\r\n      '#65EBFD',\r\n      '#99FDD0',\r\n      '#FCEE4B',\r\n      '#FEFCFA',\r\n      '#FDD6E3',\r\n      '#FCB1A8',\r\n      '#EF6F7B',\r\n      '#CB96E8',\r\n      '#EFDEE0'\r\n    ]\r\n  },\r\n  {\r\n    name: 'neons',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FF3333',\r\n      '#FF33FF',\r\n      '#CC33FF',\r\n      '#0000FF',\r\n      '#33CCFF',\r\n      '#33FFFF',\r\n      '#33FF66',\r\n      '#CCFF33',\r\n      '#FFCC00',\r\n      '#FF6600'\r\n    ]\r\n  },\r\n  {\r\n    name: 'picnic',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FAC51D',\r\n      '#66BD6D',\r\n      '#FAA026',\r\n      '#29BB9C',\r\n      '#E96B56',\r\n      '#55ACD2',\r\n      '#B7332F',\r\n      '#2C83C9',\r\n      '#9166B8',\r\n      '#92E7E8'\r\n    ]\r\n  },\r\n  {\r\n    name: 'night',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2B1B5A',\r\n      '#501356',\r\n      '#183356',\r\n      '#28203F',\r\n      '#391B3C',\r\n      '#1E2B3C',\r\n      '#120634',\r\n      '#2D0432',\r\n      '#051932',\r\n      '#453080',\r\n      '#75267D',\r\n      '#2C507D',\r\n      '#4B3880',\r\n      '#752F7D',\r\n      '#35547D'\r\n    ]\r\n  },\r\n  {\r\n    name: 'nightLights',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#4e31a5',\r\n      '#9c25a7',\r\n      '#3065ab',\r\n      '#57468b',\r\n      '#904497',\r\n      '#46648b',\r\n      '#32118d',\r\n      '#a00fb3',\r\n      '#1052a2',\r\n      '#6e51bd',\r\n      '#b63cc3',\r\n      '#6c97cb',\r\n      '#8671c1',\r\n      '#b455be',\r\n      '#7496c3'\r\n    ]\r\n  }\r\n];\r\n","import { range } from 'd3-array';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\r\n\r\nimport { colorSets } from '../utils/color-sets';\r\n\r\nexport class ColorHelper {\r\n  scale: any;\r\n  scaleType: any;\r\n  colorDomain: any[];\r\n  domain: any;\r\n  customColors: any;\r\n\r\n  constructor(scheme, type, domain, customColors?) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    this.colorDomain = scheme.domain;\r\n    this.scaleType = type;\r\n    this.domain = domain;\r\n    this.customColors = customColors;\r\n\r\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\r\n  }\r\n\r\n  generateColorScheme(scheme, type, domain) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    let colorScale;\r\n    if (type === 'quantile') {\r\n      colorScale = scaleQuantile()\r\n        .range(scheme.domain)\r\n        .domain(domain);\r\n    } else if (type === 'ordinal') {\r\n      colorScale = scaleOrdinal()\r\n        .range(scheme.domain)\r\n        .domain(domain);\r\n    } else if (type === 'linear') {\r\n      // linear schemes must have at least 2 colors\r\n      const colorDomain = [...scheme.domain];\r\n      if (colorDomain.length === 1) {\r\n        colorDomain.push(colorDomain[0]);\r\n        this.colorDomain = colorDomain;\r\n      }\r\n\r\n      const points = range(0, 1, 1.0 / colorDomain.length);\r\n      colorScale = scaleLinear()\r\n        .domain(points)\r\n        .range(colorDomain);\r\n    }\r\n\r\n    return colorScale;\r\n  }\r\n\r\n  getColor(value) {\r\n    if (value === undefined || value === null) {\r\n      throw new Error('Value can not be null');\r\n    }\r\n    if (this.scaleType === 'linear') {\r\n      const valueScale = scaleLinear()\r\n        .domain(this.domain)\r\n        .range([0, 1]);\r\n\r\n      return this.scale(valueScale(value));\r\n    } else {\r\n      if (typeof this.customColors === 'function') {\r\n        return this.customColors(value);\r\n      }\r\n\r\n      const formattedValue = value.toString();\r\n      let found: any; // todo type customColors\r\n      if (this.customColors && this.customColors.length > 0) {\r\n        found = this.customColors.find(mapping => {\r\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\r\n        });\r\n      }\r\n\r\n      if (found) {\r\n        return found.value;\r\n      } else {\r\n        return this.scale(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  getLinearGradientStops(value, start) {\r\n    if (start === undefined) {\r\n      start = this.domain[0];\r\n    }\r\n\r\n    const valueScale = scaleLinear()\r\n      .domain(this.domain)\r\n      .range([0, 1]);\r\n\r\n    const colorValueScale = scaleBand()\r\n      .domain(this.colorDomain)\r\n      .range([0, 1]);\r\n\r\n    const endColor = this.getColor(value);\r\n\r\n    // generate the stops\r\n    const startVal = valueScale(start);\r\n    const startColor = this.getColor(start);\r\n\r\n    const endVal = valueScale(value);\r\n    let i = 1;\r\n    let currentVal = startVal;\r\n    const stops = [];\r\n\r\n    stops.push({\r\n      color: startColor,\r\n      offset: startVal,\r\n      originalOffset: startVal,\r\n      opacity: 1\r\n    });\r\n\r\n    while (currentVal < endVal && i < this.colorDomain.length) {\r\n      const color = this.colorDomain[i];\r\n      const offset = colorValueScale(color);\r\n      if (offset <= startVal) {\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\r\n        break;\r\n      }\r\n\r\n      stops.push({\r\n        color,\r\n        offset,\r\n        opacity: 1\r\n      });\r\n      currentVal = offset;\r\n      i++;\r\n    }\r\n\r\n    if (stops[stops.length - 1].offset < 100) {\r\n      stops.push({\r\n        color: endColor,\r\n        offset: endVal,\r\n        opacity: 1\r\n      });\r\n    }\r\n\r\n    if (endVal === startVal) {\r\n      stops[0].offset = 0;\r\n      stops[1].offset = 100;\r\n    } else {\r\n      // normalize the offsets into percentages\r\n      if (stops[stops.length - 1].offset !== 100) {\r\n        for (const s of stops) {\r\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\r\n        }\r\n      }\r\n    }\r\n\r\n    return stops;\r\n  }\r\n}\r\n","/**\r\n * Based on the data, return an array with unique values.\r\n *\r\n * @export\r\n * @returns array\r\n */\r\nexport function getUniqueXDomainValues(results: any[]): any[] {\r\n  const valueSet = new Set();\r\n  for (const result of results) {\r\n    for (const d of result.series) {\r\n      valueSet.add(d.name);\r\n    }\r\n  }\r\n  return Array.from(valueSet);\r\n}\r\n\r\n/**\r\n * Get the scaleType of enumerable of values.\r\n * @returns  'time', 'linear' or 'ordinal'\r\n */\r\nexport function getScaleType(values: any[], checkDateType = true): string {\r\n  if (checkDateType) {\r\n    const allDates = values.every(value => value instanceof Date);\r\n    if (allDates) {\r\n      return 'time';\r\n    }\r\n  }\r\n\r\n  const allNumbers = values.every(value => typeof value === 'number');\r\n  if (allNumbers) {\r\n    return 'linear';\r\n  }\r\n\r\n  return 'ordinal';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [baseValue]=\"baseValue\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [baseValue]=\"baseValue\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() state;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() autoScale;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  scaleType: string;\r\n  series: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n    if (this.baseValue !== 'auto') {\r\n      values.push(this.baseValue);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear()\r\n      .range([height, 0])\r\n      .domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getScaleType(values): string {\r\n    let date = true;\r\n    let num = true;\r\n    for (const value of values) {\r\n      if (!this.isDate(value)) {\r\n        date = false;\r\n      }\r\n      if (typeof value !== 'number') {\r\n        num = false;\r\n      }\r\n    }\r\n\r\n    if (date) {\r\n      return 'time';\r\n    }\r\n\r\n    if (num) {\r\n      return 'linear';\r\n    }\r\n\r\n    return 'ordinal';\r\n  }\r\n\r\n  isDate(value): boolean {\r\n    if (value instanceof Date) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [gradient]=\"gradient\"\r\n              normalized=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [showPercentage]=\"true\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            normalized=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  tooltipAreas: any[];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n\r\n      let total = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n        if (d) {\r\n          total += d.value;\r\n        }\r\n      }\r\n\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n\r\n        if (total > 0) {\r\n          d.d0 = (d.d0 * 100) / total;\r\n          d.d1 = (d.d1 * 100) / total;\r\n        } else {\r\n          d.d0 = 0;\r\n          d.d1 = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear()\r\n      .range([height, 0])\r\n      .domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [activeEntries]=\"activeEntries\"\r\n              stacked=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            stacked=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let sum = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          sum += d.value;\r\n        }\r\n      }\r\n\r\n      domain.push(sum);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear()\r\n      .range([height, 0])\r\n      .domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item) {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","export function sortLinear(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    if (direction === 'asc') {\r\n      return a[property] - b[property];\r\n    } else {\r\n      return b[property] - a[property];\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByDomain(data, property, direction = 'asc', domain) {\r\n  return data.sort((a, b) => {\r\n    const aVal = a[property];\r\n    const bVal = b[property];\r\n\r\n    const aIdx = domain.indexOf(aVal);\r\n    const bIdx = domain.indexOf(bVal);\r\n\r\n    if (direction === 'asc') {\r\n      return aIdx - bIdx;\r\n    } else {\r\n      return bIdx - aIdx;\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByTime(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    const aDate = a[property].getTime();\r\n    const bDate = b[property].getTime();\r\n\r\n    if (direction === 'asc') {\r\n      if (aDate > bDate) return 1;\r\n      if (bDate > aDate) return -1;\r\n      return 0;\r\n    } else {\r\n      if (aDate > bDate) return -1;\r\n      if (bDate > aDate) return 1;\r\n      return 0;\r\n    }\r\n  });\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\nexport enum D0Types {\r\n  positive = 'positive',\r\n  negative = 'negative'\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-vertical]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [@.disabled]=\"!animations\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'vertical'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      [gradient]=\"gradient\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      (select)=\"onClick($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n      [animations]=\"animations\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'vertical'\"\r\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesVerticalComponent implements OnChanges {\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelHeightChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  ngOnChanges(changes): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    let width;\r\n    if (this.series.length) {\r\n      width = this.xScale.bandwidth();\r\n    }\r\n    width = Math.round(width);\r\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\r\n\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type = D0Types.positive;\r\n\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        width,\r\n        formattedLabel,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0\r\n      };\r\n\r\n      if (this.type === 'standard') {\r\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\r\n        bar.x = this.xScale(label);\r\n\r\n        if (value < 0) {\r\n          bar.y = this.yScale(0);\r\n        } else {\r\n          bar.y = this.yScale(value);\r\n        }\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      if (section.total > 0) {\r\n        section.height = this.yScale(totalPositive);\r\n      } else {\r\n        section.height = this.yScale(totalNegative);\r\n      }\r\n      section.width = this.xScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(d.label);\r\n        section.y = this.yScale(0);\r\n        section.height = this.yScale(section.total) - this.yScale(0);\r\n        section.width = this.xScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar): string {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { area } from 'd3-shape';\r\n\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-area\r\n      class=\"area-series\"\r\n      [data]=\"data\"\r\n      [path]=\"path\"\r\n      [fill]=\"colors.getColor(data.name)\"\r\n      [stops]=\"gradientStops\"\r\n      [startingPath]=\"startingPath\"\r\n      [opacity]=\"opacity\"\r\n      [gradient]=\"gradient || hasGradient\"\r\n      [animations]=\"animations\"\r\n      [class.active]=\"isActive(data)\"\r\n      [class.inactive]=\"isInactive(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() stacked: boolean = false;\r\n  @Input() normalized: boolean = false;\r\n  @Input() gradient;\r\n  @Input() curve;\r\n  @Input() activeEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  opacity: number;\r\n  path: string;\r\n  startingPath: string;\r\n\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradient();\r\n\r\n    let currentArea;\r\n    let startingArea;\r\n\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    if (this.stacked || this.normalized) {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0((d, i) => this.yScale(d.d0))\r\n        .y1((d, i) => this.yScale(d.d1));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => this.yScale.range()[0])\r\n        .y1(d => this.yScale.range()[0]);\r\n    } else {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => this.yScale(d.value));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\r\n    }\r\n\r\n    currentArea.curve(this.curve);\r\n    startingArea.curve(this.curve);\r\n\r\n    this.opacity = 0.8;\r\n\r\n    let data = this.data.series;\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    this.path = currentArea(data);\r\n    this.startingPath = startingArea(data);\r\n  }\r\n\r\n  updateGradient() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      if (this.stacked || this.normalized) {\r\n        const d0values = this.data.series.map(d => d.d0);\r\n        const d1values = this.data.series.map(d => d.d1);\r\n        const max = Math.max(...d1values);\r\n        const min = Math.min(...d0values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      } else {\r\n        const values = this.data.series.map(d => d.value);\r\n        const max = Math.max(...values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max);\r\n      }\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AreaChartComponent } from './area-chart.component';\r\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\r\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\r\nimport { AreaSeriesComponent } from './area-series.component';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\r\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\r\n})\r\nexport class AreaChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { id } from '../utils/id';\r\n\r\n/* tslint:disable-next-line */\r\nimport { transition } from 'd3-transition';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar]',\r\n  template: `\r\n    <svg:defs *ngIf=\"hasGradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path\r\n      class=\"bar\"\r\n      stroke=\"none\"\r\n      role=\"img\"\r\n      tabIndex=\"-1\"\r\n      [class.active]=\"isActive\"\r\n      [class.hidden]=\"hideBar\"\r\n      [attr.d]=\"path\"\r\n      [attr.aria-label]=\"ariaLabel\"\r\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\r\n      (click)=\"select.emit(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() data: any;\r\n  @Input() width: number;\r\n  @Input() height: number;\r\n  @Input() x: number;\r\n  @Input() y: number;\r\n  @Input() orientation;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() offset = 0;\r\n  @Input() isActive: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n  @Input() ariaLabel: string;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: any;\r\n  path: any;\r\n  gradientId: any;\r\n  gradientFill: any;\r\n  startOpacity: any;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n  hideBar: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.roundEdges) {\r\n      this.loadAnimation();\r\n    }\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n    this.checkToHideBar();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.path = this.getStartingPath();\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.bar');\r\n    const path = this.getPath();\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(500)\r\n        .attr('d', path);\r\n    } else {\r\n      node.attr('d', path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.getStartOpacity()\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  getStartingPath() {\r\n    if (!this.animations) {\r\n      return this.getPath();\r\n    }\r\n\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    } else {\r\n      if (this.orientation === 'vertical') {\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getPath() {\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      }\r\n    } else {\r\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getRadius(): number {\r\n    let radius = 0;\r\n\r\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\r\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\r\n    }\r\n\r\n    return radius;\r\n  }\r\n\r\n  getStartOpacity(): number {\r\n    if (this.roundEdges) {\r\n      return 0.2;\r\n    } else {\r\n      return 0.5;\r\n    }\r\n  }\r\n\r\n  get edges() {\r\n    let edges = [false, false, false, false];\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        if (this.data.value > 0) {\r\n          edges = [true, true, false, false];\r\n        } else {\r\n          edges = [false, false, true, true];\r\n        }\r\n      } else if (this.orientation === 'horizontal') {\r\n        if (this.data.value > 0) {\r\n          edges = [false, true, false, true];\r\n        } else {\r\n          edges = [true, false, true, false];\r\n        }\r\n      }\r\n    }\r\n    return edges;\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  private checkToHideBar() {\r\n    this.hideBar =\r\n      this.noBarWhenZero &&\r\n      ((this.orientation === 'vertical' && this.height === 0) ||\r\n        (this.orientation === 'horizontal' && this.width === 0));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-horizontal\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarHorizontalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() xScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yScale: any;\r\n  xScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n\r\n    const scale = scaleLinear()\r\n      .range([0, this.dims.width])\r\n      .domain(this.xDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .domain(this.yDomain);\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\r\n\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\r\n    return [min, max];\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.yDomain;\r\n    } else {\r\n      domain = this.xDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"valueScale\"\r\n          [yScale]=\"groupScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"horizontal\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            [xScale]=\"valueScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [yScale]=\"innerScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [roundEdges]=\"roundEdges\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontal2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const height = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, height])\r\n      .paddingInner(spacing)\r\n      .domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear()\r\n      .range([0, this.dims.width])\r\n      .domain(this.valuesDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(0, ${this.groupScale(group.label)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear()\r\n      .range([0, this.dims.width])\r\n      .domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear()\r\n      .range([0, this.dims.width])\r\n      .domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarVerticalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() yScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xScale: any;\r\n  yScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand()\r\n      .range([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .domain(this.xDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const scale = scaleLinear()\r\n      .range([this.dims.height, 0])\r\n      .domain(this.yDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getYDomain(): [number, number] {\r\n    const values = this.results.map(d => d.value);\r\n\r\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      min = Math.min(min, ...this.yAxisTicks);\r\n    }\r\n\r\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      max = Math.max(max, ...this.yAxisTicks);\r\n    }\r\n    return [min, max];\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.xDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"groupScale\"\r\n          [yScale]=\"valueScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"vertical\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [xScale]=\"innerScale\"\r\n          [yScale]=\"valueScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"group.series\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [seriesName]=\"group.name\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event, group)\"\r\n          (activate)=\"onActivate($event, group)\"\r\n          (deactivate)=\"onDeactivate($event, group)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVertical2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() scaleType = 'ordinal';\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const width = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\r\n    return scaleBand()\r\n      .rangeRound([0, width])\r\n      .paddingInner(spacing)\r\n      .domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear()\r\n      .range([this.dims.height, 0])\r\n      .domain(this.valuesDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.groupScale(group.label)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    return [0, 100];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear()\r\n      .range([this.dims.height, 0])\r\n      .domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  tickFormatting: (label: string) => string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear()\r\n      .range([this.dims.height, 0])\r\n      .domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { D0Types } from './series-vertical.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-horizontal]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'horizontal'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      (select)=\"click($event)\"\r\n      [gradient]=\"gradient\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [animations]=\"animations\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'horizontal'\"\r\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesHorizontal implements OnChanges {\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelWidthChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type: D0Types;\r\n    d0Type = D0Types.positive;\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        formattedLabel\r\n      };\r\n\r\n      bar.height = this.yScale.bandwidth();\r\n\r\n      if (this.type === 'standard') {\r\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\r\n        if (value < 0) {\r\n          bar.x = this.xScale(value);\r\n        } else {\r\n          bar.x = this.xScale(xScaleMin);\r\n        }\r\n        bar.y = this.yScale(label);\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      // if total is positive then we show it on the right, otherwise on the left\r\n      if (section.total > 0) {\r\n        section.width = this.xScale(totalPositive);\r\n      } else {\r\n        section.width = this.xScale(totalNegative);\r\n      }\r\n      section.height = this.yScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(0);\r\n        section.y = this.yScale(d.label);\r\n        section.width = this.xScale(section.total) - this.xScale(0);\r\n        section.height = this.yScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar) {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n\r\n  click(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { formatLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar-label]',\r\n  template: `\r\n    <svg:text\r\n      class=\"textDataLabel\"\r\n      alignment-baseline=\"middle\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n    >\r\n      {{ formatedValue }}\r\n    </svg:text>\r\n  `,\r\n  styleUrls: ['./bar-label.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarLabelComponent implements OnChanges {\r\n  @Input() value;\r\n  @Input() valueFormatting: any;\r\n  @Input() barX;\r\n  @Input() barY;\r\n  @Input() barWidth;\r\n  @Input() barHeight;\r\n  @Input() orientation;\r\n\r\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: any;\r\n  x: number;\r\n  y: number;\r\n  horizontalPadding: number = 2;\r\n  verticalPadding: number = 5;\r\n  formatedValue: string;\r\n  transform: string;\r\n  textAnchor: string;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getSize(): any {\r\n    const h = this.element.getBoundingClientRect().height;\r\n    const w = this.element.getBoundingClientRect().width;\r\n    return { height: h, width: w, negative: this.value < 0 };\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dimensionsChanged.emit(this.getSize());\r\n  }\r\n\r\n  update(): void {\r\n    if (this.valueFormatting) {\r\n      this.formatedValue = this.valueFormatting(this.value);\r\n    } else {\r\n      this.formatedValue = formatLabel(this.value);\r\n    }\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x = this.barX + this.barWidth;\r\n      // if the value is negative then it's on the left of the x0.\r\n      // we need to put the data label in front of the bar\r\n      if (this.value < 0) {\r\n        this.x = this.x - this.horizontalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.x = this.x + this.horizontalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.y = this.barY + this.barHeight / 2;\r\n    } else {\r\n      // orientation must be \"vertical\"\r\n      this.x = this.barX + this.barWidth / 2;\r\n      this.y = this.barY + this.barHeight;\r\n\r\n      if (this.value < 0) {\r\n        this.y = this.y + this.verticalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.y = this.y - this.verticalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BarComponent } from './bar.component';\r\nimport { BarHorizontalComponent } from './bar-horizontal.component';\r\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\r\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\r\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\r\nimport { BarVerticalComponent } from './bar-vertical.component';\r\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\r\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\r\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\r\nimport { SeriesHorizontal } from './series-horizontal.component';\r\nimport { SeriesVerticalComponent } from './series-vertical.component';\r\nimport { BarLabelComponent } from './bar-label.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ],\r\n  exports: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ]\r\n})\r\nexport class BarChartModule {}\r\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\n\r\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\r\n  let domain: number[] = [];\r\n  if (scaleType === 'linear') {\r\n    values = values.map(v => Number(v));\r\n    if (!autoScale) {\r\n      values.push(0);\r\n    }\r\n  }\r\n\r\n  if (scaleType === 'time' || scaleType === 'linear') {\r\n    const min = minVal ? minVal : Math.min(...values);\r\n    const max = maxVal ? maxVal : Math.max(...values);\r\n\r\n    domain = [min, max];\r\n  } else {\r\n    domain = values;\r\n  }\r\n\r\n  return domain;\r\n}\r\n\r\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\r\n  let scale: any;\r\n\r\n  if (scaleType === 'time') {\r\n    scale = scaleTime()\r\n      .range(range)\r\n      .domain(domain);\r\n  } else if (scaleType === 'linear') {\r\n    scale = scaleLinear()\r\n      .range(range)\r\n      .domain(domain);\r\n\r\n    if (roundDomains) {\r\n      scale = scale.nice();\r\n    }\r\n  } else if (scaleType === 'ordinal') {\r\n    scale = scalePoint()\r\n      .range([range[0], range[1]])\r\n      .domain(domain);\r\n  }\r\n\r\n  return scale;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { getDomain, getScale } from './bubble-chart.utils';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bubble-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [dims]=\"dims\"\r\n          [xScale]=\"xScale\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        />\r\n        <svg:rect\r\n          class=\"bubble-chart-area\"\r\n          x=\"0\"\r\n          y=\"0\"\r\n          [attr.width]=\"dims.width\"\r\n          [attr.height]=\"dims.height\"\r\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\r\n          (mouseenter)=\"deactivateAll()\"\r\n        />\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-bubble-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [rScale]=\"rScale\"\r\n              [xScaleType]=\"xScaleType\"\r\n              [yScaleType]=\"yScaleType\"\r\n              [xAxisLabel]=\"xAxisLabel\"\r\n              [yAxisLabel]=\"yAxisLabel\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event, series)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleChartComponent extends BaseChartComponent {\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean = true;\r\n  @Input() yAxis: boolean = true;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() maxRadius = 10;\r\n  @Input() minRadius = 3;\r\n  @Input() autoScale: boolean;\r\n  @Input() schemeType = 'ordinal';\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: any;\r\n  @Input() yScaleMax: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  colors: ColorHelper;\r\n  scaleType = 'linear';\r\n  margin = [10, 20, 10, 20];\r\n  bubblePadding = [0, 0, 0, 0];\r\n  data: any;\r\n\r\n  legendOptions: any;\r\n  transform: string;\r\n\r\n  clipPath: string;\r\n  clipPathId: string;\r\n\r\n  seriesDomain: any[];\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  rDomain: number[];\r\n\r\n  xScaleType: string;\r\n  yScaleType: string;\r\n\r\n  yScale: any;\r\n  xScale: any;\r\n  rScale: any;\r\n\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n\r\n  activeEntries: any[] = [];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.seriesDomain = this.results.map(d => d.name);\r\n    this.rDomain = this.getRDomain();\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n\r\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\r\n\r\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\r\n\r\n    this.data = this.results;\r\n\r\n    this.minRadius = Math.max(this.minRadius, 1);\r\n    this.maxRadius = Math.max(this.maxRadius, 1);\r\n\r\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\r\n\r\n    this.bubblePadding = [0, 0, 0, 0];\r\n    this.setScales();\r\n\r\n    this.bubblePadding = this.getBubblePadding();\r\n    this.setScales();\r\n\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getBubblePadding() {\r\n    let yMin = 0;\r\n    let xMin = 0;\r\n    let yMax = this.dims.height;\r\n    let xMax = this.dims.width;\r\n\r\n    for (const s of this.data) {\r\n      for (const d of s.series) {\r\n        const r = this.rScale(d.r);\r\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\r\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\r\n        xMin = Math.max(r - cx, xMin);\r\n        yMin = Math.max(r - cy, yMin);\r\n        yMax = Math.max(cy + r, yMax);\r\n        xMax = Math.max(cx + r, xMax);\r\n      }\r\n    }\r\n\r\n    xMax = Math.max(xMax - this.dims.width, 0);\r\n    yMax = Math.max(yMax - this.dims.height, 0);\r\n\r\n    return [yMin, xMax, yMax, xMin];\r\n  }\r\n\r\n  setScales() {\r\n    let width = this.dims.width;\r\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\r\n      width = width - this.bubblePadding[1];\r\n    }\r\n    let height = this.dims.height;\r\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\r\n      height = height - this.bubblePadding[2];\r\n    }\r\n    this.xScale = this.getXScale(this.xDomain, width);\r\n    this.yScale = this.getYScale(this.yDomain, height);\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\r\n  }\r\n\r\n  getRScale(domain, range): any {\r\n    const scale = scaleLinear()\r\n      .range(range)\r\n      .domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      position: this.legendPosition,\r\n      title: undefined\r\n    };\r\n\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.rDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.x)) {\r\n          values.push(d.x);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.xScaleType = getScaleType(values);\r\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.y)) {\r\n          values.push(d.y);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.yScaleType = getScaleType(values);\r\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\r\n  }\r\n\r\n  getRDomain(): number[] {\r\n    let min = Infinity;\r\n    let max = -Infinity;\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        const value = Number(d.r) || 1;\r\n        min = Math.min(min, value);\r\n        max = Math.max(max, value);\r\n      }\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bubble-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\r\n      <svg:g [attr.transform]=\"circle.transform\">\r\n        <svg:g\r\n          ngx-charts-circle\r\n          [@animationState]=\"'active'\"\r\n          class=\"circle\"\r\n          [cx]=\"0\"\r\n          [cy]=\"0\"\r\n          [r]=\"circle.radius\"\r\n          [fill]=\"circle.color\"\r\n          [style.opacity]=\"circle.opacity\"\r\n          [class.active]=\"circle.isActive\"\r\n          [pointerEvents]=\"'all'\"\r\n          [data]=\"circle.value\"\r\n          [classNames]=\"circle.classNames\"\r\n          (select)=\"onClick(circle.data)\"\r\n          (activate)=\"activateCircle(circle)\"\r\n          (deactivate)=\"deactivateCircle(circle)\"\r\n          ngx-tooltip\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipPlacement]=\"'top'\"\r\n          [tooltipType]=\"'tooltip'\"\r\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipContext]=\"circle.data\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0,\r\n          transform: 'scale(0)'\r\n        }),\r\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() rScale;\r\n  @Input() xScaleType;\r\n  @Input() yScaleType;\r\n  @Input() colors;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circles: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circles = this.getCircles();\r\n  }\r\n\r\n  getCircles(): any[] {\r\n    const seriesName = this.data.name;\r\n\r\n    return this.data.series\r\n      .map((d, i) => {\r\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\r\n          const y = d.y;\r\n          const x = d.x;\r\n          const r = d.r;\r\n\r\n          const radius = this.rScale(r || 1);\r\n          const tooltipLabel = formatLabel(d.name);\r\n\r\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\r\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\r\n\r\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\r\n\r\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\r\n          const opacity = isActive ? 1 : 0.3;\r\n\r\n          const data = Object.assign({}, d, {\r\n            series: seriesName,\r\n            name: d.name,\r\n            value: d.y,\r\n            x: d.x,\r\n            radius: d.r\r\n          });\r\n\r\n          return {\r\n            data,\r\n            x,\r\n            y,\r\n            r,\r\n            classNames: [`circle-data-${i}`],\r\n            value: y,\r\n            label: x,\r\n            cx,\r\n            cy,\r\n            radius,\r\n            tooltipLabel,\r\n            color,\r\n            opacity,\r\n            seriesName,\r\n            isActive,\r\n            transform: `translate(${cx},${cy})`\r\n          };\r\n        }\r\n      })\r\n      .filter(circle => circle !== undefined);\r\n  }\r\n\r\n  getTooltipText(circle): string {\r\n    const hasRadius = typeof circle.r !== 'undefined';\r\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\r\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\r\n\r\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\r\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\r\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\r\n    const x = formatLabel(circle.x);\r\n    const y = formatLabel(circle.y);\r\n    const name =\r\n      hasSeriesName && hasTooltipLabel\r\n        ? `${circle.seriesName} â¢ ${circle.tooltipLabel}`\r\n        : circle.seriesName + circle.tooltipLabel;\r\n    const tooltipTitle =\r\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\r\n\r\n    return `\r\n      ${tooltipTitle}\r\n      <span class=\"tooltip-label\">\r\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\r\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\r\n      </span>\r\n      <span class=\"tooltip-val\">\r\n        ${escapeLabel(radiusValue)}\r\n      </span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isVisible(circle): boolean {\r\n    if (this.activeEntries.length > 0) {\r\n      return this.isActive({ name: circle.seriesName });\r\n    }\r\n\r\n    return circle.opacity !== 0;\r\n  }\r\n\r\n  activateCircle(circle): void {\r\n    circle.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(circle): void {\r\n    circle.barVisible = false;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n\r\n  trackBy(index, circle): string {\r\n    return `${circle.data.series} ${circle.data.name}`;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BubbleChartComponent } from './bubble-chart.component';\r\nimport { BubbleSeriesComponent } from './bubble-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\r\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\r\n})\r\nexport class BubbleChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        rx=\"3\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"cell\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"onClick()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatMapCellComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() data;\r\n  @Input() label;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  activeRange: any[];\r\n  startOpacity: number;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  gradientStops: any[];\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n    this.startOpacity = 0.3;\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n\r\n    if (this.animations) {\r\n      this.loadAnimation();\r\n    }\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n    node.attr('opacity', 0);\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node\r\n      .transition()\r\n      .duration(750)\r\n      .attr('opacity', 1);\r\n  }\r\n\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-heat-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [data]=\"c.data\"\r\n      (select)=\"onClick(c.cell)\"\r\n      (activate)=\"activate.emit(c.cell)\"\r\n      (deactivate)=\"deactivate.emit(c.cell)\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() gradient: boolean;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnInit() {\r\n    if (!this.tooltipText) {\r\n      this.tooltipText = this.getTooltipText;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells() {\r\n    const cells = [];\r\n\r\n    this.data.map(row => {\r\n      row.series.map(cell => {\r\n        const value = cell.value;\r\n        cell.series = row.name;\r\n\r\n        cells.push({\r\n          row,\r\n          cell,\r\n          x: this.xScale(row.name),\r\n          y: this.yScale(cell.name),\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: this.colors.getColor(value),\r\n          data: value,\r\n          label: formatLabel(cell.name),\r\n          series: row.name\r\n        });\r\n      });\r\n    });\r\n\r\n    return cells;\r\n  }\r\n\r\n  getTooltipText({ label, data, series }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(series)} â¢ ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.tooltipText;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { scaleBand } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-heat-map',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [animations]=\"animations\"\r\n      [legendOptions]=\"legendOptions\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:rect\r\n          *ngFor=\"let rect of rects\"\r\n          [attr.x]=\"rect.x\"\r\n          [attr.y]=\"rect.y\"\r\n          [attr.rx]=\"rect.rx\"\r\n          [attr.width]=\"rect.width\"\r\n          [attr.height]=\"rect.height\"\r\n          [attr.fill]=\"rect.fill\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-heat-map-cell-series\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [data]=\"results\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, undefined)\"\r\n          (deactivate)=\"onDeactivate($event, undefined)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class HeatMapComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() gradient: boolean;\r\n  @Input() innerPadding: number | number[] = 8;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  color: any;\r\n  colors: ColorHelper;\r\n  colorScale: any;\r\n  transform: string;\r\n  rects: any[];\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  scaleType: string = 'linear';\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.formatDates();\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.scaleType = getScaleType(this.valueDomain, false);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.scaleType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.scaleType === 'linear') {\r\n      let min = this.min;\r\n      let max = this.max;\r\n      if (!this.min) {\r\n        min = Math.min(0, ...this.valueDomain);\r\n      }\r\n      if (!this.max) {\r\n        max = Math.max(...this.valueDomain);\r\n      }\r\n      this.valueDomain = [min, max];\r\n    }\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n    this.rects = this.getRects();\r\n  }\r\n\r\n  getXDomain(): any {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.name)) {\r\n        domain.push(group.name);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.name)) {\r\n          domain.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  /**\r\n   * Converts the input to gap paddingInner in fraction\r\n   * Supports the following inputs:\r\n   *    Numbers: 8\r\n   *    Strings: \"8\", \"8px\", \"8%\"\r\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\r\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\r\n   *\r\n   * @memberOf HeatMapComponent\r\n   */\r\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\r\n    if (typeof value === 'string') {\r\n      value = value\r\n        .replace('[', '')\r\n        .replace(']', '')\r\n        .replace('px', '')\r\n        // tslint:disable-next-line: quotemark\r\n        .replace(\"'\", '');\r\n\r\n      if (value.includes(',')) {\r\n        value = value.split(',');\r\n      }\r\n    }\r\n    if (Array.isArray(value) && typeof index === 'number') {\r\n      return this.getDimension(value[index], null, N, L);\r\n    }\r\n    if (typeof value === 'string' && value.includes('%')) {\r\n      return +value.replace('%', '') / 100;\r\n    }\r\n    return N / (L / +value + 1);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .domain(this.xDomain)\r\n      .paddingInner(f);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\r\n    return scaleBand()\r\n      .rangeRound([this.dims.height, 0])\r\n      .domain(this.yDomain)\r\n      .paddingInner(f);\r\n  }\r\n\r\n  getRects(): any[] {\r\n    const rects = [];\r\n\r\n    this.xDomain.map(xVal => {\r\n      this.yDomain.map(yVal => {\r\n        rects.push({\r\n          x: this.xScale(xVal),\r\n          y: this.yScale(yVal),\r\n          rx: 3,\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: 'rgba(200,200,200,0.03)'\r\n        });\r\n      });\r\n    });\r\n\r\n    return rects;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: this.scaleType,\r\n      domain: this.valueDomain,\r\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\r\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { HeatMapCellComponent } from './heat-map-cell.component';\r\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\r\nimport { HeatMapComponent } from './heat-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\r\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\r\n})\r\nexport class HeatMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { select } from 'd3-selection';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line]',\r\n  template: `\r\n    <svg:path\r\n      [@animationState]=\"'active'\"\r\n      class=\"line\"\r\n      [attr.d]=\"initialPath\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      stroke-width=\"1.5px\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          strokeDasharray: 2000,\r\n          strokeDashoffset: 2000\r\n        }),\r\n        animate(\r\n          1000,\r\n          style({\r\n            strokeDashoffset: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineComponent implements OnChanges {\r\n  @Input() path;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() fill: string = 'none';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  initialized: boolean = false;\r\n  initialPath: string;\r\n\r\n  constructor(private element: ElementRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.initialized = true;\r\n      this.initialPath = this.path;\r\n    } else {\r\n      this.updatePathEl();\r\n    }\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element.nativeElement).select('.line');\r\n\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(750)\r\n        .attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-line-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [referenceLines]=\"referenceLines\"\r\n          [showRefLines]=\"showRefLines\"\r\n          [showRefLabels]=\"showRefLabels\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-line-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [hasRange]=\"hasRange\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [scaleType]=\"scaleType\"\r\n        [legend]=\"legend\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-line-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [curve]=\"curve\"\r\n            [hasRange]=\"hasRange\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() autoScale;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n  @Input() referenceLines: any;\r\n  @Input() showRefLabels: boolean = true;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any;\r\n  xScale: any;\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  clipPath: string;\r\n  clipPathId: string;\r\n  series: any;\r\n  areaPath: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  hasRange: boolean; // whether the line has a min-max range around it\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime()\r\n        .range([0, width])\r\n        .domain(domain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear()\r\n        .range([0, width])\r\n        .domain(domain);\r\n\r\n      if (this.roundDomains) {\r\n        scale = scale.nice();\r\n      }\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint()\r\n        .range([0, width])\r\n        .padding(0.1)\r\n        .domain(domain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear()\r\n      .range([height, 0])\r\n      .domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    this.deactivateAll();\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { area, line } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line-series]',\r\n  template: `\r\n    <svg:g>\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-area\r\n        class=\"line-highlight\"\r\n        [data]=\"data\"\r\n        [path]=\"areaPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [opacity]=\"0.25\"\r\n        [startOpacity]=\"0\"\r\n        [gradient]=\"true\"\r\n        [stops]=\"areaGradientStops\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"line-series\"\r\n        [data]=\"data\"\r\n        [path]=\"path\"\r\n        [stroke]=\"stroke\"\r\n        [animations]=\"animations\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-area\r\n        *ngIf=\"hasRange\"\r\n        class=\"line-series-range\"\r\n        [data]=\"data\"\r\n        [path]=\"outerPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [opacity]=\"rangeFillOpacity\"\r\n        [animations]=\"animations\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LineSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() hasRange: boolean;\r\n  @Input() animations: boolean = true;\r\n\r\n  path: string;\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  stroke: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const lineGen = this.getLineGenerator();\r\n    this.path = lineGen(data) || '';\r\n\r\n    const areaGen = this.getAreaGenerator();\r\n    this.areaPath = areaGen(data) || '';\r\n\r\n    if (this.hasRange) {\r\n      const range = this.getRangeGenerator();\r\n      this.outerPath = range(data) || '';\r\n    }\r\n\r\n    if (this.hasGradient) {\r\n      this.stroke = this.gradientUrl;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      if (max === min) {\r\n        this.stroke = this.colors.getColor(max);\r\n      }\r\n    } else {\r\n      this.stroke = this.colors.getColor(this.data.name);\r\n    }\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return line<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getRangeGenerator(): any {\r\n    return area<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\r\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getAreaGenerator(): any {\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    return area<any>()\r\n      .x(xProperty)\r\n      .y0(() => this.yScale.range()[0])\r\n      .y1(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  updateGradients() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      this.gradientId = 'grad' + id().toString();\r\n      this.gradientUrl = `url(#${this.gradientId})`;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n      this.areaGradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LineComponent } from './line.component';\r\nimport { LineChartComponent } from './line-chart.component';\r\nimport { LineSeriesComponent } from './line-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\r\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\r\n})\r\nexport class LineChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveCardinalClosed } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { isDate } from '../utils/types';\r\n\r\nconst twoPI = 2 * Math.PI;\r\n\r\n@Component({\r\n  selector: 'ngx-charts-polar-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\r\n          <svg:g *ngIf=\"showGridLines\">\r\n            <svg:circle\r\n              *ngFor=\"let r of radiusTicks\"\r\n              class=\"gridline-path radial-gridline-path\"\r\n              cx=\"0\"\r\n              cy=\"0\"\r\n              [attr.r]=\"r\"\r\n            />\r\n          </svg:g>\r\n          <svg:g *ngIf=\"xAxis\">\r\n            <svg:g\r\n              ngx-charts-pie-label\r\n              *ngFor=\"let tick of thetaTicks\"\r\n              [data]=\"tick\"\r\n              [radius]=\"outerRadius\"\r\n              [label]=\"tick.label\"\r\n              [max]=\"outerRadius\"\r\n              [value]=\"showGridLines ? 1 : outerRadius\"\r\n              [explodeSlices]=\"true\"\r\n              [animations]=\"animations\"\r\n              [labelTrim]=\"labelTrim\"\r\n              [labelTrimSize]=\"labelTrimSize\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          [attr.transform]=\"transformYAxis\"\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yAxisScale\"\r\n          [dims]=\"yAxisDims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-axis-label\r\n          *ngIf=\"xAxis && showXAxisLabel\"\r\n          [label]=\"xAxisLabel\"\r\n          [offset]=\"labelOffset\"\r\n          [orient]=\"'bottom'\"\r\n          [height]=\"dims.height\"\r\n          [width]=\"dims.width\"\r\n        ></svg:g>\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-polar-series\r\n              [gradient]=\"gradient\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [animations]=\"animations\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: [\r\n    '../common/base-chart.component.scss',\r\n    '../pie-chart/pie-chart.component.scss',\r\n    './polar-chart.component.scss'\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class PolarChartComponent extends BaseChartComponent {\r\n  @Input() legend: boolean;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean;\r\n  @Input() yAxis: boolean;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() autoScale: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveCardinalClosed;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number = 0.15;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: (o: any) => any;\r\n  @Input() yAxisTickFormatting: (o: any) => any;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showSeriesOnHover: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() yAxisMinScale: number = 0;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yAxisDims: ViewDimensions;\r\n  labelOffset: number;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any; // -> rScale\r\n  xScale: any; // -> tScale\r\n  yAxisScale: any; // -> yScale\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  transformPlot: string;\r\n  transformYAxis: string;\r\n  transformXAxis: string;\r\n  series: any; // ???\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  thetaTicks: any[];\r\n  radiusTicks: number[];\r\n  outerRadius: number;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.setDims();\r\n\r\n    this.setScales();\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.setTicks();\r\n  }\r\n\r\n  setDims() {\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    const halfWidth = Math.floor(this.dims.width / 2);\r\n    const halfHeight = Math.floor(this.dims.height / 2);\r\n\r\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\r\n\r\n    const yOffset = Math.max(0, halfHeight - outerRadius);\r\n\r\n    this.yAxisDims = {\r\n      ...this.dims,\r\n      width: halfWidth\r\n    };\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n    this.transformYAxis = `translate(0, ${yOffset})`;\r\n    this.labelOffset = this.dims.height + 40;\r\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\r\n  }\r\n\r\n  setScales() {\r\n    const xValues = this.getXValues();\r\n    this.scaleType = getScaleType(xValues);\r\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, twoPI);\r\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\r\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\r\n  }\r\n\r\n  setTicks() {\r\n    let tickFormat;\r\n    if (this.xAxisTickFormatting) {\r\n      tickFormat = this.xAxisTickFormatting;\r\n    } else if (this.xScale.tickFormat) {\r\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\r\n    } else {\r\n      tickFormat = d => {\r\n        if (isDate(d)) {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const outerRadius = this.outerRadius;\r\n    const s = 1.1;\r\n\r\n    this.thetaTicks = this.xDomain.map(d => {\r\n      const startAngle = this.xScale(d);\r\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\r\n      const label = tickFormat(d);\r\n\r\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\r\n      const pos = [dd, s * startPos[1]];\r\n      return {\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle: startAngle,\r\n        value: outerRadius,\r\n        label,\r\n        startPos,\r\n        pos\r\n      };\r\n    });\r\n\r\n    const minDistance = 10;\r\n\r\n    /* from pie chart, abstract out -*/\r\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\r\n      const a = this.thetaTicks[i];\r\n\r\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\r\n        const b = this.thetaTicks[j];\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\r\n  }\r\n\r\n  getXValues(): any[] {\r\n    const values = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getXDomain(values = this.getXValues()): any[] {\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getYValues(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(domain = this.getYValues()): any[] {\r\n    let min = Math.min(...domain);\r\n    const max = Math.max(this.yAxisMinScale, ...domain);\r\n\r\n    min = Math.max(0, min);\r\n    if (!this.autoScale) {\r\n      min = Math.min(0, min);\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    switch (this.scaleType) {\r\n      case 'time':\r\n        return scaleTime()\r\n          .range([0, width])\r\n          .domain(domain);\r\n      case 'linear':\r\n        const scale = scaleLinear()\r\n          .range([0, width])\r\n          .domain(domain);\r\n        return this.roundDomains ? scale.nice() : scale;\r\n      default:\r\n        return scalePoint()\r\n          .range([0, width - twoPI / domain.length])\r\n          .padding(0)\r\n          .domain(domain);\r\n    }\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear()\r\n      .range([0, height])\r\n      .domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    if (this.schemeType === 'ordinal') {\r\n      return {\r\n        scaleType: this.schemeType,\r\n        colors: this.colors,\r\n        domain: this.seriesDomain,\r\n        title: this.legendTitle,\r\n        position: this.legendPosition\r\n      };\r\n    }\r\n    return {\r\n      scaleType: this.schemeType,\r\n      colors: this.colors.scale,\r\n      domain: this.yDomain,\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n}\r\n","export function isDate(value) {\r\n  return toString.call(value) === '[object Date]';\r\n}\r\n\r\nexport function isNumber(value) {\r\n  return typeof value === 'number';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { lineRadial } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-polar-series]',\r\n  template: `\r\n    <svg:g class=\"polar-charts-series\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [color]=\"seriesColor\"\r\n          [name]=\"gradientId\"\r\n          [startOpacity]=\"0.25\"\r\n          [endOpacity]=\"1\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"polar-series-path\"\r\n        [path]=\"path\"\r\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [class.active]=\"active\"\r\n        [class.inactive]=\"inactive\"\r\n        [attr.fill-opacity]=\"rangeFillOpacity\"\r\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        *ngFor=\"let circle of circles\"\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circleRadius\"\r\n        [fill]=\"circle.color\"\r\n        [style.opacity]=\"inactive ? 0.2 : 1\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        tooltipType=\"tooltip\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n        (select)=\"select.emit(circle.data)\"\r\n        (activate)=\"activate.emit({ name: circle.data.series })\"\r\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PolarSeriesComponent implements OnChanges {\r\n  @Input() name;\r\n  @Input() data;\r\n  @Input() xScale; // Theta\r\n  @Input() yScale; // R\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => string;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  path: string;\r\n  circles: any[];\r\n  circleRadius: number = 3;\r\n\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  seriesColor: string;\r\n\r\n  active: boolean;\r\n  inactive: boolean;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const line = this.getLineGenerator();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const seriesName = this.data.name;\r\n    const linearScaleType = this.colors.scaleType === 'linear';\r\n    const min = this.yScale.domain()[0];\r\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\r\n\r\n    this.path = line(data) || '';\r\n\r\n    this.circles = data.map(d => {\r\n      const a = this.getAngle(d);\r\n      const r = this.getRadius(d);\r\n      const value = d.value;\r\n\r\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\r\n\r\n      const cData = Object.assign({}, d, {\r\n        series: seriesName,\r\n        value,\r\n        name: d.name\r\n      });\r\n\r\n      return {\r\n        data: cData,\r\n        cx: r * Math.sin(a),\r\n        cy: -r * Math.cos(a),\r\n        value,\r\n        color,\r\n        label: d.name\r\n      };\r\n    });\r\n\r\n    this.active = this.isActive(this.data);\r\n    this.inactive = this.isInactive(this.data);\r\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\r\n  }\r\n\r\n  getAngle(d) {\r\n    const label = d.name;\r\n    if (this.scaleType === 'time') {\r\n      return this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      return this.xScale(Number(label));\r\n    }\r\n    return this.xScale(label);\r\n  }\r\n\r\n  getRadius(d) {\r\n    return this.yScale(d.value);\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return lineRadial<any>()\r\n      .angle(d => this.getAngle(d))\r\n      .radius(d => this.getRadius(d))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      return sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      return sortByTime(data, 'name');\r\n    }\r\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n\r\n  defaultTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} â¢ ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  updateGradients() {\r\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\r\n\r\n    if (!this.hasGradient) {\r\n      return;\r\n    }\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n\r\n    if (this.colors.scaleType === 'linear') {\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n    } else {\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-pie-chart',\r\n  template: `\r\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\r\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\r\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\r\n            <svg:g\r\n              ngx-charts-pie-series\r\n              [colors]=\"colors\"\r\n              [series]=\"results\"\r\n              [innerRadius]=\"innerRadius\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [outerRadius]=\"outerRadius\"\r\n              [gradient]=\"gradient\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              [tooltipText]=\"tooltipText\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n              [animations]=\"animations\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </ngx-charts-chart>\r\n      </div>\r\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\r\n        <ngx-charts-advanced-legend\r\n          [data]=\"results\"\r\n          [colors]=\"colors\"\r\n          [width]=\"width - dims.width - margin[1]\"\r\n          [label]=\"label\"\r\n          [animations]=\"animations\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"nameFormatting\"\r\n          [percentageFormatting]=\"percentageFormatting\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, true)\"\r\n          (deactivate)=\"onDeactivate($event, true)\"\r\n        >\r\n        </ngx-charts-advanced-legend>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedPieChartComponent extends BaseChartComponent {\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() label: string = 'Total';\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  data: any;\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  legendWidth: number;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() nameFormatting: (value: string) => any;\r\n  @Input() percentageFormatting: (value: number) => any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: (this.width * 4) / 12.0,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n    this.setColors();\r\n\r\n    const xOffset = this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\r\n    this.innerRadius = this.outerRadius * 0.75;\r\n\r\n    this.transform = `translate(${xOffset} , ${yOffset})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { trimLabel } from '../common/trim-label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-label]',\r\n  template: `\r\n    <title>{{ label }}</title>\r\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\r\n      <svg:text\r\n        class=\"pie-label\"\r\n        [class.animation]=\"animations\"\r\n        dy=\".35em\"\r\n        [style.textAnchor]=\"textAnchor()\"\r\n        [style.shapeRendering]=\"'crispEdges'\"\r\n      >\r\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\r\n      </svg:text>\r\n    </svg:g>\r\n    <svg:path\r\n      [attr.d]=\"line\"\r\n      [attr.stroke]=\"color\"\r\n      fill=\"none\"\r\n      class=\"pie-label-line line\"\r\n      [class.animation]=\"animations\"\r\n    ></svg:path>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieLabelComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() radius;\r\n  @Input() label;\r\n  @Input() color;\r\n  @Input() max;\r\n  @Input() value;\r\n  @Input() explodeSlices;\r\n  @Input() animations: boolean = true;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  trimLabel: (label: string, max?: number) => string;\r\n  line: string;\r\n\r\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\r\n\r\n  constructor() {\r\n    this.trimLabel = trimLabel;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let startRadius = this.radius;\r\n    if (this.explodeSlices) {\r\n      startRadius = (this.radius * this.value) / this.max;\r\n    }\r\n\r\n    const innerArc = arc()\r\n      .innerRadius(startRadius)\r\n      .outerRadius(startRadius);\r\n\r\n    // Calculate innerPos then scale outer position to match label position\r\n    const innerPos = innerArc.centroid(this.data);\r\n\r\n    let scale = this.data.pos[1] / innerPos[1];\r\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\r\n      scale = 1;\r\n    }\r\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\r\n\r\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\r\n  }\r\n\r\n  get textX(): number {\r\n    return this.data.pos[0];\r\n  }\r\n\r\n  get textY(): number {\r\n    return this.data.pos[1];\r\n  }\r\n\r\n  get styleTransform(): string {\r\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\r\n  }\r\n\r\n  get attrTransform(): string {\r\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\r\n  }\r\n\r\n  get textTransition(): string {\r\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\r\n  }\r\n\r\n  textAnchor(): any {\r\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { interpolate } from 'd3-interpolate';\r\nimport { select } from 'd3-selection';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\n/* tslint:disable */\r\nimport { MouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-arc]',\r\n  template: `\r\n    <svg:g class=\"arc-group\">\r\n      <svg:defs *ngIf=\"gradient\">\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          [color]=\"fill\"\r\n          orientation=\"vertical\"\r\n          [name]=\"radialGradientId\"\r\n          [startOpacity]=\"startOpacity\"\r\n        />\r\n      </svg:defs>\r\n      <svg:path\r\n        [attr.d]=\"path\"\r\n        class=\"arc\"\r\n        [class.active]=\"isActive\"\r\n        [attr.fill]=\"getGradient()\"\r\n        (click)=\"onClick()\"\r\n        (dblclick)=\"onDblClick($event)\"\r\n        (mouseenter)=\"activate.emit(data)\"\r\n        (mouseleave)=\"deactivate.emit(data)\"\r\n        [style.pointer-events]=\"getPointerEvents()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieArcComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() startAngle: number = 0;\r\n  @Input() endAngle: number = Math.PI * 2;\r\n  @Input() innerRadius;\r\n  @Input() outerRadius;\r\n  @Input() cornerRadius: number = 0;\r\n  @Input() value;\r\n  @Input() max;\r\n  @Input() data;\r\n  @Input() explodeSlices: boolean = false;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animate: boolean = true;\r\n  @Input() pointerEvents: boolean = true;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  path: any;\r\n  startOpacity: number;\r\n  radialGradientId: string;\r\n  linearGradientId: string;\r\n  gradientFill: string;\r\n  initialized: boolean = false;\r\n  private _timeout;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getGradient() {\r\n    return this.gradient ? this.gradientFill : this.fill;\r\n  }\r\n\r\n  getPointerEvents() {\r\n    return this.pointerEvents ? 'auto' : 'none';\r\n  }\r\n\r\n  update(): void {\r\n    const calc = this.calculateArc();\r\n    this.startOpacity = 0.5;\r\n    this.radialGradientId = 'linearGrad' + id().toString();\r\n    this.gradientFill = `url(#${this.radialGradientId})`;\r\n\r\n    if (this.animate) {\r\n      if (this.initialized) {\r\n        this.updateAnimation();\r\n      } else {\r\n        this.loadAnimation();\r\n        this.initialized = true;\r\n      }\r\n    } else {\r\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\r\n    }\r\n  }\r\n\r\n  calculateArc(): any {\r\n    let outerRadius = this.outerRadius;\r\n    if (this.explodeSlices && this.innerRadius === 0) {\r\n      outerRadius = (this.outerRadius * this.value) / this.max;\r\n    }\r\n\r\n    return arc()\r\n      .innerRadius(this.innerRadius)\r\n      .outerRadius(outerRadius)\r\n      .cornerRadius(this.cornerRadius);\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .attrTween('d', function(d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const copyOfD = Object.assign({}, d);\r\n        copyOfD.endAngle = copyOfD.startAngle;\r\n        const interpolater = interpolate(copyOfD, copyOfD);\r\n        (<any>this)._current = interpolater(0);\r\n        return function(t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      })\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function(d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function(t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  updateAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function(d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function(t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  onClick(): void {\r\n    clearTimeout(this._timeout);\r\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\r\n  }\r\n\r\n  onDblClick(event: MouseEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    clearTimeout(this._timeout);\r\n\r\n    this.dblclick.emit({\r\n      data: this.data,\r\n      nativeEvent: event\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\r\n        <svg:g\r\n          ngx-charts-pie-series\r\n          [colors]=\"colors\"\r\n          [series]=\"data\"\r\n          [showLabels]=\"labels\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [trimLabels]=\"trimLabels\"\r\n          [maxLabelLength]=\"maxLabelLength\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [innerRadius]=\"innerRadius\"\r\n          [outerRadius]=\"outerRadius\"\r\n          [explodeSlices]=\"explodeSlices\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (dblclick)=\"dblclick.emit($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieChartComponent extends BaseChartComponent {\r\n  @Input() labels = false;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() explodeSlices = false;\r\n  @Input() doughnut = false;\r\n  @Input() arcWidth = 0.25;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: any;\r\n  @Output() dblclick = new EventEmitter();\r\n  // optional margins\r\n  @Input() margins: number[];\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  translation: string;\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  data: any;\r\n  colors: ColorHelper;\r\n  domain: any;\r\n  dims: any;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\r\n      this.margins = [30, 80, 30, 80];\r\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\r\n      // default value for margins\r\n      this.margins = [20, 20, 20, 20];\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margins,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    const xOffset = this.margins[3] + this.dims.width / 2;\r\n    const yOffset = this.margins[0] + this.dims.height / 2;\r\n    this.translation = `translate(${xOffset}, ${yOffset})`;\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\r\n    if (this.labels) {\r\n      // make room for labels\r\n      this.outerRadius /= 3;\r\n    } else {\r\n      this.outerRadius /= 2;\r\n    }\r\n    this.innerRadius = 0;\r\n    if (this.doughnut) {\r\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\r\n    }\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    // sort data according to domain\r\n    this.data = this.results.sort((a, b) => {\r\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\r\n    });\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      domain: this.domain,\r\n      colors: this.colors,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  private hasNoOptionalMarginsSet(): boolean {\r\n    return !this.margins || this.margins.length <= 0;\r\n  }\r\n}\r\n","import { scaleBand } from 'd3-scale';\r\n\r\nexport function gridSize(dims, len, minWidth) {\r\n  let rows = 1;\r\n  let cols = len;\r\n  const width = dims.width;\r\n\r\n  if (width > minWidth) {\r\n    while (width / cols < minWidth) {\r\n      rows += 1;\r\n      cols = Math.ceil(len / rows);\r\n    }\r\n  }\r\n\r\n  return [cols, rows];\r\n}\r\n\r\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\r\n  const xScale: any = scaleBand<number>();\r\n  const yScale: any = scaleBand<number>();\r\n  const width = dims.width;\r\n  const height = dims.height;\r\n\r\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\r\n\r\n  const xDomain = [];\r\n  const yDomain = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    yDomain.push(i);\r\n  }\r\n  for (let i = 0; i < columns; i++) {\r\n    xDomain.push(i);\r\n  }\r\n  xScale.domain(xDomain);\r\n  yScale.domain(yDomain);\r\n\r\n  xScale.rangeRound([0, width], 0.1);\r\n  yScale.rangeRound([0, height], 0.1);\r\n\r\n  const res = [];\r\n  const total = designatedTotal ? designatedTotal : getTotal(data);\r\n  const cardWidth = xScale.bandwidth();\r\n  const cardHeight = yScale.bandwidth();\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    res[i] = {};\r\n    res[i].data = {\r\n      name: data[i] ? data[i].name : '',\r\n      value: data[i] ? data[i].value : undefined,\r\n      extra: data[i] ? data[i].extra : undefined,\r\n      label: data[i] ? data[i].label : ''\r\n    };\r\n    res[i].x = xScale(i % columns);\r\n    res[i].y = yScale(Math.floor(i / columns));\r\n    res[i].width = cardWidth;\r\n    res[i].height = cardHeight;\r\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\r\n    res[i].data.total = total;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nfunction getTotal(results) {\r\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { min } from 'd3-array';\r\nimport { format } from 'd3-format';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { gridLayout } from '../common/grid-layout.helper';\r\nimport { formatLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-grid',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\r\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\r\n          <svg:g\r\n            ngx-charts-pie-grid-series\r\n            [colors]=\"series.colors\"\r\n            [data]=\"series.data\"\r\n            [innerRadius]=\"series.innerRadius\"\r\n            [outerRadius]=\"series.outerRadius\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            ngx-tooltip\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipPlacement]=\"'top'\"\r\n            [tooltipType]=\"'tooltip'\"\r\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [tooltipContext]=\"series.data[0].data\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          />\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label percent-label\"\r\n            dy=\"-0.5em\"\r\n            x=\"0\"\r\n            y=\"5\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.percent\"\r\n            [countSuffix]=\"'%'\"\r\n            text-anchor=\"middle\"\r\n          ></svg:text>\r\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.percent.toLocaleString() }}\r\n          </svg:text>\r\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.label }}\r\n          </svg:text>\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.total\"\r\n            [countPrefix]=\"label + ': '\"\r\n          ></svg:text>\r\n          <svg:text\r\n            *ngIf=\"!animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n          >\r\n            {{ label }}: {{ series.total.toLocaleString() }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridComponent extends BaseChartComponent {\r\n  @Input() designatedTotal: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() label: string = 'Total';\r\n  @Input() minWidth: number = 150;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  transform: string;\r\n  series: any[];\r\n  domain: any[];\r\n  colorScale: ColorHelper;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\r\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\r\n\r\n    this.series = this.getSeries();\r\n    this.setColors();\r\n\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  defaultTooltipText({ data }): string {\r\n    const label = trimLabel(formatLabel(data.name));\r\n    const val = data.value.toLocaleString();\r\n    return `\r\n      <span class=\"tooltip-label\">${label}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getSeries(): any[] {\r\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\r\n\r\n    return this.data.map(d => {\r\n      const baselineLabelHeight = 20;\r\n      const padding = 10;\r\n      const name = d.data.name;\r\n      const label = formatLabel(name);\r\n      const value = d.data.value;\r\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\r\n      const innerRadius = radius * 0.9;\r\n\r\n      let count = 0;\r\n      const colors = () => {\r\n        count += 1;\r\n        if (count === 1) {\r\n          return 'rgba(100,100,100,0.3)';\r\n        } else {\r\n          return this.colorScale.getColor(label);\r\n        }\r\n      };\r\n\r\n      const xPos = d.x + (d.width - padding) / 2;\r\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\r\n\r\n      return {\r\n        transform: `translate(${xPos}, ${yPos})`,\r\n        colors,\r\n        innerRadius,\r\n        outerRadius: radius,\r\n        name,\r\n        label: trimLabel(label),\r\n        total: value,\r\n        value,\r\n        percent: format('.1%')(d.data.percent),\r\n        data: [\r\n          d,\r\n          {\r\n            data: {\r\n              other: true,\r\n              value: total - value,\r\n              name: d.data.name\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    });\r\n  }\r\n\r\n  getTotal(): any {\r\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { pie } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-grid-series]',\r\n  template: `\r\n    <svg:g class=\"pie-grid-arcs\">\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\r\n        [attr.class]=\"arc.class\"\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [data]=\"arc.data\"\r\n        [gradient]=\"false\"\r\n        [pointerEvents]=\"arc.pointerEvents\"\r\n        [animate]=\"arc.animate\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() data;\r\n  @Input() innerRadius = 70;\r\n  @Input() outerRadius = 80;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  layout: any;\r\n  arcs: any;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.layout = pie<any, any>()\r\n      .value(d => d.data.value)\r\n      .sort(null);\r\n\r\n    this.arcs = this.getArcs();\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    return this.layout(this.data).map((arc, index) => {\r\n      const label = arc.data.data.name;\r\n      const other = arc.data.data.other;\r\n\r\n      if (index === 0) {\r\n        arc.startAngle = 0;\r\n      }\r\n\r\n      const color = this.colors(label);\r\n      return {\r\n        data: arc.data.data,\r\n        class: 'arc ' + 'arc' + index,\r\n        fill: color,\r\n        startAngle: other ? 0 : arc.startAngle,\r\n        endAngle: arc.endAngle,\r\n        animate: this.animations && !other,\r\n        pointerEvents: !other\r\n      };\r\n    });\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(this.data[0].data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  label(arc): string {\r\n    return arc.data.name;\r\n  }\r\n\r\n  color(arc): any {\r\n    return this.colors(this.label(arc));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  SimpleChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { max } from 'd3-array';\r\nimport { arc, pie } from 'd3-shape';\r\n\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\r\n      <svg:g\r\n        ngx-charts-pie-label\r\n        *ngIf=\"labelVisible(arc)\"\r\n        [data]=\"arc\"\r\n        [radius]=\"outerRadius\"\r\n        [color]=\"color(arc)\"\r\n        [label]=\"labelText(arc)\"\r\n        [labelTrim]=\"trimLabels\"\r\n        [labelTrimSize]=\"maxLabelLength\"\r\n        [max]=\"max\"\r\n        [value]=\"arc.value\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [animations]=\"animations\"\r\n      ></svg:g>\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [gradient]=\"gradient\"\r\n        [data]=\"arc.data\"\r\n        [max]=\"max\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [isActive]=\"isActive(arc.data)\"\r\n        [animate]=\"animations\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n        (dblclick)=\"dblclick.emit($event)\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"arc.data\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() series: any = [];\r\n  @Input() dims;\r\n  @Input() innerRadius = 60;\r\n  @Input() outerRadius = 80;\r\n  @Input() explodeSlices;\r\n  @Input() showLabels;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  max: number;\r\n  data: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    const pieGenerator = pie<any, any>()\r\n      .value(d => d.value)\r\n      .sort(null);\r\n\r\n    const arcData = pieGenerator(this.series);\r\n\r\n    this.max = max(arcData, d => {\r\n      return d.value;\r\n    });\r\n\r\n    this.data = this.calculateLabelPositions(arcData);\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n\r\n  outerArc(): any {\r\n    const factor = 1.5;\r\n\r\n    return arc()\r\n      .innerRadius(this.outerRadius * factor)\r\n      .outerRadius(this.outerRadius * factor);\r\n  }\r\n\r\n  calculateLabelPositions(pieData): any {\r\n    const factor = 1.5;\r\n    const minDistance = 10;\r\n    const labelPositions = pieData;\r\n\r\n    labelPositions.forEach(d => {\r\n      d.pos = this.outerArc().centroid(d);\r\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\r\n    });\r\n\r\n    for (let i = 0; i < labelPositions.length - 1; i++) {\r\n      const a = labelPositions[i];\r\n      if (!this.labelVisible(a)) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = i + 1; j < labelPositions.length; j++) {\r\n        const b = labelPositions[j];\r\n        if (!this.labelVisible(b)) {\r\n          continue;\r\n        }\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return labelPositions;\r\n  }\r\n\r\n  labelVisible(myArc): boolean {\r\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\r\n  }\r\n\r\n  getTooltipTitle(a) {\r\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\r\n  }\r\n\r\n  labelText(myArc): string {\r\n    if (this.labelFormatting) {\r\n      return this.labelFormatting(myArc.data.name);\r\n    }\r\n    return this.label(myArc);\r\n  }\r\n\r\n  label(myArc): string {\r\n    return formatLabel(myArc.data.name);\r\n  }\r\n\r\n  defaultTooltipText(myArc): string {\r\n    const label = this.label(myArc);\r\n    const val = formatLabel(myArc.data.value);\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  color(myArc): any {\r\n    return this.colors.getColor(this.label(myArc));\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\r\nimport { PieLabelComponent } from './pie-label.component';\r\nimport { PieArcComponent } from './pie-arc.component';\r\nimport { PieChartComponent } from './pie-chart.component';\r\nimport { PieGridComponent } from './pie-grid.component';\r\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\r\nimport { PieSeriesComponent } from './pie-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ],\r\n  exports: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ]\r\n})\r\nexport class PieChartModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { PolarChartComponent } from './polar-chart.component';\r\nimport { PolarSeriesComponent } from './polar-series.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { LineChartModule } from '../line-chart/line-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\r\n  declarations: [PolarChartComponent, PolarSeriesComponent],\r\n  exports: [PolarChartComponent, PolarSeriesComponent]\r\n})\r\nexport class PolarChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  NgZone,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { decimalChecker, count } from '../common/count/count.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\r\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\r\n      <svg:path\r\n        *ngIf=\"bandColor && bandColor !== color\"\r\n        class=\"card-band\"\r\n        [attr.fill]=\"bandColor\"\r\n        [attr.transform]=\"transformBand\"\r\n        stroke=\"none\"\r\n        [attr.d]=\"bandPath\"\r\n      />\r\n      <title>{{ label }}</title>\r\n      <svg:foreignObject\r\n        class=\"trimmed-label\"\r\n        x=\"5\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"cardHeight - textPadding[2]\"\r\n        [attr.width]=\"textWidth\"\r\n        [attr.height]=\"labelFontSize + textPadding[2]\"\r\n        alignment-baseline=\"hanging\"\r\n      >\r\n        <xhtml:p\r\n          [style.color]=\"textColor\"\r\n          [style.fontSize.px]=\"labelFontSize\"\r\n          [style.lineHeight.px]=\"labelFontSize\"\r\n          [innerHTML]=\"formattedLabel\"\r\n        >\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n      <svg:text\r\n        #textEl\r\n        class=\"value-text\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"textPadding[0]\"\r\n        [style.fill]=\"textColor\"\r\n        text-anchor=\"start\"\r\n        alignment-baseline=\"hanging\"\r\n        [style.font-size.pt]=\"textFontSize\"\r\n      >\r\n        {{ value }}\r\n      </svg:text>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardComponent implements OnChanges, OnDestroy {\r\n  @Input() color;\r\n  @Input() bandColor;\r\n  @Input() textColor;\r\n\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() data;\r\n  @Input() medianSize: number;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\r\n\r\n  element: HTMLElement;\r\n  value: string = '';\r\n  transform: string;\r\n  formattedLabel: string;\r\n  cardWidth: number;\r\n  cardHeight: number;\r\n  textWidth: number;\r\n  textFontSize: number = 12;\r\n  textTransform: string = '';\r\n  initialized: boolean = false;\r\n  animationReq: any;\r\n\r\n  bandHeight: number = 10;\r\n  transformBand: string;\r\n  textPadding = [10, 20, 5, 20];\r\n  labelFontSize = 15;\r\n\r\n  bandPath: string;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  update(): void {\r\n    this.zone.run(() => {\r\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\r\n\r\n      this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\r\n      this.cardWidth = Math.max(0, this.width);\r\n      this.cardHeight = Math.max(0, this.height);\r\n\r\n      this.label = this.label ? this.label : this.data.name;\r\n\r\n      const cardData = {\r\n        label: this.label,\r\n        data: this.data,\r\n        value: this.data.value\r\n      };\r\n\r\n      this.formattedLabel = labelFormatting(cardData);\r\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\r\n\r\n      const value = hasValue ? valueFormatting(cardData) : '';\r\n\r\n      this.value = this.paddedValue(value);\r\n      this.setPadding();\r\n\r\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\r\n\r\n      setTimeout(() => {\r\n        this.scaleText();\r\n        this.value = value;\r\n        if (hasValue && !this.initialized) {\r\n          setTimeout(() => this.startCount(), 20);\r\n        }\r\n      }, 8);\r\n    });\r\n  }\r\n\r\n  paddedValue(value: string) {\r\n    if (this.medianSize && this.medianSize > value.length) {\r\n      value += '\\u2007'.repeat(this.medianSize - value.length);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  startCount(): void {\r\n    if (!this.initialized && this.animations) {\r\n      cancelAnimationFrame(this.animationReq);\r\n\r\n      const val = this.data.value;\r\n      const decs = decimalChecker(val);\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const callback = ({ value, finished }) => {\r\n        this.zone.run(() => {\r\n          value = finished ? val : value;\r\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\r\n          if (!finished) {\r\n            this.value = this.paddedValue(this.value);\r\n          }\r\n          this.cd.markForCheck();\r\n        });\r\n      };\r\n\r\n      this.animationReq = count(0, val, decs, 1, callback);\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  scaleText(): void {\r\n    this.zone.run(() => {\r\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\r\n      if (width === 0 || height === 0) {\r\n        return;\r\n      }\r\n\r\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\r\n      const availableWidth = this.cardWidth - 2 * textPadding;\r\n      const availableHeight = this.cardHeight / 3;\r\n\r\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\r\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\r\n      this.labelFontSize = Math.min(this.textFontSize, 15);\r\n\r\n      this.setPadding();\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  setPadding() {\r\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\r\n    const padding = this.cardHeight / 2;\r\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\r\n    this.textPadding[2] = padding - this.labelFontSize;\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n}\r\n","import * as d3_color from 'd3-color';\r\n\r\n/**\r\n * Converts a hex to RGB\r\n *\r\n * @export\r\n */\r\nexport function hexToRgb(value: string): any {\r\n  // deprecated, use d3.color()\r\n  return d3_color.rgb(value);\r\n}\r\n\r\n/**\r\n * Accepts a color (string) and returns a inverted hex color (string)\r\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\r\n *\r\n * @export\r\n */\r\nexport function invertColor(value: string): string {\r\n  const color = d3_color.rgb(value);\r\n  const { r, g, b, opacity } = color;\r\n  if (opacity === 0) {\r\n    return color.toString();\r\n  }\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  const depth = yiq >= 128 ? -0.8 : 0.8;\r\n\r\n  return shadeRGBColor(color, depth);\r\n}\r\n\r\n/**\r\n * Given a rgb, it will darken/lighten\r\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n *\r\n * @export\r\n * @param \\{ r, g, b }\r\n */\r\nexport function shadeRGBColor({ r, g, b }, percent) {\r\n  const t = percent < 0 ? 0 : 255;\r\n  const p = percent < 0 ? percent * -1 : percent;\r\n\r\n  r = Math.round((t - r) * p) + r;\r\n  g = Math.round((t - g) * p) + g;\r\n  b = Math.round((t - b) * p) + b;\r\n\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { invertColor } from '../utils/color-utils';\r\n\r\nexport interface CardModel {\r\n  x;\r\n  y;\r\n  width: number;\r\n  height: number;\r\n  color: string;\r\n  label: string;\r\n  data;\r\n  tooltipText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card-series]',\r\n  template: `\r\n    <svg:rect\r\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\r\n      class=\"card-empty\"\r\n      [attr.x]=\"c.x\"\r\n      [attr.y]=\"c.y\"\r\n      [style.fill]=\"emptyColor\"\r\n      [attr.width]=\"c.width\"\r\n      [attr.height]=\"c.height\"\r\n      rx=\"3\"\r\n      ry=\"3\"\r\n    />\r\n    <svg:g\r\n      ngx-charts-card\r\n      *ngFor=\"let c of cards; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [color]=\"c.color\"\r\n      [bandColor]=\"c.bandColor\"\r\n      [textColor]=\"c.textColor\"\r\n      [data]=\"c.data\"\r\n      [label]=\"c.label\"\r\n      [medianSize]=\"medianSize\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardSeriesComponent implements OnChanges {\r\n  @Input() data: any[];\r\n  @Input() slots: any[];\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() innerPadding = 15;\r\n\r\n  @Input() cardColor;\r\n  @Input() bandColor;\r\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\r\n  @Input() textColor;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cards: CardModel[];\r\n  emptySlots: any[];\r\n  medianSize: number;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data.length > 2) {\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const sortedLengths = this.data\r\n        .map(d => {\r\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\r\n          return hasValue\r\n            ? valueFormatting({\r\n                data: d.data,\r\n                label: d ? d.data.name : '',\r\n                value: d && d.data ? d.data.value : ''\r\n              }).length\r\n            : 0;\r\n        })\r\n        .sort((a, b) => b - a);\r\n      const idx = Math.ceil(this.data.length / 2);\r\n      this.medianSize = sortedLengths[idx];\r\n    }\r\n\r\n    const cards = this.getCards();\r\n    this.cards = cards.filter(d => d.data.value !== null);\r\n    this.emptySlots = cards.filter(d => d.data.value === null);\r\n  }\r\n\r\n  getCards(): any[] {\r\n    const yPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\r\n    const xPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\r\n\r\n    return this.data.map((d, index) => {\r\n      let label = d.data.name;\r\n      if (label && label.constructor.name === 'Date') {\r\n        label = label.toLocaleDateString();\r\n      } else {\r\n        label = label ? label.toLocaleString() : label;\r\n      }\r\n\r\n      const value = d.data.value;\r\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\r\n      const color = this.cardColor || valueColor || '#000';\r\n      return {\r\n        x: d.x,\r\n        y: d.y,\r\n        width: d.width - xPadding,\r\n        height: d.height - yPadding,\r\n        color,\r\n        bandColor: this.bandColor || valueColor,\r\n        textColor: this.textColor || invertColor(color),\r\n        label,\r\n        data: d.data,\r\n        tooltipText: `${label}: ${value}`\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(index, card): string {\r\n    return card.label;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-number-card',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\r\n        <svg:g\r\n          ngx-charts-card-series\r\n          [colors]=\"colors\"\r\n          [cardColor]=\"cardColor\"\r\n          [bandColor]=\"bandColor\"\r\n          [textColor]=\"textColor\"\r\n          [emptyColor]=\"emptyColor\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [innerPadding]=\"innerPadding\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberCardComponent extends BaseChartComponent {\r\n  @Input() cardColor: string;\r\n  @Input() bandColor: string;\r\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\r\n  @Input() innerPadding = 15;\r\n  @Input() textColor: string;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() designatedTotal: number;\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  slots: any[];\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  domain: any[];\r\n  margin = [10, 10, 10, 10];\r\n\r\n  backgroundCards: any[];\r\n\r\n  get clickable() {\r\n    return !!this.select.observers.length;\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.setColors();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    const size = gridSize(this.dims, this.results.length, 150);\r\n    const N = size[0] * size[1];\r\n\r\n    const data = this.results.slice();\r\n\r\n    while (data.length < N) {\r\n      data.push({ value: null });\r\n    }\r\n\r\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { CardComponent } from './card.component';\r\nimport { CardSeriesComponent } from './card-series.component';\r\nimport { NumberCardComponent } from './number-card.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\r\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\r\n})\r\nexport class NumberCardModule {}\r\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { invertColor } from '../utils/color-utils';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell]',\r\n  template: `\r\n    <svg:g>\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [style.cursor]=\"'pointer'\"\r\n        class=\"cell\"\r\n        (click)=\"onClick()\"\r\n      />\r\n      <svg:foreignObject\r\n        *ngIf=\"width >= 70 && height >= 35\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"treemap-label\"\r\n        [style.pointer-events]=\"'none'\"\r\n      >\r\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\r\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\r\n          <xhtml:br />\r\n          <xhtml:span\r\n            *ngIf=\"animations\"\r\n            class=\"treemap-val\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"value\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n          >\r\n          </xhtml:span>\r\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\r\n            {{ formattedValue }}\r\n          </xhtml:span>\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() value;\r\n  @Input() valueType;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  gradientStops: any[];\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  formattedLabel: string;\r\n  formattedValue: string;\r\n  initialized: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.update();\r\n\r\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\r\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\r\n\r\n    const cellData = {\r\n      data: this.data,\r\n      label: this.label,\r\n      value: this.value\r\n    };\r\n\r\n    this.formattedValue = this.valueFormatting(cellData.value);\r\n    this.formattedLabel = labelFormatting(cellData);\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.initialized) {\r\n      this.animateToCurrentForm();\r\n    } else {\r\n      if (this.animations) {\r\n        this.loadAnimation();\r\n      }\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node\r\n      .attr('opacity', 0)\r\n      .attr('x', this.x)\r\n      .attr('y', this.y);\r\n\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  getTextColor(): string {\r\n    return invertColor(this.fill);\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(750)\r\n        .attr('opacity', 1)\r\n        .attr('x', this.x)\r\n        .attr('y', this.y)\r\n        .attr('width', this.width)\r\n        .attr('height', this.height);\r\n    } else {\r\n      node\r\n        .attr('opacity', 1)\r\n        .attr('x', this.x)\r\n        .attr('y', this.y)\r\n        .attr('width', this.width)\r\n        .attr('height', this.height);\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: 0.3\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-tree-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [data]=\"c.data\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [label]=\"c.label\"\r\n      [value]=\"c.value\"\r\n      [valueType]=\"c.valueType\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"c.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells(): any[] {\r\n    return this.data.children\r\n      .filter(d => {\r\n        return d.depth === 1;\r\n      })\r\n      .map((d, index) => {\r\n        const label = d.id;\r\n\r\n        return {\r\n          data: d.data,\r\n          x: d.x0,\r\n          y: d.y0,\r\n          width: d.x1 - d.x0,\r\n          height: d.y1 - d.y0,\r\n          fill: this.colors.getColor(label),\r\n          label,\r\n          value: d.value,\r\n          valueType: d.valueType\r\n        };\r\n      });\r\n  }\r\n\r\n  getTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { treemap, stratify } from 'd3-hierarchy';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-tree-map',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\r\n        <svg:g\r\n          ngx-charts-tree-map-cell-series\r\n          [colors]=\"colors\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['./tree-map.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapComponent extends BaseChartComponent {\r\n  @Input() results;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: any;\r\n  domain: any;\r\n  transform: any;\r\n  colors: ColorHelper;\r\n  treemap: any;\r\n  data: any;\r\n  margin = [10, 10, 10, 10];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\r\n\r\n    const rootNode = {\r\n      name: 'root',\r\n      value: 0,\r\n      isRoot: true\r\n    };\r\n\r\n    const root = stratify<any>()\r\n      .id(d => {\r\n        let label = d.name;\r\n\r\n        if (label.constructor.name === 'Date') {\r\n          label = label.toLocaleDateString();\r\n        } else {\r\n          label = label.toLocaleString();\r\n        }\r\n        return label;\r\n      })\r\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\r\n      .sum(d => d.value);\r\n\r\n    this.data = this.treemap(root);\r\n\r\n    this.setColors();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { TreeMapCellComponent } from './tree-map-cell.component';\r\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\r\nimport { TreeMapComponent } from './tree-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\r\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\r\n})\r\nexport class TreeMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-linear-gauge',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\r\n      <svg:g class=\"linear-gauge chart\">\r\n        <svg:g\r\n          ngx-charts-bar\r\n          class=\"background-bar\"\r\n          [width]=\"dims.width\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-bar\r\n          [width]=\"valueScale(value)\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [fill]=\"colors.getColor(units)\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"5\"\r\n          x2=\"0\"\r\n          y2=\"15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"-5\"\r\n          x2=\"0\"\r\n          y2=\"-15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:g [attr.transform]=\"transform\">\r\n          <svg:g [attr.transform]=\"valueTranslate\">\r\n            <svg:text\r\n              #valueTextEl\r\n              class=\"value\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"valueTextTransform\"\r\n              alignment-baseline=\"after-edge\"\r\n            >\r\n              {{ displayValue }}\r\n            </svg:text>\r\n          </svg:g>\r\n\r\n          <svg:g [attr.transform]=\"unitsTranslate\">\r\n            <svg:text\r\n              #unitsTextEl\r\n              class=\"units\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"unitsTextTransform\"\r\n              alignment-baseline=\"before-edge\"\r\n            >\r\n              {{ units }}\r\n            </svg:text>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() value: number = 0;\r\n  @Input() units: string;\r\n  @Input() previousValue;\r\n  @Input() valueFormatting: any;\r\n\r\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\r\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  transformLine: string;\r\n\r\n  valueResizeScale: number = 1;\r\n  unitsResizeScale: number = 1;\r\n  valueTextTransform: string = '';\r\n  valueTranslate: string = '';\r\n  unitsTextTransform: string = '';\r\n  unitsTranslate: string = '';\r\n  displayValue: string;\r\n  hasPreviousValue: boolean;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => {\r\n      this.scaleText('value');\r\n      this.scaleText('units');\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.hasPreviousValue = this.previousValue !== undefined;\r\n    this.max = Math.max(this.max, this.value);\r\n    this.min = Math.min(this.min, this.value);\r\n    if (this.hasPreviousValue) {\r\n      this.max = Math.max(this.max, this.previousValue);\r\n      this.min = Math.min(this.min, this.previousValue);\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.setColors();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\r\n    this.valueTranslate = `translate(0, -15)`;\r\n    this.unitsTranslate = `translate(0, 15)`;\r\n    setTimeout(() => this.scaleText('value'), 50);\r\n    setTimeout(() => this.scaleText('units'), 50);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear()\r\n      .range([0, this.dims.width])\r\n      .domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(this.value);\r\n    }\r\n    return this.value.toLocaleString();\r\n  }\r\n\r\n  scaleText(element, repeat: boolean = true): void {\r\n    let el;\r\n    let resizeScale;\r\n    if (element === 'value') {\r\n      el = this.valueTextEl;\r\n      resizeScale = this.valueResizeScale;\r\n    } else {\r\n      el = this.unitsTextEl;\r\n      resizeScale = this.unitsResizeScale;\r\n    }\r\n\r\n    const { width, height } = el.nativeElement.getBoundingClientRect();\r\n    if (width === 0 || height === 0) return;\r\n    const oldScale = resizeScale;\r\n    const availableWidth = this.dims.width;\r\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\r\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\r\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\r\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\r\n\r\n    if (resizeScale !== oldScale) {\r\n      if (element === 'value') {\r\n        this.valueResizeScale = resizeScale;\r\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      } else {\r\n        this.unitsResizeScale = resizeScale;\r\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      }\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => {\r\n          this.scaleText(element, false);\r\n        }, 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit({\r\n      name: 'Value',\r\n      value: this.value\r\n    });\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-gauge',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\r\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\r\n          <svg:g\r\n            ngx-charts-gauge-arc\r\n            [backgroundArc]=\"arc.backgroundArc\"\r\n            [valueArc]=\"arc.valueArc\"\r\n            [cornerRadius]=\"cornerRadius\"\r\n            [colors]=\"colors\"\r\n            [isActive]=\"isActive(arc.valueArc.data)\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          ></svg:g>\r\n        </svg:g>\r\n\r\n        <svg:g\r\n          ngx-charts-gauge-axis\r\n          *ngIf=\"showAxis\"\r\n          [bigSegments]=\"bigSegments\"\r\n          [smallSegments]=\"smallSegments\"\r\n          [min]=\"min\"\r\n          [max]=\"max\"\r\n          [radius]=\"outerRadius\"\r\n          [angleSpan]=\"angleSpan\"\r\n          [valueScale]=\"valueScale\"\r\n          [startAngle]=\"startAngle\"\r\n          [tickFormatting]=\"axisTickFormatting\"\r\n        ></svg:g>\r\n\r\n        <svg:text\r\n          #textEl\r\n          *ngIf=\"showText\"\r\n          [style.textAnchor]=\"'middle'\"\r\n          [attr.transform]=\"textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\r\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\r\n        </svg:text>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() textValue: string;\r\n  @Input() units: string;\r\n  @Input() bigSegments: number = 10;\r\n  @Input() smallSegments: number = 5;\r\n  @Input() results: any[];\r\n  @Input() showAxis: boolean = true;\r\n  @Input() startAngle: number = -120;\r\n  @Input() angleSpan: number = 240;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() axisTickFormatting: any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() showText: boolean = true;\r\n\r\n  // Specify margins\r\n  @Input() margin: any[];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('textEl') textEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n\r\n  outerRadius: number;\r\n  textRadius: number; // max available radius for the text\r\n  resizeScale: number = 1;\r\n  rotation: string = '';\r\n  textTransform: string = 'scale(1, 1)';\r\n  cornerRadius: number = 10;\r\n  arcs: any[];\r\n  displayValue: string;\r\n  legendOptions: any;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => this.scaleText());\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showAxis) {\r\n      if (!this.margin) {\r\n        this.margin = [10, 20, 10, 20];\r\n      }\r\n    } else {\r\n      if (!this.margin) {\r\n        this.margin = [60, 100, 60, 100];\r\n      }\r\n    }\r\n\r\n    // make the starting angle positive\r\n    if (this.startAngle < 0) {\r\n      this.startAngle = (this.startAngle % 360) + 360;\r\n    }\r\n\r\n    this.angleSpan = Math.min(this.angleSpan, 360);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\r\n\r\n    this.arcs = this.getArcs();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.rotation = `rotate(${this.startAngle})`;\r\n    setTimeout(() => this.scaleText(), 50);\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    const arcs = [];\r\n\r\n    const availableRadius = this.outerRadius * 0.7;\r\n\r\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\r\n    const arcWidth = radiusPerArc * 0.7;\r\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\r\n    this.cornerRadius = Math.floor(arcWidth / 2);\r\n\r\n    let i = 0;\r\n    for (const d of this.results) {\r\n      const outerRadius = this.outerRadius - i * radiusPerArc;\r\n      const innerRadius = outerRadius - arcWidth;\r\n\r\n      const backgroundArc = {\r\n        endAngle: (this.angleSpan * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: this.max,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const valueArc = {\r\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: d.value,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const arc = {\r\n        backgroundArc,\r\n        valueArc\r\n      };\r\n\r\n      arcs.push(arc);\r\n      i++;\r\n    }\r\n\r\n    return arcs;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const dataMin = Math.min(...values);\r\n    const dataMax = Math.max(...values);\r\n\r\n    if (this.min !== undefined) {\r\n      this.min = Math.min(this.min, dataMin);\r\n    } else {\r\n      this.min = dataMin;\r\n    }\r\n\r\n    if (this.max !== undefined) {\r\n      this.max = Math.max(this.max, dataMax);\r\n    } else {\r\n      this.max = dataMax;\r\n    }\r\n\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear()\r\n      .range([0, this.angleSpan])\r\n      .nice()\r\n      .domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\r\n\r\n    if (this.textValue && 0 !== this.textValue.length) {\r\n      return this.textValue.toLocaleString();\r\n    }\r\n\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(value);\r\n    }\r\n\r\n    return value.toLocaleString();\r\n  }\r\n\r\n  scaleText(repeat: boolean = true): void {\r\n    if (!this.showText) {\r\n      return;\r\n    }\r\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\r\n    const oldScale = this.resizeScale;\r\n\r\n    if (width === 0) {\r\n      this.resizeScale = 1;\r\n    } else {\r\n      const availableSpace = this.textRadius;\r\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\r\n    }\r\n\r\n    if (this.resizeScale !== oldScale) {\r\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => this.scaleText(false), 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      colors: this.colors,\r\n      domain: this.domain,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.valueArc.data.name;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-arc]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      class=\"background-arc\"\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"backgroundArc.endAngle\"\r\n      [innerRadius]=\"backgroundArc.innerRadius\"\r\n      [outerRadius]=\"backgroundArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [data]=\"backgroundArc.data\"\r\n      [animate]=\"false\"\r\n      [pointerEvents]=\"false\"\r\n    ></svg:g>\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"valueArc.endAngle\"\r\n      [innerRadius]=\"valueArc.innerRadius\"\r\n      [outerRadius]=\"valueArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [fill]=\"colors.getColor(valueArc.data.name)\"\r\n      [data]=\"valueArc.data\"\r\n      [animate]=\"animations\"\r\n      [isActive]=\"isActive\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"valueArc.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeArcComponent {\r\n  @Input() backgroundArc: any;\r\n  @Input() valueArc: any;\r\n  @Input() cornerRadius: any;\r\n  @Input() colors: ColorHelper;\r\n  @Input() isActive: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  tooltipText(arc): string {\r\n    const label = formatLabel(arc.data.name);\r\n    let val;\r\n\r\n    if (this.valueFormatting) {\r\n      val = this.valueFormatting(arc.data.value);\r\n    } else {\r\n      val = formatLabel(arc.data.value);\r\n    }\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { line } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-axis]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"rotate\">\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:text\r\n          [style.textAnchor]=\"tick.textAnchor\"\r\n          [attr.transform]=\"tick.textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          {{ tick.text }}\r\n        </svg:text>\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeAxisComponent implements OnChanges {\r\n  @Input() bigSegments: any;\r\n  @Input() smallSegments: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() angleSpan: number;\r\n  @Input() startAngle: number;\r\n  @Input() radius: any;\r\n  @Input() valueScale: any;\r\n  @Input() tickFormatting: any;\r\n\r\n  ticks: any;\r\n  rotationAngle: number;\r\n  rotate: string = '';\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.rotationAngle = -90 + this.startAngle;\r\n    this.rotate = `rotate(${this.rotationAngle})`;\r\n    this.ticks = this.getTicks();\r\n  }\r\n\r\n  getTicks(): any {\r\n    const bigTickSegment = this.angleSpan / this.bigSegments;\r\n    const smallTickSegment = bigTickSegment / this.smallSegments;\r\n    const tickLength = 20;\r\n    const ticks = {\r\n      big: [],\r\n      small: []\r\n    };\r\n\r\n    const startDistance = this.radius + 10;\r\n    const textDist = startDistance + tickLength + 10;\r\n\r\n    for (let i = 0; i <= this.bigSegments; i++) {\r\n      const angleDeg = i * bigTickSegment;\r\n      const angle = (angleDeg * Math.PI) / 180;\r\n\r\n      const textAnchor = this.getTextAnchor(angleDeg);\r\n\r\n      let skip = false;\r\n      if (i === 0 && this.angleSpan === 360) {\r\n        skip = true;\r\n      }\r\n\r\n      if (!skip) {\r\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\r\n        if (this.tickFormatting) {\r\n          text = this.tickFormatting(text);\r\n        }\r\n        ticks.big.push({\r\n          line: this.getTickPath(startDistance, tickLength, angle),\r\n          textAnchor,\r\n          text,\r\n          textTransform: `\r\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\r\n          `\r\n        });\r\n      }\r\n\r\n      if (i === this.bigSegments) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = 1; j <= this.smallSegments; j++) {\r\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\r\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\r\n\r\n        ticks.small.push({\r\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\r\n        });\r\n      }\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getTextAnchor(angle) {\r\n    // [0, 45] = 'middle';\r\n    // [46, 135] = 'start';\r\n    // [136, 225] = 'middle';\r\n    // [226, 315] = 'end';\r\n\r\n    angle = (this.startAngle + angle) % 360;\r\n    let textAnchor = 'middle';\r\n    if (angle > 45 && angle <= 135) {\r\n      textAnchor = 'start';\r\n    } else if (angle > 225 && angle <= 315) {\r\n      textAnchor = 'end';\r\n    }\r\n    return textAnchor;\r\n  }\r\n\r\n  getTickPath(startDistance, tickLength, angle): any {\r\n    const y1 = startDistance * Math.sin(angle);\r\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\r\n    const x1 = startDistance * Math.cos(angle);\r\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\r\n\r\n    const points = [\r\n      { x: x1, y: y1 },\r\n      { x: x2, y: y2 }\r\n    ];\r\n    const lineGenerator = line<any>()\r\n      .x(d => d.x)\r\n      .y(d => d.y);\r\n    return lineGenerator(points);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LinearGaugeComponent } from './linear-gauge.component';\r\nimport { GaugeComponent } from './gauge.component';\r\nimport { GaugeArcComponent } from './gauge-arc.component';\r\nimport { GaugeAxisComponent } from './gauge-axis.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\r\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\r\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\r\n})\r\nexport class GaugeModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from './common/chart-common.module';\r\nimport { AreaChartModule } from './area-chart/area-chart.module';\r\nimport { BarChartModule } from './bar-chart/bar-chart.module';\r\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\r\nimport { HeatMapModule } from './heat-map/heat-map.module';\r\nimport { LineChartModule } from './line-chart/line-chart.module';\r\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\r\nimport { NumberCardModule } from './number-card/number-card.module';\r\nimport { PieChartModule } from './pie-chart/pie-chart.module';\r\nimport { TreeMapModule } from './tree-map/tree-map.module';\r\nimport { GaugeModule } from './gauge/gauge.module';\r\nimport { ngxChartsPolyfills } from './polyfills';\r\n\r\n@NgModule({\r\n  exports: [\r\n    ChartCommonModule,\r\n    AreaChartModule,\r\n    BarChartModule,\r\n    BubbleChartModule,\r\n    HeatMapModule,\r\n    LineChartModule,\r\n    PolarChartModule,\r\n    NumberCardModule,\r\n    PieChartModule,\r\n    TreeMapModule,\r\n    GaugeModule\r\n  ]\r\n})\r\nexport class NgxChartsModule {\r\n  constructor() {\r\n    ngxChartsPolyfills();\r\n  }\r\n}\r\n","// The export is needed here to generate a valid polyfills.metadata.json file\r\nexport function ngxChartsPolyfills() {\r\n  // IE11 fix\r\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\r\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\r\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\r\n  }\r\n}\r\n","import { timeFormat } from 'd3-time-format';\r\n\r\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\r\n  return function(label: string): string {\r\n    if (label === 'No Value' || label === 'Other') {\r\n      return label;\r\n    }\r\n    if (fieldType === 'date' && groupByType === 'groupBy') {\r\n      const formatter = timeFormat('MM/DD/YYYY');\r\n      return formatter(<any>label);\r\n    }\r\n\r\n    return label.toString();\r\n  };\r\n}\r\n"]}